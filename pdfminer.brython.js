__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1578186976520, "extract": [".py", "\nfrom pdfminer.pdfparser import PDFParser\nfrom pdfminer.pdfdocument import PDFDocument\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.pdfpage import PDFTextExtractionNotAllowed\nfrom pdfminer.pdfinterp import PDFResourceManager\nfrom pdfminer.pdfinterp import PDFPageInterpreter\nfrom pdfminer.pdfdevice import PDFDevice\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\nfrom pdfminer.converter import PDFPageAggregator\n\n\n\n\nfp=open(\"/Users/samber/Downloads/_OceanofPDF.com_Factfulness__Ten_Reasons_Were_Wrong_About_-_Hans_Rosling.pdf\",'rb')\n\nparser=PDFParser(fp)\ndocument=PDFDocument(parser,\"\")\n\nif not document.is_extractable:\n raise PDFTextExtractionNotAllowed\n \n \nrsrcmgr=PDFResourceManager()\n\n\nlaparams=LAParams()\n\ndevice=PDFPageAggregator(rsrcmgr,laparams=laparams)\n\n\ninterpreter=PDFPageInterpreter(rsrcmgr,device)\n\ndef get_table_content():\n\n outlines=document.get_outlines()\n for (level,title,dest,a,se)in outlines:\n  print(level,title,dest,a,se)\n  \ndef process_pages():\n for page in PDFPage.create_pages(document):\n  interpreter.process_page(page)\n  \n  layout=device.get_result()\n  print(layout)\n  for element in layout:\n   print(element)\n  print(\"\\n\\n\\n\")\n  \nget_table_content()\nprocess_pages()\n", ["pdfminer.converter", "pdfminer.layout", "pdfminer.pdfdevice", "pdfminer.pdfdocument", "pdfminer.pdfinterp", "pdfminer.pdfpage", "pdfminer.pdfparser"]], "Lib.site-packages.pdfminer.pdftypes": [".py", "#!/usr/bin/env python\nimport zlib\nfrom .lzw import lzwdecode\nfrom .ascii85 import ascii85decode\nfrom .ascii85 import asciihexdecode\nfrom .runlength import rldecode\nfrom .ccitt import ccittfaxdecode\nfrom .psparser import PSException\nfrom .psparser import PSObject\nfrom .psparser import LIT\nfrom .psparser import STRICT\nfrom .utils import apply_png_predictor\nfrom .utils import isnumber\n\n\nLITERAL_CRYPT=LIT('Crypt')\n\n\nLITERALS_FLATE_DECODE=(LIT('FlateDecode'),LIT('Fl'))\nLITERALS_LZW_DECODE=(LIT('LZWDecode'),LIT('LZW'))\nLITERALS_ASCII85_DECODE=(LIT('ASCII85Decode'),LIT('A85'))\nLITERALS_ASCIIHEX_DECODE=(LIT('ASCIIHexDecode'),LIT('AHx'))\nLITERALS_RUNLENGTH_DECODE=(LIT('RunLengthDecode'),LIT('RL'))\nLITERALS_CCITTFAX_DECODE=(LIT('CCITTFaxDecode'),LIT('CCF'))\nLITERALS_DCT_DECODE=(LIT('DCTDecode'),LIT('DCT'))\n\n\n\n\nclass PDFObject(PSObject):\n pass\n \nclass PDFException(PSException):\n pass\n \nclass PDFTypeError(PDFException):\n pass\n \nclass PDFValueError(PDFException):\n pass\n \nclass PDFObjectNotFound(PDFException):\n pass\n \nclass PDFNotImplementedError(PDFException):\n pass\n \n \n \n \nclass PDFObjRef(PDFObject):\n\n def __init__(self,doc,objid,_):\n  if objid ==0:\n   if STRICT:\n    raise PDFValueError('PDF object id cannot be 0.')\n  self.doc=doc\n  self.objid=objid\n  \n  return\n  \n def __repr__(self):\n  return '<PDFObjRef:%d>'%(self.objid)\n  \n def resolve(self,default=None ):\n  try :\n   return self.doc.getobj(self.objid)\n  except PDFObjectNotFound:\n   return default\n   \n   \n   \ndef resolve1(x,default=None ):\n ''\n\n\n\n \n while isinstance(x,PDFObjRef):\n  x=x.resolve(default=default)\n return x\n \n \ndef resolve_all(x,default=None ):\n ''\n\n\n\n \n while isinstance(x,PDFObjRef):\n  x=x.resolve(default=default)\n if isinstance(x,list):\n  x=[resolve_all(v,default=default)for v in x]\n elif isinstance(x,dict):\n  for (k,v)in x.items():\n   x[k]=resolve_all(v,default=default)\n return x\n \n \ndef decipher_all(decipher,objid,genno,x):\n ''\n \n if isinstance(x,bytes):\n  return decipher(objid,genno,x)\n if isinstance(x,list):\n  x=[decipher_all(decipher,objid,genno,v)for v in x]\n elif isinstance(x,dict):\n  for (k,v)in x.items():\n   x[k]=decipher_all(decipher,objid,genno,v)\n return x\n \n \n \ndef int_value(x):\n x=resolve1(x)\n if not isinstance(x,int):\n  if STRICT:\n   raise PDFTypeError('Integer required: %r'%x)\n  return 0\n return x\n \n \ndef float_value(x):\n x=resolve1(x)\n if not isinstance(x,float):\n  if STRICT:\n   raise PDFTypeError('Float required: %r'%x)\n  return 0.0\n return x\n \n \ndef num_value(x):\n x=resolve1(x)\n if not isnumber(x):\n  if STRICT:\n   raise PDFTypeError('Int or Float required: %r'%x)\n  return 0\n return x\n \n \ndef bytes_value(x):\n x=resolve1(x)\n if not isinstance(x,bytes):\n  if STRICT:\n   raise PDFTypeError('Bytes required: %r'%x)\n  return b''\n return x\n \n \ndef list_value(x):\n x=resolve1(x)\n if not isinstance(x,(list,tuple)):\n  if STRICT:\n   raise PDFTypeError('List required: %r'%x)\n  return []\n return x\n \n \ndef dict_value(x):\n x=resolve1(x)\n if not isinstance(x,dict):\n  if STRICT:\n   raise PDFTypeError('Dict required: %r'%x)\n  return {}\n return x\n \n \ndef stream_value(x):\n x=resolve1(x)\n if not isinstance(x,PDFStream):\n  if STRICT:\n   raise PDFTypeError('PDFStream required: %r'%x)\n  return PDFStream({},'')\n return x\n \n \n \n \nclass PDFStream(PDFObject):\n\n def __init__(self,attrs,rawdata,decipher=None ):\n  assert isinstance(attrs,dict)\n  self.attrs=attrs\n  self.rawdata=rawdata\n  self.decipher=decipher\n  self.data=None\n  self.objid=None\n  self.genno=None\n  return\n  \n def set_objid(self,objid,genno):\n  self.objid=objid\n  self.genno=genno\n  return\n  \n def __repr__(self):\n  if self.data is None :\n   assert self.rawdata is not None\n   return '<PDFStream(%r): raw=%d, %r>'%(self.objid,len(self.rawdata),self.attrs)\n  else :\n   assert self.data is not None\n   return '<PDFStream(%r): len=%d, %r>'%(self.objid,len(self.data),self.attrs)\n   \n def __contains__(self,name):\n  return name in self.attrs\n  \n def __getitem__(self,name):\n  return self.attrs[name]\n  \n def get(self,name,default=None ):\n  return self.attrs.get(name,default)\n  \n def get_any(self,names,default=None ):\n  for name in names:\n   if name in self.attrs:\n    return self.attrs[name]\n  return default\n  \n def get_filters(self):\n  filters=self.get_any(('F','Filter'))\n  params=self.get_any(('DP','DecodeParms','FDecodeParms'),{})\n  if not filters:\n   return []\n  if not isinstance(filters,list):\n   filters=[filters]\n  if not isinstance(params,list):\n  \n   params=[params]*len(filters)\n  if STRICT and len(params)!=len(filters):\n   raise PDFException(\"Parameters len filter mismatch\")\n  return zip(filters,params)\n  \n def decode(self):\n  assert self.data is None and self.rawdata is not None\n  data=self.rawdata\n  if self.decipher:\n  \n   data=self.decipher(self.objid,self.genno,data,self.attrs)\n  filters=self.get_filters()\n  if not filters:\n   self.data=data\n   self.rawdata=None\n   return\n  for (f,params)in filters:\n   if f in LITERALS_FLATE_DECODE:\n   \n    try :\n     data=zlib.decompress(data)\n    except zlib.error as e:\n     if STRICT:\n      raise PDFException('Invalid zlib bytes: %r, %r'%(e,data))\n     data=b''\n   elif f in LITERALS_LZW_DECODE:\n    data=lzwdecode(data)\n   elif f in LITERALS_ASCII85_DECODE:\n    data=ascii85decode(data)\n   elif f in LITERALS_ASCIIHEX_DECODE:\n    data=asciihexdecode(data)\n   elif f in LITERALS_RUNLENGTH_DECODE:\n    data=rldecode(data)\n   elif f in LITERALS_CCITTFAX_DECODE:\n    data=ccittfaxdecode(data,params)\n   elif f in LITERALS_DCT_DECODE:\n   \n   \n    pass\n   elif f ==LITERAL_CRYPT:\n   \n    raise PDFNotImplementedError('/Crypt filter is unsupported')\n   else :\n    raise PDFNotImplementedError('Unsupported filter: %r'%f)\n    \n   if 'Predictor'in params:\n    pred=int_value(params['Predictor'])\n    if pred ==1:\n    \n     pass\n    elif 10 <=pred:\n    \n     colors=int_value(params.get('Colors',1))\n     columns=int_value(params.get('Columns',1))\n     bitspercomponent=int_value(params.get('BitsPerComponent',8))\n     data=apply_png_predictor(pred,colors,columns,bitspercomponent,data)\n    else :\n     raise PDFNotImplementedError('Unsupported predictor: %r'%pred)\n  self.data=data\n  self.rawdata=None\n  return\n  \n def get_data(self):\n  if self.data is None :\n   self.decode()\n  return self.data\n  \n def get_rawdata(self):\n  return self.rawdata\n", ["Lib.site-packages.pdfminer.ascii85", "Lib.site-packages.pdfminer.ccitt", "Lib.site-packages.pdfminer.lzw", "Lib.site-packages.pdfminer.psparser", "Lib.site-packages.pdfminer.runlength", "Lib.site-packages.pdfminer.utils", "zlib"]], "Lib.site-packages.pdfminer.pdfinterp": [".py", "#!/usr/bin/env python\nimport re\nimport logging\nfrom io import BytesIO\nfrom .cmapdb import CMapDB\nfrom .cmapdb import CMap\nfrom .psparser import PSTypeError\nfrom .psparser import PSEOF\nfrom .psparser import PSKeyword\nfrom .psparser import literal_name\nfrom .psparser import keyword_name\nfrom .psparser import PSStackParser\nfrom .psparser import LIT\nfrom .psparser import KWD\nfrom .psparser import STRICT\nfrom .pdftypes import PDFException\nfrom .pdftypes import PDFStream\nfrom .pdftypes import PDFObjRef\nfrom .pdftypes import resolve1\nfrom .pdftypes import list_value\nfrom .pdftypes import dict_value\nfrom .pdftypes import stream_value\nfrom .pdffont import PDFFontError\nfrom .pdffont import PDFType1Font\nfrom .pdffont import PDFTrueTypeFont\nfrom .pdffont import PDFType3Font\nfrom .pdffont import PDFCIDFont\nfrom .pdfcolor import PDFColorSpace\nfrom .pdfcolor import PREDEFINED_COLORSPACE\nfrom .utils import choplist\nfrom .utils import mult_matrix\nfrom .utils import MATRIX_IDENTITY\n\n\n\n\nclass PDFResourceError(PDFException):\n pass\n \nclass PDFInterpreterError(PDFException):\n pass\n \n \n \n \nLITERAL_PDF=LIT('PDF')\nLITERAL_TEXT=LIT('Text')\nLITERAL_FONT=LIT('Font')\nLITERAL_FORM=LIT('Form')\nLITERAL_IMAGE=LIT('Image')\n\n\n\n\nclass PDFTextState:\n\n def __init__(self):\n  self.font=None\n  self.fontsize=0\n  self.charspace=0\n  self.wordspace=0\n  self.scaling=100\n  self.leading=0\n  self.render=0\n  self.rise=0\n  self.reset()\n  \n  \n  return\n  \n def __repr__(self):\n  return ('<PDFTextState: font=%r, fontsize=%r, charspace=%r, wordspace=%r, '\n  ' scaling=%r, leading=%r, render=%r, rise=%r, '\n  ' matrix=%r, linematrix=%r>'%\n  (self.font,self.fontsize,self.charspace,self.wordspace,\n  self.scaling,self.leading,self.render,self.rise,\n  self.matrix,self.linematrix))\n  \n def copy(self):\n  obj=PDFTextState()\n  obj.font=self.font\n  obj.fontsize=self.fontsize\n  obj.charspace=self.charspace\n  obj.wordspace=self.wordspace\n  obj.scaling=self.scaling\n  obj.leading=self.leading\n  obj.render=self.render\n  obj.rise=self.rise\n  obj.matrix=self.matrix\n  obj.linematrix=self.linematrix\n  return obj\n  \n def reset(self):\n  self.matrix=MATRIX_IDENTITY\n  self.linematrix=(0,0)\n  return\n  \n  \n  \n  \nclass PDFGraphicState:\n\n def __init__(self):\n  self.linewidth=0\n  self.linecap=None\n  self.linejoin=None\n  self.miterlimit=None\n  self.dash=None\n  self.intent=None\n  self.flatness=None\n  return\n  \n def copy(self):\n  obj=PDFGraphicState()\n  obj.linewidth=self.linewidth\n  obj.linecap=self.linecap\n  obj.linejoin=self.linejoin\n  obj.miterlimit=self.miterlimit\n  obj.dash=self.dash\n  obj.intent=self.intent\n  obj.flatness=self.flatness\n  return obj\n  \n def __repr__(self):\n  return ('<PDFGraphicState: linewidth=%r, linecap=%r, linejoin=%r, '\n  ' miterlimit=%r, dash=%r, intent=%r, flatness=%r>'%\n  (self.linewidth,self.linecap,self.linejoin,\n  self.miterlimit,self.dash,self.intent,self.flatness))\n  \n  \n  \n  \nclass PDFResourceManager:\n\n ''\n\n\n\n\n \n \n debug=False\n \n def __init__(self,caching=True ):\n  self.caching=caching\n  self._cached_fonts={}\n  return\n  \n def get_procset(self,procs):\n  for proc in procs:\n   if proc is LITERAL_PDF:\n    pass\n   elif proc is LITERAL_TEXT:\n    pass\n   else :\n   \n    pass\n  return\n  \n def get_cmap(self,cmapname,strict=False ):\n  try :\n   return CMapDB.get_cmap(cmapname)\n  except CMapDB.CMapNotFound:\n   if strict:\n    raise\n   return CMap()\n   \n def get_font(self,objid,spec):\n  if objid and objid in self._cached_fonts:\n   font=self._cached_fonts[objid]\n  else :\n   if self.debug:\n    logging.info('get_font: create: objid=%r, spec=%r'%(objid,spec))\n   if STRICT:\n    if spec['Type']is not LITERAL_FONT:\n     raise PDFFontError('Type is not /Font')\n     \n   if 'Subtype'in spec:\n    subtype=literal_name(spec['Subtype'])\n   else :\n    if STRICT:\n     raise PDFFontError('Font Subtype is not specified.')\n    subtype='Type1'\n   if subtype in ('Type1','MMType1'):\n   \n    font=PDFType1Font(self,spec)\n   elif subtype =='TrueType':\n   \n    font=PDFTrueTypeFont(self,spec)\n   elif subtype =='Type3':\n   \n    font=PDFType3Font(self,spec)\n   elif subtype in ('CIDFontType0','CIDFontType2'):\n   \n    font=PDFCIDFont(self,spec)\n   elif subtype =='Type0':\n   \n    dfonts=list_value(spec['DescendantFonts'])\n    assert dfonts\n    subspec=dict_value(dfonts[0]).copy()\n    for k in ('Encoding','ToUnicode'):\n     if k in spec:\n      subspec[k]=resolve1(spec[k])\n    font=self.get_font(None ,subspec)\n   else :\n    if STRICT:\n     raise PDFFontError('Invalid Font spec: %r'%spec)\n    font=PDFType1Font(self,spec)\n   if objid and self.caching:\n    self._cached_fonts[objid]=font\n  return font\n  \n  \n  \n  \nclass PDFContentParser(PSStackParser):\n\n def __init__(self,streams):\n  self.streams=streams\n  self.istream=0\n  PSStackParser.__init__(self,None )\n  return\n  \n def fillfp(self):\n  if not self.fp:\n   if self.istream <len(self.streams):\n    strm=stream_value(self.streams[self.istream])\n    self.istream +=1\n   else :\n    raise PSEOF('Unexpected EOF, file truncated?')\n   self.fp=BytesIO(strm.get_data())\n  return\n  \n def seek(self,pos):\n  self.fillfp()\n  PSStackParser.seek(self,pos)\n  return\n  \n def fillbuf(self):\n  if self.charpos <len(self.buf):\n   return\n  while 1:\n   self.fillfp()\n   self.bufpos=self.fp.tell()\n   self.buf=self.fp.read(self.BUFSIZ)\n   if self.buf:\n    break\n   self.fp=None\n  self.charpos=0\n  return\n  \n def get_inline_data(self,pos,target=b'EI'):\n  self.seek(pos)\n  i=0\n  data=b''\n  while i <=len(target):\n   self.fillbuf()\n   if i:\n    c=self.buf[self.charpos:self.charpos+1]\n    data +=c\n    self.charpos +=1\n    if len(target)<=i and c.isspace():\n     i +=1\n    elif i <len(target)and c ==target[i:i+1]:\n     i +=1\n    else :\n     i=0\n   else :\n    try :\n     j=self.buf.index(target[0],self.charpos)\n     \n     data +=self.buf[self.charpos:j+1]\n     self.charpos=j+1\n     i=1\n    except ValueError:\n     data +=self.buf[self.charpos:]\n     self.charpos=len(self.buf)\n  data=data[:-(len(target)+1)]\n  data=re.sub(br'(\\x0d\\x0a|[\\x0d\\x0a])$',b'',data)\n  return (pos,data)\n  \n def flush(self):\n  self.add_results(*self.popall())\n  return\n  \n KEYWORD_BI=KWD(b'BI')\n KEYWORD_ID=KWD(b'ID')\n KEYWORD_EI=KWD(b'EI')\n \n def do_keyword(self,pos,token):\n  if token is self.KEYWORD_BI:\n  \n   self.start_type(pos,'inline')\n  elif token is self.KEYWORD_ID:\n   try :\n    (_,objs)=self.end_type('inline')\n    if len(objs)%2 !=0:\n     raise PSTypeError('Invalid dictionary construct: %r'%objs)\n    d=dict((literal_name(k),v)for (k,v)in choplist(2,objs))\n    (pos,data)=self.get_inline_data(pos+len(b'ID '))\n    obj=PDFStream(d,data)\n    self.push((pos,obj))\n    self.push((pos,self.KEYWORD_EI))\n   except PSTypeError:\n    if STRICT:\n     raise\n  else :\n   self.push((pos,token))\n  return\n  \n  \n  \n  \nclass PDFPageInterpreter:\n\n debug=0\n \n def __init__(self,rsrcmgr,device):\n  self.rsrcmgr=rsrcmgr\n  self.device=device\n  return\n  \n def dup(self):\n  return self.__class__(self.rsrcmgr,self.device)\n  \n  \n  \n def init_resources(self,resources):\n  self.resources=resources\n  self.fontmap={}\n  self.xobjmap={}\n  self.csmap=PREDEFINED_COLORSPACE.copy()\n  if not resources:\n   return\n   \n  def get_colorspace(spec):\n   if isinstance(spec,list):\n    name=literal_name(spec[0])\n   else :\n    name=literal_name(spec)\n   if name =='ICCBased'and isinstance(spec,list)and 2 <=len(spec):\n    return PDFColorSpace(name,stream_value(spec[1])['N'])\n   elif name =='DeviceN'and isinstance(spec,list)and 2 <=len(spec):\n    return PDFColorSpace(name,len(list_value(spec[1])))\n   else :\n    return PREDEFINED_COLORSPACE.get(name)\n  for (k,v)in dict_value(resources).items():\n   if self.debug:\n    logging.debug('Resource: %r: %r'%(k,v))\n   if k =='Font':\n    for (fontid,spec)in dict_value(v).items():\n     objid=None\n     if isinstance(spec,PDFObjRef):\n      objid=spec.objid\n     spec=dict_value(spec)\n     self.fontmap[fontid]=self.rsrcmgr.get_font(objid,spec)\n   elif k =='ColorSpace':\n    for (csid,spec)in dict_value(v).items():\n     self.csmap[csid]=get_colorspace(resolve1(spec))\n   elif k =='ProcSet':\n    self.rsrcmgr.get_procset(list_value(v))\n   elif k =='XObject':\n    for (xobjid,xobjstrm)in dict_value(v).items():\n     self.xobjmap[xobjid]=xobjstrm\n  return\n  \n  \n  \n def init_state(self,ctm):\n \n  self.gstack=[]\n  self.ctm=ctm\n  self.device.set_ctm(self.ctm)\n  self.textstate=PDFTextState()\n  self.graphicstate=PDFGraphicState()\n  self.curpath=[]\n  \n  self.argstack=[]\n  \n  self.scs=self.ncs=None\n  if self.csmap:\n   for v in self.csmap.values():\n    self.scs=self.ncs=v\n    break\n  return\n  \n def push(self,obj):\n  self.argstack.append(obj)\n  return\n  \n def pop(self,n):\n  if n ==0:\n   return []\n  x=self.argstack[-n:]\n  self.argstack=self.argstack[:-n]\n  return x\n  \n def get_current_state(self):\n  return (self.ctm,self.textstate.copy(),self.graphicstate.copy())\n  \n def set_current_state(self,state):\n  (self.ctm,self.textstate,self.graphicstate)=state\n  self.device.set_ctm(self.ctm)\n  return\n  \n  \n def do_q(self):\n  self.gstack.append(self.get_current_state())\n  return\n  \n  \n def do_Q(self):\n  if self.gstack:\n   self.set_current_state(self.gstack.pop())\n  return\n  \n  \n def do_cm(self,a1,b1,c1,d1,e1,f1):\n  self.ctm=mult_matrix((a1,b1,c1,d1,e1,f1),self.ctm)\n  self.device.set_ctm(self.ctm)\n  return\n  \n  \n def do_w(self,linewidth):\n  self.graphicstate.linewidth=linewidth\n  return\n  \n  \n def do_J(self,linecap):\n  self.graphicstate.linecap=linecap\n  return\n  \n  \n def do_j(self,linejoin):\n  self.graphicstate.linejoin=linejoin\n  return\n  \n  \n def do_M(self,miterlimit):\n  self.graphicstate.miterlimit=miterlimit\n  return\n  \n  \n def do_d(self,dash,phase):\n  self.graphicstate.dash=(dash,phase)\n  return\n  \n  \n def do_ri(self,intent):\n  self.graphicstate.intent=intent\n  return\n  \n  \n def do_i(self,flatness):\n  self.graphicstate.flatness=flatness\n  return\n  \n  \n def do_gs(self,name):\n \n  return\n  \n  \n def do_m(self,x,y):\n  self.curpath.append(('m',x,y))\n  return\n  \n  \n def do_l(self,x,y):\n  self.curpath.append(('l',x,y))\n  return\n  \n  \n def do_c(self,x1,y1,x2,y2,x3,y3):\n  self.curpath.append(('c',x1,y1,x2,y2,x3,y3))\n  return\n  \n  \n def do_v(self,x2,y2,x3,y3):\n  self.curpath.append(('v',x2,y2,x3,y3))\n  return\n  \n  \n def do_y(self,x1,y1,x3,y3):\n  self.curpath.append(('y',x1,y1,x3,y3))\n  return\n  \n  \n def do_h(self):\n  self.curpath.append(('h',))\n  return\n  \n  \n def do_re(self,x,y,w,h):\n  self.curpath.append(('m',x,y))\n  self.curpath.append(('l',x+w,y))\n  self.curpath.append(('l',x+w,y+h))\n  self.curpath.append(('l',x,y+h))\n  self.curpath.append(('h',))\n  return\n  \n  \n def do_S(self):\n  self.device.paint_path(self.graphicstate,True ,False ,False ,self.curpath)\n  self.curpath=[]\n  return\n  \n  \n def do_s(self):\n  self.do_h()\n  self.do_S()\n  return\n  \n  \n def do_f(self):\n  self.device.paint_path(self.graphicstate,False ,True ,False ,self.curpath)\n  self.curpath=[]\n  return\n  \n do_F=do_f\n \n \n def do_f_a(self):\n  self.device.paint_path(self.graphicstate,False ,True ,True ,self.curpath)\n  self.curpath=[]\n  return\n  \n  \n def do_B(self):\n  self.device.paint_path(self.graphicstate,True ,True ,False ,self.curpath)\n  self.curpath=[]\n  return\n  \n  \n def do_B_a(self):\n  self.device.paint_path(self.graphicstate,True ,True ,True ,self.curpath)\n  self.curpath=[]\n  return\n  \n  \n def do_b(self):\n  self.do_h()\n  self.do_B()\n  return\n  \n  \n def do_b_a(self):\n  self.do_h()\n  self.do_B_a()\n  return\n  \n  \n def do_n(self):\n  self.curpath=[]\n  return\n  \n  \n def do_W(self):\n  return\n  \n  \n def do_W_a(self):\n  return\n  \n  \n def do_CS(self,name):\n  try :\n   self.scs=self.csmap[literal_name(name)]\n  except KeyError:\n   if STRICT:\n    raise PDFInterpreterError('Undefined ColorSpace: %r'%name)\n  return\n  \n  \n def do_cs(self,name):\n  try :\n   self.ncs=self.csmap[literal_name(name)]\n  except KeyError:\n   if STRICT:\n    raise PDFInterpreterError('Undefined ColorSpace: %r'%name)\n  return\n  \n  \n def do_G(self,gray):\n \n  return\n  \n  \n def do_g(self,gray):\n \n  return\n  \n  \n def do_RG(self,r,g,b):\n \n  return\n  \n  \n def do_rg(self,r,g,b):\n \n  return\n  \n  \n def do_K(self,c,m,y,k):\n \n  return\n  \n  \n def do_k(self,c,m,y,k):\n \n  return\n  \n  \n def do_SCN(self):\n  if self.scs:\n   n=self.scs.ncomponents\n  else :\n   if STRICT:\n    raise PDFInterpreterError('No colorspace specified!')\n   n=1\n  self.pop(n)\n  return\n  \n def do_scn(self):\n  if self.ncs:\n   n=self.ncs.ncomponents\n  else :\n   if STRICT:\n    raise PDFInterpreterError('No colorspace specified!')\n   n=1\n  self.pop(n)\n  return\n  \n def do_SC(self):\n  self.do_SCN()\n  return\n  \n def do_sc(self):\n  self.do_scn()\n  return\n  \n  \n def do_sh(self,name):\n  return\n  \n  \n def do_BT(self):\n  self.textstate.reset()\n  return\n  \n  \n def do_ET(self):\n  return\n  \n  \n def do_BX(self):\n  return\n  \n  \n def do_EX(self):\n  return\n  \n  \n def do_MP(self,tag):\n  self.device.do_tag(tag)\n  return\n  \n def do_DP(self,tag,props):\n  self.device.do_tag(tag,props)\n  return\n  \n def do_BMC(self,tag):\n  self.device.begin_tag(tag)\n  return\n  \n def do_BDC(self,tag,props):\n  self.device.begin_tag(tag,props)\n  return\n  \n def do_EMC(self):\n  self.device.end_tag()\n  return\n  \n  \n def do_Tc(self,space):\n  self.textstate.charspace=space\n  return\n  \n  \n def do_Tw(self,space):\n  self.textstate.wordspace=space\n  return\n  \n  \n def do_Tz(self,scale):\n  self.textstate.scaling=scale\n  return\n  \n  \n def do_TL(self,leading):\n  self.textstate.leading=-leading\n  return\n  \n  \n def do_Tf(self,fontid,fontsize):\n  try :\n   self.textstate.font=self.fontmap[literal_name(fontid)]\n  except KeyError:\n   if STRICT:\n    raise PDFInterpreterError('Undefined Font id: %r'%fontid)\n   self.textstate.font=self.rsrcmgr.get_font(None ,{})\n  self.textstate.fontsize=fontsize\n  return\n  \n  \n def do_Tr(self,render):\n  self.textstate.render=render\n  return\n  \n  \n def do_Ts(self,rise):\n  self.textstate.rise=rise\n  return\n  \n  \n def do_Td(self,tx,ty):\n  (a,b,c,d,e,f)=self.textstate.matrix\n  self.textstate.matrix=(a,b,c,d,tx *a+ty *c+e,tx *b+ty *d+f)\n  self.textstate.linematrix=(0,0)\n  \n  return\n  \n  \n def do_TD(self,tx,ty):\n  (a,b,c,d,e,f)=self.textstate.matrix\n  self.textstate.matrix=(a,b,c,d,tx *a+ty *c+e,tx *b+ty *d+f)\n  self.textstate.leading=ty\n  self.textstate.linematrix=(0,0)\n  \n  return\n  \n  \n def do_Tm(self,a,b,c,d,e,f):\n  self.textstate.matrix=(a,b,c,d,e,f)\n  self.textstate.linematrix=(0,0)\n  return\n  \n  \n def do_T_a(self):\n  (a,b,c,d,e,f)=self.textstate.matrix\n  self.textstate.matrix=(a,b,c,d,self.textstate.leading *c+e,self.textstate.leading *d+f)\n  self.textstate.linematrix=(0,0)\n  return\n  \n  \n def do_TJ(self,seq):\n \n  if self.textstate.font is None :\n   if STRICT:\n    raise PDFInterpreterError('No font specified!')\n   return\n  self.device.render_string(self.textstate,seq)\n  return\n  \n  \n def do_Tj(self,s):\n  self.do_TJ([s])\n  return\n  \n  \n def do__q(self,s):\n  self.do_T_a()\n  self.do_TJ([s])\n  return\n  \n  \n def do__w(self,aw,ac,s):\n  self.do_Tw(aw)\n  self.do_Tc(ac)\n  self.do_TJ([s])\n  return\n  \n  \n def do_BI(self):\n  return\n  \n def do_ID(self):\n  return\n  \n def do_EI(self,obj):\n  if 'W'in obj and 'H'in obj:\n   iobjid=str(id(obj))\n   self.device.begin_figure(iobjid,(0,0,1,1),MATRIX_IDENTITY)\n   self.device.render_image(iobjid,obj)\n   self.device.end_figure(iobjid)\n  return\n  \n  \n def do_Do(self,xobjid):\n  xobjid=literal_name(xobjid)\n  try :\n   xobj=stream_value(self.xobjmap[xobjid])\n  except KeyError:\n   if STRICT:\n    raise PDFInterpreterError('Undefined xobject id: %r'%xobjid)\n   return\n  if self.debug:logging.info('Processing xobj: %r'%xobj)\n  subtype=xobj.get('Subtype')\n  if subtype is LITERAL_FORM and 'BBox'in xobj:\n   interpreter=self.dup()\n   bbox=list_value(xobj['BBox'])\n   matrix=list_value(xobj.get('Matrix',MATRIX_IDENTITY))\n   \n   \n   \n   resources=dict_value(xobj.get('Resources'))or self.resources.copy()\n   self.device.begin_figure(xobjid,bbox,matrix)\n   interpreter.render_contents(resources,[xobj],ctm=mult_matrix(matrix,self.ctm))\n   self.device.end_figure(xobjid)\n  elif subtype is LITERAL_IMAGE and 'Width'in xobj and 'Height'in xobj:\n   self.device.begin_figure(xobjid,(0,0,1,1),MATRIX_IDENTITY)\n   self.device.render_image(xobjid,xobj)\n   self.device.end_figure(xobjid)\n  else :\n  \n   pass\n  return\n  \n def process_page(self,page):\n  if self.debug:logging.info('Processing page: %r'%page)\n  (x0,y0,x1,y1)=page.mediabox\n  if page.rotate ==90:\n   ctm=(0,-1,1,0,-y0,x1)\n  elif page.rotate ==180:\n   ctm=(-1,0,0,-1,x1,y1)\n  elif page.rotate ==270:\n   ctm=(0,1,-1,0,y1,-x0)\n  else :\n   ctm=(1,0,0,1,-x0,-y0)\n  self.device.begin_page(page,ctm)\n  self.render_contents(page.resources,page.contents,ctm=ctm)\n  self.device.end_page(page)\n  return\n  \n  \n  \n  \n def render_contents(self,resources,streams,ctm=MATRIX_IDENTITY):\n  if self.debug:\n   logging.info('render_contents: resources=%r, streams=%r, ctm=%r'%\n   (resources,streams,ctm))\n  self.init_resources(resources)\n  self.init_state(ctm)\n  self.execute(list_value(streams))\n  return\n  \n def execute(self,streams):\n  try :\n   parser=PDFContentParser(streams)\n  except PSEOF:\n  \n   return\n  while 1:\n   try :\n    (_,obj)=parser.nextobject()\n   except PSEOF:\n    break\n   if isinstance(obj,PSKeyword):\n    name=keyword_name(obj).decode('ascii')\n    method='do_%s'%name.replace('*','_a').replace('\"','_w').replace(\"'\",'_q')\n    if hasattr(self,method):\n     func=getattr(self,method)\n     nargs=func.__code__.co_argcount -1\n     if nargs:\n      args=self.pop(nargs)\n      if self.debug:\n       logging.debug('exec: %s %r'%(name,args))\n      if len(args)==nargs:\n       func(*args)\n     else :\n      if self.debug:\n       logging.debug('exec: %s'%name)\n      func()\n    else :\n     if STRICT:\n      raise PDFInterpreterError('Unknown operator: %r'%name)\n   else :\n    self.push(obj)\n  return\n", ["Lib.site-packages.pdfminer.cmapdb", "Lib.site-packages.pdfminer.pdfcolor", "Lib.site-packages.pdfminer.pdffont", "Lib.site-packages.pdfminer.pdftypes", "Lib.site-packages.pdfminer.psparser", "Lib.site-packages.pdfminer.utils", "io", "logging", "re"]], "Lib.site-packages.pdfminer.pdfpage": [".py", "#!/usr/bin/env python\nimport logging\nfrom .psparser import LIT\nfrom .pdftypes import PDFObjectNotFound\nfrom .pdftypes import resolve1\nfrom .pdftypes import int_value\nfrom .pdftypes import list_value\nfrom .pdftypes import dict_value\nfrom .pdfparser import PDFParser\nfrom .pdfdocument import PDFDocument\nfrom .pdfdocument import PDFTextExtractionNotAllowed\n\n\nLITERAL_PAGE=LIT('Page')\nLITERAL_PAGES=LIT('Pages')\n\n\n\n\nclass PDFPage:\n\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n debug=False\n \n def __init__(self,doc,pageid,attrs):\n  ''\n\n\n\n\n  \n  self.doc=doc\n  self.pageid=pageid\n  self.attrs=dict_value(attrs)\n  self.lastmod=resolve1(self.attrs.get('LastModified'))\n  self.resources=resolve1(self.attrs.get('Resources',dict()))\n  self.mediabox=resolve1(self.attrs['MediaBox'])\n  if 'CropBox'in self.attrs:\n   self.cropbox=resolve1(self.attrs['CropBox'])\n  else :\n   self.cropbox=self.mediabox\n  self.rotate=(int_value(self.attrs.get('Rotate',0))+360)%360\n  self.annots=self.attrs.get('Annots')\n  self.beads=self.attrs.get('B')\n  if 'Contents'in self.attrs:\n   contents=resolve1(self.attrs['Contents'])\n  else :\n   contents=[]\n  if not isinstance(contents,list):\n   contents=[contents]\n  self.contents=contents\n  return\n  \n def __repr__(self):\n  return '<PDFPage: Resources=%r, MediaBox=%r>'%(self.resources,self.mediabox)\n  \n INHERITABLE_ATTRS=set(['Resources','MediaBox','CropBox','Rotate'])\n \n @classmethod\n def create_pages(klass,document):\n  def search(obj,parent):\n   if isinstance(obj,int):\n    objid=obj\n    tree=dict_value(document.getobj(objid)).copy()\n   else :\n    objid=obj.objid\n    tree=dict_value(obj).copy()\n   for (k,v)in parent.items():\n    if k in klass.INHERITABLE_ATTRS and k not in tree:\n     tree[k]=v\n   if tree.get('Type')is LITERAL_PAGES and 'Kids'in tree:\n    if klass.debug:logging.info('Pages: Kids=%r'%tree['Kids'])\n    for c in list_value(tree['Kids']):\n     for x in search(c,tree):\n      yield x\n   elif tree.get('Type')is LITERAL_PAGE:\n    if klass.debug:logging.info('Page: %r'%tree)\n    yield (objid,tree)\n  pages=False\n  if 'Pages'in document.catalog:\n   for (objid,tree)in search(document.catalog['Pages'],document.catalog):\n    yield klass(document,objid,tree)\n    pages=True\n  if not pages:\n  \n   for xref in document.xrefs:\n    for objid in xref.get_objids():\n     try :\n      obj=document.getobj(objid)\n      if isinstance(obj,dict)and obj.get('Type')is LITERAL_PAGE:\n       yield klass(document,objid,obj)\n     except PDFObjectNotFound:\n      pass\n  return\n  \n @classmethod\n def get_pages(klass,fp,\n pagenos=None ,maxpages=0,password=b'',\n caching=True ,check_extractable=True ):\n \n  parser=PDFParser(fp)\n  \n  doc=PDFDocument(parser,password=password,caching=caching)\n  \n  if check_extractable and not doc.is_extractable:\n   raise PDFTextExtractionNotAllowed('Text extraction is not allowed: %r'%fp)\n   \n  for (pageno,page)in enumerate(klass.create_pages(doc)):\n   if pagenos and (pageno not in pagenos):\n    continue\n   yield page\n   if maxpages and maxpages <=pageno+1:\n    break\n  return\n", ["Lib.site-packages.pdfminer.pdfdocument", "Lib.site-packages.pdfminer.pdfparser", "Lib.site-packages.pdfminer.pdftypes", "Lib.site-packages.pdfminer.psparser", "logging"]], "Lib.site-packages.pdfminer.pdffont": [".py", "#!/usr/bin/env python\nimport sys\nimport struct\nfrom io import BytesIO\nfrom .cmapdb import CMapDB\nfrom .cmapdb import CMapParser\nfrom .cmapdb import FileUnicodeMap\nfrom .cmapdb import CMap\nfrom .encodingdb import EncodingDB\nfrom .encodingdb import name2unicode\nfrom .psparser import PSStackParser\nfrom .psparser import PSEOF\nfrom .psparser import LIT\nfrom .psparser import KWD\nfrom .psparser import STRICT\nfrom .psparser import PSLiteral\nfrom .psparser import literal_name\nfrom .pdftypes import PDFException\nfrom .pdftypes import resolve1\nfrom .pdftypes import int_value\nfrom .pdftypes import num_value\nfrom .pdftypes import bytes_value\nfrom .pdftypes import list_value\nfrom .pdftypes import dict_value\nfrom .pdftypes import stream_value\nfrom .fontmetrics import FONT_METRICS\nfrom .utils import apply_matrix_norm\nfrom .utils import nunpack\nfrom .utils import choplist\nfrom .utils import isnumber\n\n\ndef get_widths(seq):\n widths={}\n r=[]\n for v in seq:\n  if isinstance(v,list):\n   if r:\n    char1=r[-1]\n    for (i,w)in enumerate(v):\n     widths[char1+i]=w\n    r=[]\n  elif isnumber(v):\n   r.append(v)\n   if len(r)==3:\n    (char1,char2,w)=r\n    for i in range(char1,char2+1):\n     widths[i]=w\n    r=[]\n return widths\n \n \n \n \n \ndef get_widths2(seq):\n widths={}\n r=[]\n for v in seq:\n  if isinstance(v,list):\n   if r:\n    char1=r[-1]\n    for (i,(w,vx,vy))in enumerate(choplist(3,v)):\n     widths[char1+i]=(w,(vx,vy))\n    r=[]\n  elif isnumber(v):\n   r.append(v)\n   if len(r)==5:\n    (char1,char2,w,vx,vy)=r\n    for i in range(char1,char2+1):\n     widths[i]=(w,(vx,vy))\n    r=[]\n return widths\n \n \n \n \n \n \n \nclass FontMetricsDB:\n\n @classmethod\n def get_metrics(klass,fontname):\n  return FONT_METRICS[fontname]\n  \n  \n  \n  \nclass Type1FontHeaderParser(PSStackParser):\n\n KEYWORD_BEGIN=KWD(b'begin')\n KEYWORD_END=KWD(b'end')\n KEYWORD_DEF=KWD(b'def')\n KEYWORD_PUT=KWD(b'put')\n KEYWORD_DICT=KWD(b'dict')\n KEYWORD_ARRAY=KWD(b'array')\n KEYWORD_READONLY=KWD(b'readonly')\n KEYWORD_FOR=KWD(b'for')\n KEYWORD_FOR=KWD(b'for')\n \n def __init__(self,data):\n  PSStackParser.__init__(self,data)\n  self._cid2unicode={}\n  return\n  \n def get_encoding(self):\n  while 1:\n   try :\n    (cid,name)=self.nextobject()\n   except PSEOF:\n    break\n   try :\n    self._cid2unicode[cid]=name2unicode(name)\n   except KeyError:\n    pass\n  return self._cid2unicode\n  \n def do_keyword(self,pos,token):\n  if token is self.KEYWORD_PUT:\n   ((_,key),(_,value))=self.pop(2)\n   if (isinstance(key,int)and\n   isinstance(value,PSLiteral)):\n    self.add_results((key,literal_name(value)))\n  return\n  \n  \nNIBBLES=('0','1','2','3','4','5','6','7','8','9','.','e','e-',None ,'-')\n\n\n\n\n\n\ndef getdict(data):\n d={}\n fp=BytesIO(data)\n stack=[]\n while 1:\n  c=fp.read(1)\n  if not c:\n   break\n  b0=ord(c)\n  if b0 <=21:\n   d[b0]=stack\n   stack=[]\n   continue\n  if b0 ==30:\n   s=''\n   loop=True\n   while loop:\n    b=ord(fp.read(1))\n    for n in (b >>4,b&15):\n     if n ==15:\n      loop=False\n     else :\n      s +=NIBBLES[n]\n   value=float(s)\n  elif 32 <=b0 and b0 <=246:\n   value=b0 -139\n  else :\n   b1=ord(fp.read(1))\n   if 247 <=b0 and b0 <=250:\n    value=((b0 -247)<<8)+b1+108\n   elif 251 <=b0 and b0 <=254:\n    value=-((b0 -251)<<8)-b1 -108\n   else :\n    b2=ord(fp.read(1))\n    if 128 <=b1:\n     b1 -=256\n    if b0 ==28:\n     value=b1 <<8 |b2\n    else :\n     value=b1 <<24 |b2 <<16 |struct.unpack('>H',fp.read(2))[0]\n  stack.append(value)\n return d\n \n \nclass CFFFont:\n\n STANDARD_STRINGS=(\n '.notdef','space','exclam','quotedbl','numbersign',\n 'dollar','percent','ampersand','quoteright','parenleft',\n 'parenright','asterisk','plus','comma','hyphen','period',\n 'slash','zero','one','two','three','four','five','six',\n 'seven','eight','nine','colon','semicolon','less','equal',\n 'greater','question','at','A','B','C','D','E','F','G',\n 'H','I','J','K','L','M','N','O','P','Q','R','S','T',\n 'U','V','W','X','Y','Z','bracketleft','backslash',\n 'bracketright','asciicircum','underscore','quoteleft','a',\n 'b','c','d','e','f','g','h','i','j','k','l','m','n',\n 'o','p','q','r','s','t','u','v','w','x','y','z',\n 'braceleft','bar','braceright','asciitilde','exclamdown',\n 'cent','sterling','fraction','yen','florin','section',\n 'currency','quotesingle','quotedblleft','guillemotleft',\n 'guilsinglleft','guilsinglright','fi','fl','endash',\n 'dagger','daggerdbl','periodcentered','paragraph','bullet',\n 'quotesinglbase','quotedblbase','quotedblright',\n 'guillemotright','ellipsis','perthousand','questiondown',\n 'grave','acute','circumflex','tilde','macron','breve',\n 'dotaccent','dieresis','ring','cedilla','hungarumlaut',\n 'ogonek','caron','emdash','AE','ordfeminine','Lslash',\n 'Oslash','OE','ordmasculine','ae','dotlessi','lslash',\n 'oslash','oe','germandbls','onesuperior','logicalnot','mu',\n 'trademark','Eth','onehalf','plusminus','Thorn',\n 'onequarter','divide','brokenbar','degree','thorn',\n 'threequarters','twosuperior','registered','minus','eth',\n 'multiply','threesuperior','copyright','Aacute',\n 'Acircumflex','Adieresis','Agrave','Aring','Atilde',\n 'Ccedilla','Eacute','Ecircumflex','Edieresis','Egrave',\n 'Iacute','Icircumflex','Idieresis','Igrave','Ntilde',\n 'Oacute','Ocircumflex','Odieresis','Ograve','Otilde',\n 'Scaron','Uacute','Ucircumflex','Udieresis','Ugrave',\n 'Yacute','Ydieresis','Zcaron','aacute','acircumflex',\n 'adieresis','agrave','aring','atilde','ccedilla','eacute',\n 'ecircumflex','edieresis','egrave','iacute','icircumflex',\n 'idieresis','igrave','ntilde','oacute','ocircumflex',\n 'odieresis','ograve','otilde','scaron','uacute',\n 'ucircumflex','udieresis','ugrave','yacute','ydieresis',\n 'zcaron','exclamsmall','Hungarumlautsmall','dollaroldstyle',\n 'dollarsuperior','ampersandsmall','Acutesmall',\n 'parenleftsuperior','parenrightsuperior','twodotenleader',\n 'onedotenleader','zerooldstyle','oneoldstyle','twooldstyle',\n 'threeoldstyle','fouroldstyle','fiveoldstyle','sixoldstyle',\n 'sevenoldstyle','eightoldstyle','nineoldstyle',\n 'commasuperior','threequartersemdash','periodsuperior',\n 'questionsmall','asuperior','bsuperior','centsuperior',\n 'dsuperior','esuperior','isuperior','lsuperior','msuperior',\n 'nsuperior','osuperior','rsuperior','ssuperior','tsuperior',\n 'ff','ffi','ffl','parenleftinferior','parenrightinferior',\n 'Circumflexsmall','hyphensuperior','Gravesmall','Asmall',\n 'Bsmall','Csmall','Dsmall','Esmall','Fsmall','Gsmall',\n 'Hsmall','Ismall','Jsmall','Ksmall','Lsmall','Msmall',\n 'Nsmall','Osmall','Psmall','Qsmall','Rsmall','Ssmall',\n 'Tsmall','Usmall','Vsmall','Wsmall','Xsmall','Ysmall',\n 'Zsmall','colonmonetary','onefitted','rupiah','Tildesmall',\n 'exclamdownsmall','centoldstyle','Lslashsmall','Scaronsmall',\n 'Zcaronsmall','Dieresissmall','Brevesmall','Caronsmall',\n 'Dotaccentsmall','Macronsmall','figuredash','hypheninferior',\n 'Ogoneksmall','Ringsmall','Cedillasmall','questiondownsmall',\n 'oneeighth','threeeighths','fiveeighths','seveneighths',\n 'onethird','twothirds','zerosuperior','foursuperior',\n 'fivesuperior','sixsuperior','sevensuperior','eightsuperior',\n 'ninesuperior','zeroinferior','oneinferior','twoinferior',\n 'threeinferior','fourinferior','fiveinferior','sixinferior',\n 'seveninferior','eightinferior','nineinferior',\n 'centinferior','dollarinferior','periodinferior',\n 'commainferior','Agravesmall','Aacutesmall',\n 'Acircumflexsmall','Atildesmall','Adieresissmall',\n 'Aringsmall','AEsmall','Ccedillasmall','Egravesmall',\n 'Eacutesmall','Ecircumflexsmall','Edieresissmall',\n 'Igravesmall','Iacutesmall','Icircumflexsmall',\n 'Idieresissmall','Ethsmall','Ntildesmall','Ogravesmall',\n 'Oacutesmall','Ocircumflexsmall','Otildesmall',\n 'Odieresissmall','OEsmall','Oslashsmall','Ugravesmall',\n 'Uacutesmall','Ucircumflexsmall','Udieresissmall',\n 'Yacutesmall','Thornsmall','Ydieresissmall','001.000',\n '001.001','001.002','001.003','Black','Bold','Book',\n 'Light','Medium','Regular','Roman','Semibold',\n )\n \n class INDEX:\n \n  def __init__(self,fp):\n   self.fp=fp\n   self.offsets=[]\n   (count,offsize)=struct.unpack('>HB',self.fp.read(3))\n   for i in range(count+1):\n    self.offsets.append(nunpack(self.fp.read(offsize)))\n   self.base=self.fp.tell()-1\n   self.fp.seek(self.base+self.offsets[-1])\n   return\n   \n  def __repr__(self):\n   return '<INDEX: size=%d>'%len(self)\n   \n  def __len__(self):\n   return len(self.offsets)-1\n   \n  def __getitem__(self,i):\n   self.fp.seek(self.base+self.offsets[i])\n   return self.fp.read(self.offsets[i+1]-self.offsets[i])\n   \n  def __iter__(self):\n   return iter(self[i]for i in range(len(self)))\n   \n def __init__(self,name,fp):\n  self.name=name\n  self.fp=fp\n  \n  (_major,_minor,hdrsize,offsize)=struct.unpack('BBBB',self.fp.read(4))\n  self.fp.read(hdrsize -4)\n  \n  self.name_index=self.INDEX(self.fp)\n  \n  self.dict_index=self.INDEX(self.fp)\n  \n  self.string_index=self.INDEX(self.fp)\n  \n  self.subr_index=self.INDEX(self.fp)\n  \n  self.top_dict=getdict(self.dict_index[0])\n  (charset_pos,)=self.top_dict.get(15,[0])\n  (encoding_pos,)=self.top_dict.get(16,[0])\n  (charstring_pos,)=self.top_dict.get(17,[0])\n  \n  self.fp.seek(charstring_pos)\n  self.charstring=self.INDEX(self.fp)\n  self.nglyphs=len(self.charstring)\n  \n  self.code2gid={}\n  self.gid2code={}\n  self.fp.seek(encoding_pos)\n  format=self.fp.read(1)\n  if format ==b'\\x00':\n  \n   (n,)=struct.unpack('B',self.fp.read(1))\n   for (code,gid)in enumerate(struct.unpack('B'*n,self.fp.read(n))):\n    self.code2gid[code]=gid\n    self.gid2code[gid]=code\n  elif format ==b'\\x01':\n  \n   (n,)=struct.unpack('B',self.fp.read(1))\n   code=0\n   for i in range(n):\n    (first,nleft)=struct.unpack('BB',self.fp.read(2))\n    for gid in range(first,first+nleft+1):\n     self.code2gid[code]=gid\n     self.gid2code[gid]=code\n     code +=1\n  else :\n   raise ValueError('unsupported encoding format: %r'%format)\n   \n  self.name2gid={}\n  self.gid2name={}\n  self.fp.seek(charset_pos)\n  format=self.fp.read(1)\n  if format ==b'\\x00':\n  \n   n=self.nglyphs -1\n   for (gid,sid)in enumerate(struct.unpack('>'+'H'*n,self.fp.read(2 *n))):\n    gid +=1\n    name=self.getstr(sid)\n    self.name2gid[name]=gid\n    self.gid2name[gid]=name\n  elif format ==b'\\x01':\n  \n   (n,)=struct.unpack('B',self.fp.read(1))\n   sid=0\n   for i in range(n):\n    (first,nleft)=struct.unpack('BB',self.fp.read(2))\n    for gid in range(first,first+nleft+1):\n     name=self.getstr(sid)\n     self.name2gid[name]=gid\n     self.gid2name[gid]=name\n     sid +=1\n  elif format ==b'\\x02':\n  \n   assert 0\n  else :\n   raise ValueError('unsupported charset format: %r'%format)\n   \n   \n   \n  return\n  \n def getstr(self,sid):\n  if sid <len(self.STANDARD_STRINGS):\n   return self.STANDARD_STRINGS[sid]\n  return self.string_index[sid -len(self.STANDARD_STRINGS)]\n  \n  \n  \n  \nclass TrueTypeFont:\n\n class CMapNotFound(Exception):\n  pass\n  \n def __init__(self,name,fp):\n  self.name=name\n  self.fp=fp\n  self.tables={}\n  self.fonttype=fp.read(4)\n  (ntables,_1,_2,_3)=struct.unpack('>HHHH',fp.read(8))\n  for _ in range(ntables):\n   (name,tsum,offset,length)=struct.unpack('>4sLLL',fp.read(16))\n   self.tables[name]=(offset,length)\n  return\n  \n def create_unicode_map(self):\n  if 'cmap'not in self.tables:\n   raise TrueTypeFont.CMapNotFound\n  (base_offset,length)=self.tables['cmap']\n  fp=self.fp\n  fp.seek(base_offset)\n  (version,nsubtables)=struct.unpack('>HH',fp.read(4))\n  subtables=[]\n  for i in range(nsubtables):\n   subtables.append(struct.unpack('>HHL',fp.read(8)))\n  char2gid={}\n  \n  for (_1,_2,st_offset)in subtables:\n   fp.seek(base_offset+st_offset)\n   (fmttype,fmtlen,fmtlang)=struct.unpack('>HHH',fp.read(6))\n   if fmttype ==0:\n    char2gid.update(enumerate(struct.unpack('>256B',fp.read(256))))\n   elif fmttype ==2:\n    subheaderkeys=struct.unpack('>256H',fp.read(512))\n    firstbytes=[0]*8192\n    for (i,k)in enumerate(subheaderkeys):\n     firstbytes[k //8]=i\n    nhdrs=max(subheaderkeys)//8+1\n    hdrs=[]\n    for i in range(nhdrs):\n     (firstcode,entcount,delta,offset)=struct.unpack('>HHhH',fp.read(8))\n     hdrs.append((i,firstcode,entcount,delta,fp.tell()-2+offset))\n    for (i,firstcode,entcount,delta,pos)in hdrs:\n     if not entcount:\n      continue\n     first=firstcode+(firstbytes[i]<<8)\n     fp.seek(pos)\n     for c in range(entcount):\n      gid=struct.unpack('>H',fp.read(2))\n      if gid:\n       gid +=delta\n      char2gid[first+c]=gid\n   elif fmttype ==4:\n    (segcount,_1,_2,_3)=struct.unpack('>HHHH',fp.read(8))\n    segcount //=2\n    ecs=struct.unpack('>%dH'%segcount,fp.read(2 *segcount))\n    fp.read(2)\n    scs=struct.unpack('>%dH'%segcount,fp.read(2 *segcount))\n    idds=struct.unpack('>%dh'%segcount,fp.read(2 *segcount))\n    pos=fp.tell()\n    idrs=struct.unpack('>%dH'%segcount,fp.read(2 *segcount))\n    for (ec,sc,idd,idr)in zip(ecs,scs,idds,idrs):\n     if idr:\n      fp.seek(pos+idr)\n      for c in range(sc,ec+1):\n       char2gid[c]=(struct.unpack('>H',fp.read(2))[0]+idd)&0xffff\n     else :\n      for c in range(sc,ec+1):\n       char2gid[c]=(c+idd)&0xffff\n   else :\n    assert 0\n    \n  unicode_map=FileUnicodeMap()\n  for (char,gid)in char2gid.items():\n   unicode_map.add_cid2unichr(gid,char)\n  return unicode_map\n  \n  \n  \n  \nclass PDFFontError(PDFException):\n pass\n \n \nclass PDFUnicodeNotDefined(PDFFontError):\n pass\n \nLITERAL_STANDARD_ENCODING=LIT('StandardEncoding')\nLITERAL_TYPE1C=LIT('Type1C')\n\n\n\nclass PDFFont:\n\n def __init__(self,descriptor,widths,default_width=None ):\n  self.descriptor=descriptor\n  self.widths=widths\n  self.fontname=resolve1(descriptor.get('FontName','unknown'))\n  if isinstance(self.fontname,PSLiteral):\n   self.fontname=literal_name(self.fontname)\n  self.flags=int_value(descriptor.get('Flags',0))\n  self.ascent=num_value(descriptor.get('Ascent',0))\n  self.descent=num_value(descriptor.get('Descent',0))\n  self.italic_angle=num_value(descriptor.get('ItalicAngle',0))\n  self.default_width=default_width or num_value(descriptor.get('MissingWidth',0))\n  self.leading=num_value(descriptor.get('Leading',0))\n  self.bbox=list_value(descriptor.get('FontBBox',(0,0,0,0)))\n  self.hscale=self.vscale=.001\n  return\n  \n def __repr__(self):\n  return '<PDFFont>'\n  \n def is_vertical(self):\n  return False\n  \n def is_multibyte(self):\n  return False\n  \n def decode(self,data):\n  return list(data)\n  \n def get_ascent(self):\n  return self.ascent *self.vscale\n  \n def get_descent(self):\n  return self.descent *self.vscale\n  \n def get_width(self):\n  w=self.bbox[2]-self.bbox[0]\n  if w ==0:\n   w=-self.default_width\n  return w *self.hscale\n  \n def get_height(self):\n  h=self.bbox[3]-self.bbox[1]\n  if h ==0:\n   h=self.ascent -self.descent\n  return h *self.vscale\n  \n def char_width(self,cid):\n  try :\n   return self.widths[cid]*self.hscale\n  except KeyError:\n   try :\n    return self.widths[self.to_unichr(cid)]*self.hscale\n   except (KeyError,PDFUnicodeNotDefined):\n    return self.default_width *self.hscale\n    \n def char_disp(self,cid):\n  return 0\n  \n def string_width(self,s):\n  return sum(self.char_width(cid)for cid in self.decode(s))\n  \n  \n  \nclass PDFSimpleFont(PDFFont):\n\n def __init__(self,descriptor,widths,spec):\n \n \n \n  if 'Encoding'in spec:\n   encoding=resolve1(spec['Encoding'])\n  else :\n   encoding=LITERAL_STANDARD_ENCODING\n  if isinstance(encoding,dict):\n   name=literal_name(encoding.get('BaseEncoding',LITERAL_STANDARD_ENCODING))\n   diff=list_value(encoding.get('Differences',None ))\n   self.cid2unicode=EncodingDB.get_encoding(name,diff)\n  else :\n   self.cid2unicode=EncodingDB.get_encoding(literal_name(encoding))\n  self.unicode_map=None\n  if 'ToUnicode'in spec:\n   strm=stream_value(spec['ToUnicode'])\n   self.unicode_map=FileUnicodeMap()\n   CMapParser(self.unicode_map,BytesIO(strm.get_data())).run()\n  PDFFont.__init__(self,descriptor,widths)\n  return\n  \n def to_unichr(self,cid):\n  if self.unicode_map:\n   try :\n    return self.unicode_map.get_unichr(cid)\n   except KeyError:\n    pass\n  try :\n   return self.cid2unicode[cid]\n  except KeyError:\n   raise PDFUnicodeNotDefined(None ,cid)\n   \n   \n   \nclass PDFType1Font(PDFSimpleFont):\n\n def __init__(self,rsrcmgr,spec):\n  try :\n   self.basefont=literal_name(spec['BaseFont'])\n  except KeyError:\n   if STRICT:\n    raise PDFFontError('BaseFont is missing')\n   self.basefont='unknown'\n  try :\n   (descriptor,widths)=FontMetricsDB.get_metrics(self.basefont)\n  except KeyError:\n   descriptor=dict_value(spec.get('FontDescriptor',{}))\n   firstchar=int_value(spec.get('FirstChar',0))\n   \n   widths=list_value(spec.get('Widths',[0]*256))\n   widths=dict((i+firstchar,w)for (i,w)in enumerate(widths))\n  PDFSimpleFont.__init__(self,descriptor,widths,spec)\n  if 'Encoding'not in spec and 'FontFile'in descriptor:\n  \n   self.fontfile=stream_value(descriptor.get('FontFile'))\n   length1=int_value(self.fontfile['Length1'])\n   data=self.fontfile.get_data()[:length1]\n   parser=Type1FontHeaderParser(BytesIO(data))\n   self.cid2unicode=parser.get_encoding()\n  return\n  \n def __repr__(self):\n  return '<PDFType1Font: basefont=%r>'%self.basefont\n  \n  \n  \nclass PDFTrueTypeFont(PDFType1Font):\n\n def __repr__(self):\n  return '<PDFTrueTypeFont: basefont=%r>'%self.basefont\n  \n  \n  \nclass PDFType3Font(PDFSimpleFont):\n\n def __init__(self,rsrcmgr,spec):\n  firstchar=int_value(spec.get('FirstChar',0))\n  \n  widths=list_value(spec.get('Widths',[0]*256))\n  widths=dict((i+firstchar,w)for (i,w)in enumerate(widths))\n  if 'FontDescriptor'in spec:\n   descriptor=dict_value(spec['FontDescriptor'])\n  else :\n   descriptor={'Ascent':0,'Descent':0,\n   'FontBBox':spec['FontBBox']}\n  PDFSimpleFont.__init__(self,descriptor,widths,spec)\n  self.matrix=tuple(list_value(spec.get('FontMatrix')))\n  (_,self.descent,_,self.ascent)=self.bbox\n  (self.hscale,self.vscale)=apply_matrix_norm(self.matrix,(1,1))\n  return\n  \n def __repr__(self):\n  return '<PDFType3Font>'\n  \n  \n  \nclass PDFCIDFont(PDFFont):\n\n def __init__(self,rsrcmgr,spec):\n  try :\n   self.basefont=literal_name(spec['BaseFont'])\n  except KeyError:\n   if STRICT:\n    raise PDFFontError('BaseFont is missing')\n   self.basefont='unknown'\n  self.cidsysteminfo=dict_value(spec.get('CIDSystemInfo',{}))\n  registry=bytes_value(self.cidsysteminfo.get('Registry',b'unknown'))\n  ordering=bytes_value(self.cidsysteminfo.get('Ordering',b'unknown'))\n  self.cidcoding=(registry+b'-'+ordering).decode('ascii')\n  try :\n   name=literal_name(spec['Encoding'])\n  except KeyError:\n   if STRICT:\n    raise PDFFontError('Encoding is unspecified')\n   name='unknown'\n  try :\n   self.cmap=CMapDB.get_cmap(name)\n  except CMapDB.CMapNotFound as e:\n   if STRICT:\n    raise PDFFontError(e)\n   self.cmap=CMap()\n  try :\n   descriptor=dict_value(spec['FontDescriptor'])\n  except KeyError:\n   if STRICT:\n    raise PDFFontError('FontDescriptor is missing')\n   descriptor={}\n  ttf=None\n  if 'FontFile2'in descriptor:\n   self.fontfile=stream_value(descriptor.get('FontFile2'))\n   ttf=TrueTypeFont(self.basefont,\n   BytesIO(self.fontfile.get_data()))\n  self.unicode_map=None\n  if 'ToUnicode'in spec:\n   strm=stream_value(spec['ToUnicode'])\n   self.unicode_map=FileUnicodeMap()\n   CMapParser(self.unicode_map,BytesIO(strm.get_data())).run()\n  elif self.cidcoding in ('Adobe-Identity','Adobe-UCS'):\n   if ttf:\n    try :\n     self.unicode_map=ttf.create_unicode_map()\n    except TrueTypeFont.CMapNotFound:\n     pass\n  else :\n   try :\n    self.unicode_map=CMapDB.get_unicode_map(self.cidcoding,self.cmap.is_vertical())\n   except CMapDB.CMapNotFound as e:\n    pass\n    \n  self.vertical=self.cmap.is_vertical()\n  if self.vertical:\n  \n   widths=get_widths2(list_value(spec.get('W2',[])))\n   self.disps=dict((cid,(vx,vy))for (cid,(_,(vx,vy)))in widths.items())\n   (vy,w)=spec.get('DW2',[880,-1000])\n   self.default_disp=(None ,vy)\n   widths=dict((cid,w)for (cid,(w,_))in widths.items())\n   default_width=w\n  else :\n  \n   self.disps={}\n   self.default_disp=0\n   widths=get_widths(list_value(spec.get('W',[])))\n   default_width=spec.get('DW',1000)\n  PDFFont.__init__(self,descriptor,widths,default_width=default_width)\n  return\n  \n def __repr__(self):\n  return '<PDFCIDFont: basefont=%r, cidcoding=%r>'%(self.basefont,self.cidcoding)\n  \n def is_vertical(self):\n  return self.vertical\n  \n def is_multibyte(self):\n  return True\n  \n def decode(self,data):\n  return self.cmap.decode(data)\n  \n def char_disp(self,cid):\n  ''\n  return self.disps.get(cid,self.default_disp)\n  \n def to_unichr(self,cid):\n  try :\n   if not self.unicode_map:\n    raise KeyError(cid)\n   return self.unicode_map.get_unichr(cid)\n  except KeyError:\n   raise PDFUnicodeNotDefined(self.cidcoding,cid)\n   \n   \n   \ndef main(argv):\n for fname in argv[1:]:\n  with open(fname,'rb')as fp:\n  \n   font=CFFFont(fname,fp)\n   print(font)\n return\n \nif __name__ =='__main__':\n sys.exit(main(sys.argv))\n", ["Lib.site-packages.pdfminer.cmapdb", "Lib.site-packages.pdfminer.encodingdb", "Lib.site-packages.pdfminer.fontmetrics", "Lib.site-packages.pdfminer.pdftypes", "Lib.site-packages.pdfminer.psparser", "Lib.site-packages.pdfminer.utils", "io", "struct", "sys"]], "Lib.site-packages.pdfminer.psparser": [".py", "#!/usr/bin/env python\nimport re\nimport logging\nfrom .utils import choplist\n\nSTRICT=0\n\n\n\n\nclass PSException(Exception):\n pass\n \n \nclass PSEOF(PSException):\n pass\n \n \nclass PSSyntaxError(PSException):\n pass\n \n \nclass PSTypeError(PSException):\n pass\n \n \nclass PSValueError(PSException):\n pass\n \n \n \n \n \n \n \nclass PSObject:\n\n ''\n \n pass\n \n \n \n \nclass PSLiteral(PSObject):\n\n ''\n\n\n\n\n\n\n\n\n \n \n def __init__(self,name):\n  self.name=name\n  return\n  \n def __repr__(self):\n  return '/%r'%self.name\n  \n  \n  \n  \nclass PSKeyword(PSObject):\n\n ''\n\n\n\n\n\n\n\n \n \n def __init__(self,name):\n  self.name=name\n  return\n  \n def __repr__(self):\n  return self.name.decode('ascii')\n  \n  \n  \n  \nclass PSSymbolTable:\n\n ''\n\n\n \n \n def __init__(self,klass):\n  self.dict={}\n  self.klass=klass\n  return\n  \n def intern(self,name):\n  if name in self.dict:\n   lit=self.dict[name]\n  else :\n   lit=self.klass(name)\n   self.dict[name]=lit\n  return lit\n  \nPSLiteralTable=PSSymbolTable(PSLiteral)\nPSKeywordTable=PSSymbolTable(PSKeyword)\nLIT=PSLiteralTable.intern\nKWD=PSKeywordTable.intern\nKEYWORD_PROC_BEGIN=KWD(b'{')\nKEYWORD_PROC_END=KWD(b'}')\nKEYWORD_ARRAY_BEGIN=KWD(b'[')\nKEYWORD_ARRAY_END=KWD(b']')\nKEYWORD_DICT_BEGIN=KWD(b'<<')\nKEYWORD_DICT_END=KWD(b'>>')\n\n\ndef literal_name(x):\n if not isinstance(x,PSLiteral):\n  if STRICT:\n   raise PSTypeError('Literal required: %r'%(x,))\n  else :\n   return str(x)\n return x.name\n \n \ndef keyword_name(x):\n if not isinstance(x,PSKeyword):\n  if STRICT:\n   raise PSTypeError('Keyword required: %r'%(x,))\n  else :\n   return str(x)\n return x.name\n \n \n \n \nEOL=re.compile(br'[\\r\\n]')\nSPC=re.compile(br'\\s')\nNONSPC=re.compile(br'\\S')\nHEX=re.compile(br'[0-9a-fA-F]')\nEND_LITERAL=re.compile(br'[#/%\\[\\]()<>{}\\s]')\nEND_HEX_STRING=re.compile(br'[^\\s0-9a-fA-F]')\nHEX_PAIR=re.compile(br'[0-9a-fA-F]{2}|.')\nEND_NUMBER=re.compile(br'[^0-9]')\nEND_KEYWORD=re.compile(br'[#/%\\[\\]()<>{}\\s]')\nEND_STRING=re.compile(br'[()\\134]')\nOCT_STRING=re.compile(br'[0-7]')\nESC_STRING={\nb'b':b'\\x08',b't':b'\\x09',b'n':b'\\x0a',b'f':b'\\x0c',\nb'r':b'\\x0d',b'(':b'(',b')':b')',b'\\\\':b'\\\\'\n}\n\n\nclass PSBaseParser:\n\n ''\n \n BUFSIZ=4096\n \n debug=0\n \n def __init__(self,fp):\n  self.fp=fp\n  self.seek(0)\n  return\n  \n def __repr__(self):\n  return '<%s: %r, bufpos=%d>'%(self.__class__.__name__,self.fp,self.bufpos)\n  \n def flush(self):\n  return\n  \n def close(self):\n  self.flush()\n  return\n  \n def tell(self):\n  return self.bufpos+self.charpos\n  \n def poll(self,pos=None ,n=80):\n  pos0=self.fp.tell()\n  if not pos:\n   pos=self.bufpos+self.charpos\n  self.fp.seek(pos)\n  logging.info('poll(%d): %r'%(pos,self.fp.read(n)))\n  self.fp.seek(pos0)\n  return\n  \n def seek(self,pos):\n  ''\n  \n  if self.debug:\n   logging.debug('seek: %r'%pos)\n  self.fp.seek(pos)\n  \n  self.bufpos=pos\n  self.buf=b''\n  self.charpos=0\n  \n  self._parse1=self._parse_main\n  self._curtoken=b''\n  self._curtokenpos=0\n  self._tokens=[]\n  return\n  \n def fillbuf(self):\n  if self.charpos <len(self.buf):\n   return\n   \n  self.bufpos=self.fp.tell()\n  self.buf=self.fp.read(self.BUFSIZ)\n  if not self.buf:\n   raise PSEOF('Unexpected EOF')\n  self.charpos=0\n  return\n  \n def nextline(self):\n  ''\n  \n  linebuf=b''\n  linepos=self.bufpos+self.charpos\n  eol=False\n  while 1:\n   self.fillbuf()\n   if eol:\n    c=self.buf[self.charpos:self.charpos+1]\n    \n    if c ==b'\\n':\n     linebuf +=c\n     self.charpos +=1\n    break\n   m=EOL.search(self.buf,self.charpos)\n   if m:\n    linebuf +=self.buf[self.charpos:m.end(0)]\n    self.charpos=m.end(0)\n    if linebuf[-1:]==b'\\r':\n     eol=True\n    else :\n     break\n   else :\n    linebuf +=self.buf[self.charpos:]\n    self.charpos=len(self.buf)\n  if self.debug:\n   logging.debug('nextline: %r, %r'%(linepos,linebuf))\n  return (linepos,linebuf)\n  \n def revreadlines(self):\n  ''\n\n\n  \n  self.fp.seek(0,2)\n  pos=self.fp.tell()\n  buf=b''\n  while 0 <pos:\n   prevpos=pos\n   pos=max(0,pos -self.BUFSIZ)\n   self.fp.seek(pos)\n   s=self.fp.read(prevpos -pos)\n   if not s:\n    break\n   while 1:\n    n=max(s.rfind(b'\\r'),s.rfind(b'\\n'))\n    if n ==-1:\n     buf=s+buf\n     break\n    yield s[n:]+buf\n    s=s[:n]\n    buf=b''\n  return\n  \n def _parse_main(self,s,i):\n  m=NONSPC.search(s,i)\n  if not m:\n   return len(s)\n  j=m.start(0)\n  c=s[j:j+1]\n  self._curtokenpos=self.bufpos+j\n  if c ==b'%':\n   self._curtoken=b'%'\n   self._parse1=self._parse_comment\n   return j+1\n  elif c ==b'/':\n   self._curtoken=b''\n   self._parse1=self._parse_literal\n   return j+1\n  elif c in b'-+'or c.isdigit():\n   self._curtoken=c\n   self._parse1=self._parse_number\n   return j+1\n  elif c ==b'.':\n   self._curtoken=c\n   self._parse1=self._parse_float\n   return j+1\n  elif c.isalpha():\n   self._curtoken=c\n   self._parse1=self._parse_keyword\n   return j+1\n  elif c ==b'(':\n   self._curtoken=b''\n   self.paren=1\n   self._parse1=self._parse_string\n   return j+1\n  elif c ==b'<':\n   self._curtoken=b''\n   self._parse1=self._parse_wopen\n   return j+1\n  elif c ==b'>':\n   self._curtoken=b''\n   self._parse1=self._parse_wclose\n   return j+1\n  else :\n   self._add_token(KWD(c))\n   return j+1\n   \n def _add_token(self,obj):\n  self._tokens.append((self._curtokenpos,obj))\n  return\n  \n def _parse_comment(self,s,i):\n  m=EOL.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return (self._parse_comment,len(s))\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  self._parse1=self._parse_main\n  \n  \n  return j\n  \n def _parse_literal(self,s,i):\n  m=END_LITERAL.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return len(s)\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  c=s[j:j+1]\n  if c ==b'#':\n   self.hex=b''\n   self._parse1=self._parse_literal_hex\n   return j+1\n   \n  try :\n  \n   utoken=self._curtoken.decode('utf-8')\n  except UnicodeDecodeError:\n  \n   if STRICT:raise\n   utoken=\"\"\n  self._add_token(LIT(utoken))\n  self._parse1=self._parse_main\n  return j\n  \n def _parse_literal_hex(self,s,i):\n  c=s[i:i+1]\n  if HEX.match(c)and len(self.hex)<2:\n   self.hex +=c\n   return i+1\n  if self.hex:\n   try :\n    self._curtoken +=bytes([int(self.hex,16)])\n   except ValueError:\n    pass\n  self._parse1=self._parse_literal\n  return i\n  \n def _parse_number(self,s,i):\n  m=END_NUMBER.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return len(s)\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  c=s[j:j+1]\n  if c ==b'.':\n   self._curtoken +=c\n   self._parse1=self._parse_float\n   return j+1\n  try :\n   self._add_token(int(self._curtoken))\n  except ValueError:\n   pass\n  self._parse1=self._parse_main\n  return j\n  \n def _parse_float(self,s,i):\n  m=END_NUMBER.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return len(s)\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  try :\n   self._add_token(float(self._curtoken))\n  except ValueError:\n   pass\n  self._parse1=self._parse_main\n  return j\n  \n def _parse_keyword(self,s,i):\n  m=END_KEYWORD.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return len(s)\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  if self._curtoken ==b'true':\n   token=True\n  elif self._curtoken ==b'false':\n   token=False\n  else :\n   token=KWD(self._curtoken)\n  self._add_token(token)\n  self._parse1=self._parse_main\n  return j\n  \n def _parse_string(self,s,i):\n  m=END_STRING.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return len(s)\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  c=s[j:j+1]\n  if c ==b'\\\\':\n   self.oct=b''\n   self._parse1=self._parse_string_1\n   return j+1\n  if c ==b'(':\n   self.paren +=1\n   self._curtoken +=c\n   return j+1\n  if c ==b')':\n   self.paren -=1\n   if self.paren:\n    self._curtoken +=c\n    return j+1\n  self._add_token(self._curtoken)\n  self._parse1=self._parse_main\n  return j+1\n  \n def _parse_string_1(self,s,i):\n  c=s[i:i+1]\n  if OCT_STRING.match(c)and len(self.oct)<3:\n   self.oct +=c\n   return i+1\n  if self.oct:\n   try :\n    self._curtoken +=bytes([int(self.oct,8)])\n   except ValueError:\n    pass\n   self._parse1=self._parse_string\n   return i\n  if c in ESC_STRING:\n   self._curtoken +=ESC_STRING[c]\n  self._parse1=self._parse_string\n  return i+1\n  \n def _parse_wopen(self,s,i):\n  c=s[i:i+1]\n  if c ==b'<':\n   self._add_token(KEYWORD_DICT_BEGIN)\n   self._parse1=self._parse_main\n   i +=1\n  else :\n   self._parse1=self._parse_hexstring\n  return i\n  \n def _parse_wclose(self,s,i):\n  c=s[i:i+1]\n  if c ==b'>':\n   self._add_token(KEYWORD_DICT_END)\n   i +=1\n  self._parse1=self._parse_main\n  return i\n  \n def _parse_hexstring(self,s,i):\n  m=END_HEX_STRING.search(s,i)\n  if not m:\n   self._curtoken +=s[i:]\n   return len(s)\n  j=m.start(0)\n  self._curtoken +=s[i:j]\n  try :\n   token=HEX_PAIR.sub(lambda m:bytes([int(m.group(0),16)]),\n   SPC.sub(b'',self._curtoken))\n   self._add_token(token)\n  except ValueError:\n   pass\n  self._parse1=self._parse_main\n  return j\n  \n def nexttoken(self):\n  while not self._tokens:\n   self.fillbuf()\n   self.charpos=self._parse1(self.buf,self.charpos)\n  token=self._tokens.pop(0)\n  if self.debug:\n   logging.debug('nexttoken: %r'%(token,))\n  return token\n  \n  \n  \n  \nclass PSStackParser(PSBaseParser):\n\n def __init__(self,fp):\n  PSBaseParser.__init__(self,fp)\n  self.reset()\n  return\n  \n def reset(self):\n  self.context=[]\n  self.curtype=None\n  self.curstack=[]\n  self.results=[]\n  return\n  \n def seek(self,pos):\n  PSBaseParser.seek(self,pos)\n  self.reset()\n  return\n  \n def push(self,*objs):\n  self.curstack.extend(objs)\n  return\n  \n def pop(self,n):\n  objs=self.curstack[-n:]\n  self.curstack[-n:]=[]\n  return objs\n  \n def popall(self):\n  objs=self.curstack\n  self.curstack=[]\n  return objs\n  \n def add_results(self,*objs):\n  if self.debug:\n   logging.debug('add_results: %r'%(objs,))\n  self.results.extend(objs)\n  return\n  \n def start_type(self,pos,type):\n  self.context.append((pos,self.curtype,self.curstack))\n  (self.curtype,self.curstack)=(type,[])\n  if self.debug:\n   logging.debug('start_type: pos=%r, type=%r'%(pos,type))\n  return\n  \n def end_type(self,type):\n  if self.curtype !=type:\n   raise PSTypeError('Type mismatch: %r != %r'%(self.curtype,type))\n  objs=[obj for (_,obj)in self.curstack]\n  (pos,self.curtype,self.curstack)=self.context.pop()\n  if self.debug:\n   logging.debug('end_type: pos=%r, type=%r, objs=%r'%(pos,type,objs))\n  return (pos,objs)\n  \n def do_keyword(self,pos,token):\n  return\n  \n def nextobject(self):\n  ''\n\n\n\n  \n  while not self.results:\n   (pos,token)=self.nexttoken()\n   \n   if isinstance(token,(int,float,bool,bytes,PSLiteral)):\n   \n    self.push((pos,token))\n   elif token ==KEYWORD_ARRAY_BEGIN:\n   \n    self.start_type(pos,'a')\n   elif token ==KEYWORD_ARRAY_END:\n   \n    try :\n     self.push(self.end_type('a'))\n    except PSTypeError:\n     if STRICT:\n      raise\n   elif token ==KEYWORD_DICT_BEGIN:\n   \n    self.start_type(pos,'d')\n   elif token ==KEYWORD_DICT_END:\n   \n    try :\n     (pos,objs)=self.end_type('d')\n     if len(objs)%2 !=0:\n      raise PSSyntaxError('Invalid dictionary construct: %r'%(objs,))\n      \n     d=dict((literal_name(k),v)for (k,v)in choplist(2,objs)if v is not None )\n     self.push((pos,d))\n    except PSTypeError:\n     if STRICT:\n      raise\n   elif token ==KEYWORD_PROC_BEGIN:\n   \n    self.start_type(pos,'p')\n   elif token ==KEYWORD_PROC_END:\n   \n    try :\n     self.push(self.end_type('p'))\n    except PSTypeError:\n     if STRICT:\n      raise\n   else :\n    if self.debug:\n     logging.debug('do_keyword: pos=%r, token=%r, stack=%r'%\\\n     (pos,token,self.curstack))\n    self.do_keyword(pos,token)\n   if self.context:\n    continue\n   else :\n    self.flush()\n  obj=self.results.pop(0)\n  if self.debug:\n   logging.debug('nextobject: %r'%(obj,))\n  return obj\n  \n  \nimport unittest\n\n\n\n\nclass TestPSBaseParser(unittest.TestCase):\n\n TESTDATA=br'''%!PS\nbegin end\n \"  @ #\n/a/BCD /Some_Name /foo#5f#xbaa\n0 +1 -2 .5 1.234\n(abc) () (abc ( def ) ghi)\n(def\\040\\0\\0404ghi) (bach\\\\slask) (foo\\nbaa)\n(this % is not a comment.)\n(foo\nbaa)\n(foo\\\nbaa)\n<> <20> < 40 4020 >\n<abcd00\n12345>\nfunc/a/b{(c)do*}def\n[ 1 (z) ! ]\n<< /foo (bar) >>\n'''\n \n TOKENS=[\n (5,KWD(b'begin')),(11,KWD(b'end')),(16,KWD(b'\"')),(19,KWD(b'@')),\n (21,KWD(b'#')),(23,LIT('a')),(25,LIT('BCD')),(30,LIT('Some_Name')),\n (41,LIT('foo_xbaa')),(54,0),(56,1),(59,-2),(62,0.5),\n (65,1.234),(71,b'abc'),(77,b''),(80,b'abc ( def ) ghi'),\n (98,b'def \\x00 4ghi'),(118,b'bach\\\\slask'),(132,b'foo\\nbaa'),\n (143,b'this % is not a comment.'),(170,b'foo\\nbaa'),(180,b'foobaa'),\n (191,b''),(194,b' '),(199,b'@@ '),(211,b'\\xab\\xcd\\x00\\x124\\x05'),\n (226,KWD(b'func')),(230,LIT('a')),(232,LIT('b')),\n (234,KWD(b'{')),(235,b'c'),(238,KWD(b'do*')),(241,KWD(b'}')),\n (242,KWD(b'def')),(246,KWD(b'[')),(248,1),(250,b'z'),(254,KWD(b'!')),\n (256,KWD(b']')),(258,KWD(b'<<')),(261,LIT('foo')),(266,b'bar'),\n (272,KWD(b'>>'))\n ]\n \n OBJS=[\n (23,LIT('a')),(25,LIT('BCD')),(30,LIT('Some_Name')),\n (41,LIT('foo_xbaa')),(54,0),(56,1),(59,-2),(62,0.5),\n (65,1.234),(71,b'abc'),(77,b''),(80,b'abc ( def ) ghi'),\n (98,b'def \\x00 4ghi'),(118,b'bach\\\\slask'),(132,b'foo\\nbaa'),\n (143,b'this % is not a comment.'),(170,b'foo\\nbaa'),(180,b'foobaa'),\n (191,b''),(194,b' '),(199,b'@@ '),(211,b'\\xab\\xcd\\x00\\x124\\x05'),\n (230,LIT('a')),(232,LIT('b')),(234,[b'c']),(246,[1,b'z']),\n (258,{'foo':b'bar'}),\n ]\n \n def get_tokens(self,s):\n  from io import BytesIO\n  \n  class MyParser(PSBaseParser):\n   def flush(self):\n    self.add_results(*self.popall())\n  parser=MyParser(BytesIO(s))\n  r=[]\n  try :\n   while 1:\n    r.append(parser.nexttoken())\n  except PSEOF:\n   pass\n  return r\n  \n def get_objects(self,s):\n  from io import BytesIO\n  \n  class MyParser(PSStackParser):\n   def flush(self):\n    self.add_results(*self.popall())\n  parser=MyParser(BytesIO(s))\n  r=[]\n  try :\n   while 1:\n    r.append(parser.nextobject())\n  except PSEOF:\n   pass\n  return r\n  \n def test_1(self):\n  tokens=self.get_tokens(self.TESTDATA)\n  print(tokens)\n  self.assertEqual(tokens,self.TOKENS)\n  return\n  \n def test_2(self):\n  objs=self.get_objects(self.TESTDATA)\n  print(objs)\n  self.assertEqual(objs,self.OBJS)\n  return\n  \nif __name__ =='__main__':\n unittest.main()\n", ["Lib.site-packages.pdfminer.utils", "io", "logging", "re", "unittest"]], "Lib.site-packages.pdfminer.layout": [".py", "#!/usr/bin/env python\nfrom .utils import INF\nfrom .utils import Plane\nfrom .utils import get_bound\nfrom .utils import uniq\nfrom .utils import csort\nfrom .utils import fsplit\nfrom .utils import bbox2str\nfrom .utils import matrix2str\nfrom .utils import apply_matrix_pt\n\n\n\n\nclass IndexAssigner:\n\n def __init__(self,index=0):\n  self.index=index\n  return\n  \n def run(self,obj):\n  if isinstance(obj,LTTextBox):\n   obj.index=self.index\n   self.index +=1\n  elif isinstance(obj,LTTextGroup):\n   for x in obj:\n    self.run(x)\n  return\n  \n  \n  \n  \nclass LAParams:\n\n def __init__(self,\n line_overlap=0.5,\n char_margin=2.0,\n line_margin=0.5,\n word_margin=0.1,\n boxes_flow=0.5,\n detect_vertical=False ,\n all_texts=False ):\n  self.line_overlap=line_overlap\n  self.char_margin=char_margin\n  self.line_margin=line_margin\n  self.word_margin=word_margin\n  self.boxes_flow=boxes_flow\n  self.detect_vertical=detect_vertical\n  self.all_texts=all_texts\n  return\n  \n def __repr__(self):\n  return ('<LAParams: char_margin=%.1f, line_margin=%.1f, word_margin=%.1f all_texts=%r>'%\n  (self.char_margin,self.line_margin,self.word_margin,self.all_texts))\n  \n  \n  \n  \nclass LTItem:\n\n def analyze(self,laparams):\n  ''\n  return\n  \n  \n  \n  \nclass LTText:\n\n def __repr__(self):\n  return ('<%s %r>'%\n  (self.__class__.__name__,self.get_text()))\n  \n def get_text(self):\n  raise NotImplementedError\n  \n  \n  \n  \nclass LTComponent(LTItem):\n\n def __init__(self,bbox):\n  LTItem.__init__(self)\n  self.set_bbox(bbox)\n  return\n  \n def __repr__(self):\n  return ('<%s %s>'%\n  (self.__class__.__name__,bbox2str(self.bbox)))\n  \n  \n def __lt__(self,_):\n  raise ValueError\n def __le__(self,_):\n  raise ValueError\n def __gt__(self,_):\n  raise ValueError\n def __ge__(self,_):\n  raise ValueError\n  \n def set_bbox(self,bbox):\n  (x0,y0,x1,y1)=bbox\n  self.x0=x0\n  self.y0=y0\n  self.x1=x1\n  self.y1=y1\n  self.width=x1 -x0\n  self.height=y1 -y0\n  self.bbox=bbox\n  return\n  \n def is_empty(self):\n  return self.width <=0 or self.height <=0\n  \n def is_hoverlap(self,obj):\n  assert isinstance(obj,LTComponent)\n  return obj.x0 <=self.x1 and self.x0 <=obj.x1\n  \n def hdistance(self,obj):\n  assert isinstance(obj,LTComponent)\n  if self.is_hoverlap(obj):\n   return 0\n  else :\n   return min(abs(self.x0 -obj.x1),abs(self.x1 -obj.x0))\n   \n def hoverlap(self,obj):\n  assert isinstance(obj,LTComponent)\n  if self.is_hoverlap(obj):\n   return min(abs(self.x0 -obj.x1),abs(self.x1 -obj.x0))\n  else :\n   return 0\n   \n def is_voverlap(self,obj):\n  assert isinstance(obj,LTComponent)\n  return obj.y0 <=self.y1 and self.y0 <=obj.y1\n  \n def vdistance(self,obj):\n  assert isinstance(obj,LTComponent)\n  if self.is_voverlap(obj):\n   return 0\n  else :\n   return min(abs(self.y0 -obj.y1),abs(self.y1 -obj.y0))\n   \n def voverlap(self,obj):\n  assert isinstance(obj,LTComponent)\n  if self.is_voverlap(obj):\n   return min(abs(self.y0 -obj.y1),abs(self.y1 -obj.y0))\n  else :\n   return 0\n   \n   \n   \n   \nclass LTCurve(LTComponent):\n\n def __init__(self,linewidth,pts):\n  LTComponent.__init__(self,get_bound(pts))\n  self.pts=pts\n  self.linewidth=linewidth\n  return\n  \n def get_pts(self):\n  return ','.join('%.3f,%.3f'%p for p in self.pts)\n  \n  \n  \n  \nclass LTLine(LTCurve):\n\n def __init__(self,linewidth,p0,p1):\n  LTCurve.__init__(self,linewidth,[p0,p1])\n  return\n  \n  \n  \n  \nclass LTRect(LTCurve):\n\n def __init__(self,linewidth,bbox):\n  (x0,y0,x1,y1)=bbox\n  LTCurve.__init__(self,linewidth,[(x0,y0),(x1,y0),(x1,y1),(x0,y1)])\n  return\n  \n  \n  \n  \nclass LTImage(LTComponent):\n\n def __init__(self,name,stream,bbox):\n  LTComponent.__init__(self,bbox)\n  self.name=name\n  self.stream=stream\n  self.srcsize=(stream.get_any(('W','Width')),\n  stream.get_any(('H','Height')))\n  self.imagemask=stream.get_any(('IM','ImageMask'))\n  self.bits=stream.get_any(('BPC','BitsPerComponent'),1)\n  self.colorspace=stream.get_any(('CS','ColorSpace'))\n  if not isinstance(self.colorspace,list):\n   self.colorspace=[self.colorspace]\n  return\n  \n def __repr__(self):\n  return ('<%s(%s) %s %r>'%\n  (self.__class__.__name__,self.name,\n  bbox2str(self.bbox),self.srcsize))\n  \n  \n  \n  \nclass LTAnno(LTItem,LTText):\n\n def __init__(self,text):\n  self._text=text\n  return\n  \n def get_text(self):\n  return self._text\n  \n  \n  \n  \nclass LTChar(LTComponent,LTText):\n\n def __init__(self,matrix,font,fontsize,scaling,rise,\n text,textwidth,textdisp):\n  LTText.__init__(self)\n  self._text=text\n  self.matrix=matrix\n  self.fontname=font.fontname\n  self.adv=textwidth *fontsize *scaling\n  \n  if font.is_vertical():\n  \n   width=font.get_width()*fontsize\n   (vx,vy)=textdisp\n   if vx is None :\n    vx=width *0.5\n   else :\n    vx=vx *fontsize *.001\n   vy=(1000 -vy)*fontsize *.001\n   tx=-vx\n   ty=vy+rise\n   bll=(tx,ty+self.adv)\n   bur=(tx+width,ty)\n  else :\n  \n   height=font.get_height()*fontsize\n   descent=font.get_descent()*fontsize\n   ty=descent+rise\n   bll=(0,ty)\n   bur=(self.adv,ty+height)\n  (a,b,c,d,e,f)=self.matrix\n  self.upright=(0 <a *d *scaling and b *c <=0)\n  (x0,y0)=apply_matrix_pt(self.matrix,bll)\n  (x1,y1)=apply_matrix_pt(self.matrix,bur)\n  if x1 <x0:\n   (x0,x1)=(x1,x0)\n  if y1 <y0:\n   (y0,y1)=(y1,y0)\n  LTComponent.__init__(self,(x0,y0,x1,y1))\n  if font.is_vertical():\n   self.size=self.width\n  else :\n   self.size=self.height\n  return\n  \n def __repr__(self):\n  return ('<%s %s matrix=%s font=%r adv=%s text=%r>'%\n  (self.__class__.__name__,bbox2str(self.bbox),\n  matrix2str(self.matrix),self.fontname,self.adv,\n  self.get_text()))\n  \n def get_text(self):\n  return self._text\n  \n def is_compatible(self,obj):\n  ''\n  return True\n  \n  \n  \n  \nclass LTContainer(LTComponent):\n\n def __init__(self,bbox):\n  LTComponent.__init__(self,bbox)\n  self._objs=[]\n  return\n  \n def __iter__(self):\n  return iter(self._objs)\n  \n def __len__(self):\n  return len(self._objs)\n  \n def add(self,obj):\n  self._objs.append(obj)\n  return\n  \n def extend(self,objs):\n  for obj in objs:\n   self.add(obj)\n  return\n  \n def analyze(self,laparams):\n  for obj in self._objs:\n   obj.analyze(laparams)\n  return\n  \n  \n  \n  \nclass LTExpandableContainer(LTContainer):\n\n def __init__(self):\n  LTContainer.__init__(self,(+INF,+INF,-INF,-INF))\n  return\n  \n def add(self,obj):\n  LTContainer.add(self,obj)\n  self.set_bbox((min(self.x0,obj.x0),min(self.y0,obj.y0),\n  max(self.x1,obj.x1),max(self.y1,obj.y1)))\n  return\n  \n  \n  \n  \nclass LTTextContainer(LTExpandableContainer,LTText):\n\n def __init__(self):\n  LTText.__init__(self)\n  LTExpandableContainer.__init__(self)\n  return\n  \n def get_text(self):\n  return ''.join(obj.get_text()for obj in self if isinstance(obj,LTText))\n  \n  \n  \n  \nclass LTTextLine(LTTextContainer):\n\n def __init__(self,word_margin):\n  LTTextContainer.__init__(self)\n  self.word_margin=word_margin\n  return\n  \n def __repr__(self):\n  return ('<%s %s %r>'%\n  (self.__class__.__name__,bbox2str(self.bbox),\n  self.get_text()))\n  \n def analyze(self,laparams):\n  LTTextContainer.analyze(self,laparams)\n  LTContainer.add(self,LTAnno('\\n'))\n  return\n  \n def find_neighbors(self,plane,ratio):\n  raise NotImplementedError\n  \n  \nclass LTTextLineHorizontal(LTTextLine):\n\n def __init__(self,word_margin):\n  LTTextLine.__init__(self,word_margin)\n  self._x1=+INF\n  return\n  \n def add(self,obj):\n  if isinstance(obj,LTChar)and self.word_margin:\n   margin=self.word_margin *max(obj.width,obj.height)\n   if self._x1 <obj.x0 -margin:\n    LTContainer.add(self,LTAnno(' '))\n  self._x1=obj.x1\n  LTTextLine.add(self,obj)\n  return\n  \n def find_neighbors(self,plane,ratio):\n  d=ratio *self.height\n  objs=plane.find((self.x0,self.y0 -d,self.x1,self.y1+d))\n  return [obj for obj in objs\n  if (isinstance(obj,LTTextLineHorizontal)and\n  abs(obj.height -self.height)<d and\n  (abs(obj.x0 -self.x0)<d or\n  abs(obj.x1 -self.x1)<d))]\n  \n  \nclass LTTextLineVertical(LTTextLine):\n\n def __init__(self,word_margin):\n  LTTextLine.__init__(self,word_margin)\n  self._y0=-INF\n  return\n  \n def add(self,obj):\n  if isinstance(obj,LTChar)and self.word_margin:\n   margin=self.word_margin *max(obj.width,obj.height)\n   if obj.y1+margin <self._y0:\n    LTContainer.add(self,LTAnno(' '))\n  self._y0=obj.y0\n  LTTextLine.add(self,obj)\n  return\n  \n def find_neighbors(self,plane,ratio):\n  d=ratio *self.width\n  objs=plane.find((self.x0 -d,self.y0,self.x1+d,self.y1))\n  return [obj for obj in objs\n  if (isinstance(obj,LTTextLineVertical)and\n  abs(obj.width -self.width)<d and\n  (abs(obj.y0 -self.y0)<d or\n  abs(obj.y1 -self.y1)<d))]\n  \n  \n  \n  \n  \n  \n  \nclass LTTextBox(LTTextContainer):\n\n def __init__(self):\n  LTTextContainer.__init__(self)\n  self.index=-1\n  return\n  \n def __repr__(self):\n  return ('<%s(%s) %s %r>'%\n  (self.__class__.__name__,\n  self.index,bbox2str(self.bbox),self.get_text()))\n  \n  \nclass LTTextBoxHorizontal(LTTextBox):\n\n def analyze(self,laparams):\n  LTTextBox.analyze(self,laparams)\n  self._objs=csort(self._objs,key=lambda obj:-obj.y1)\n  return\n  \n def get_writing_mode(self):\n  return 'lr-tb'\n  \n  \nclass LTTextBoxVertical(LTTextBox):\n\n def analyze(self,laparams):\n  LTTextBox.analyze(self,laparams)\n  self._objs=csort(self._objs,key=lambda obj:-obj.x1)\n  return\n  \n def get_writing_mode(self):\n  return 'tb-rl'\n  \n  \n  \n  \nclass LTTextGroup(LTTextContainer):\n\n def __init__(self,objs):\n  LTTextContainer.__init__(self)\n  self.extend(objs)\n  return\n  \n  \nclass LTTextGroupLRTB(LTTextGroup):\n\n def analyze(self,laparams):\n  LTTextGroup.analyze(self,laparams)\n  \n  self._objs=csort(self._objs,key=lambda obj:\n  (1 -laparams.boxes_flow)*(obj.x0)-\n  (1+laparams.boxes_flow)*(obj.y0+obj.y1))\n  return\n  \n  \nclass LTTextGroupTBRL(LTTextGroup):\n\n def analyze(self,laparams):\n  LTTextGroup.analyze(self,laparams)\n  \n  self._objs=csort(self._objs,key=lambda obj:\n  -(1+laparams.boxes_flow)*(obj.x0+obj.x1)\n  -(1 -laparams.boxes_flow)*(obj.y1))\n  return\n  \n  \n  \n  \nclass LTLayoutContainer(LTContainer):\n\n def __init__(self,bbox):\n  LTContainer.__init__(self,bbox)\n  self.groups=None\n  return\n  \n  \n def group_objects(self,laparams,objs):\n  obj0=None\n  line=None\n  for obj1 in objs:\n   if obj0 is not None :\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    halign=(obj0.is_compatible(obj1)and\n    obj0.is_voverlap(obj1)and\n    (min(obj0.height,obj1.height)*laparams.line_overlap <\n    obj0.voverlap(obj1))and\n    (obj0.hdistance(obj1)<\n    max(obj0.width,obj1.width)*laparams.char_margin))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    valign=(laparams.detect_vertical and\n    obj0.is_compatible(obj1)and\n    obj0.is_hoverlap(obj1)and\n    (min(obj0.width,obj1.width)*laparams.line_overlap <\n    obj0.hoverlap(obj1))and\n    (obj0.vdistance(obj1)<\n    max(obj0.height,obj1.height)*laparams.char_margin))\n    \n    if ((halign and isinstance(line,LTTextLineHorizontal))or\n    (valign and isinstance(line,LTTextLineVertical))):\n     line.add(obj1)\n    elif line is not None :\n     yield line\n     line=None\n    else :\n     if valign and not halign:\n      line=LTTextLineVertical(laparams.word_margin)\n      line.add(obj0)\n      line.add(obj1)\n     elif halign and not valign:\n      line=LTTextLineHorizontal(laparams.word_margin)\n      line.add(obj0)\n      line.add(obj1)\n     else :\n      line=LTTextLineHorizontal(laparams.word_margin)\n      line.add(obj0)\n      yield line\n      line=None\n   obj0=obj1\n  if line is None :\n   line=LTTextLineHorizontal(laparams.word_margin)\n   line.add(obj0)\n  yield line\n  return\n  \n  \n def group_textlines(self,laparams,lines):\n  plane=Plane(self.bbox)\n  plane.extend(lines)\n  boxes={}\n  for line in lines:\n   neighbors=line.find_neighbors(plane,laparams.line_margin)\n   if line not in neighbors:continue\n   members=[]\n   for obj1 in neighbors:\n    members.append(obj1)\n    if obj1 in boxes:\n     members.extend(boxes.pop(obj1))\n   if isinstance(line,LTTextLineHorizontal):\n    box=LTTextBoxHorizontal()\n   else :\n    box=LTTextBoxVertical()\n   for obj in uniq(members):\n    box.add(obj)\n    boxes[obj]=box\n  done=set()\n  for line in lines:\n   if line not in boxes:continue\n   box=boxes[line]\n   if box in done:\n    continue\n   done.add(box)\n   if not box.is_empty():\n    yield box\n  return\n  \n  \n def group_textboxes(self,laparams,boxes):\n  assert boxes\n  \n  def dist(obj1,obj2):\n   ''\n\n\n\n\n\n\n\n\n\n   \n   x0=min(obj1.x0,obj2.x0)\n   y0=min(obj1.y0,obj2.y0)\n   x1=max(obj1.x1,obj2.x1)\n   y1=max(obj1.y1,obj2.y1)\n   return ((x1 -x0)*(y1 -y0)-obj1.width *obj1.height -obj2.width *obj2.height)\n   \n  def isany(obj1,obj2):\n   ''\n   \n   x0=min(obj1.x0,obj2.x0)\n   y0=min(obj1.y0,obj2.y0)\n   x1=max(obj1.x1,obj2.x1)\n   y1=max(obj1.y1,obj2.y1)\n   objs=set(plane.find((x0,y0,x1,y1)))\n   return objs.difference((obj1,obj2))\n   \n  def key_obj(t):\n   (c,d,_,_)=t\n   return (c,d)\n   \n   \n  dists=[]\n  for i in range(len(boxes)):\n   obj1=boxes[i]\n   for j in range(i+1,len(boxes)):\n    obj2=boxes[j]\n    dists.append((0,dist(obj1,obj2),obj1,obj2))\n    \n  dists=csort(dists,key=key_obj)\n  plane=Plane(self.bbox)\n  plane.extend(boxes)\n  while dists:\n   (c,d,obj1,obj2)=dists.pop(0)\n   if c ==0 and isany(obj1,obj2):\n    dists.append((1,d,obj1,obj2))\n    continue\n   if (isinstance(obj1,(LTTextBoxVertical,LTTextGroupTBRL))or\n   isinstance(obj2,(LTTextBoxVertical,LTTextGroupTBRL))):\n    group=LTTextGroupTBRL([obj1,obj2])\n   else :\n    group=LTTextGroupLRTB([obj1,obj2])\n   plane.remove(obj1)\n   plane.remove(obj2)\n   dists=[(c,d,obj1,obj2)for (c,d,obj1,obj2)in dists\n   if (obj1 in plane and obj2 in plane)]\n   for other in plane:\n    dists.append((0,dist(group,other),group,other))\n   dists=csort(dists,key=key_obj)\n   plane.add(group)\n  assert len(plane)==1\n  return list(plane)\n  \n def analyze(self,laparams):\n \n \n  (textobjs,otherobjs)=fsplit(lambda obj:isinstance(obj,LTChar),self)\n  for obj in otherobjs:\n   obj.analyze(laparams)\n  if not textobjs:\n   return\n  textlines=list(self.group_objects(laparams,textobjs))\n  (empties,textlines)=fsplit(lambda obj:obj.is_empty(),textlines)\n  for obj in empties:\n   obj.analyze(laparams)\n  textboxes=list(self.group_textlines(laparams,textlines))\n  if -1 <=laparams.boxes_flow and laparams.boxes_flow <=+1 and textboxes:\n   self.groups=self.group_textboxes(laparams,textboxes)\n   assigner=IndexAssigner()\n   for group in self.groups:\n    group.analyze(laparams)\n    assigner.run(group)\n   textboxes.sort(key=lambda box:box.index)\n  else :\n   def getkey(box):\n    if isinstance(box,LTTextBoxVertical):\n     return (0,-box.x1,box.y0)\n    else :\n     return (1,box.y0,box.x0)\n   textboxes.sort(key=getkey)\n  self._objs=textboxes+otherobjs+empties\n  return\n  \n  \n  \n  \nclass LTFigure(LTLayoutContainer):\n\n def __init__(self,name,bbox,matrix):\n  self.name=name\n  self.matrix=matrix\n  (x,y,w,h)=bbox\n  bbox=get_bound(apply_matrix_pt(matrix,(p,q))\n  for (p,q)in ((x,y),(x+w,y),(x,y+h),(x+w,y+h)))\n  LTLayoutContainer.__init__(self,bbox)\n  return\n  \n def __repr__(self):\n  return ('<%s(%s) %s matrix=%s>'%\n  (self.__class__.__name__,self.name,\n  bbox2str(self.bbox),matrix2str(self.matrix)))\n  \n def analyze(self,laparams):\n  if not laparams.all_texts:\n   return\n  LTLayoutContainer.analyze(self,laparams)\n  return\n  \n  \n  \n  \nclass LTPage(LTLayoutContainer):\n\n def __init__(self,pageid,bbox,rotate=0):\n  LTLayoutContainer.__init__(self,bbox)\n  self.pageid=pageid\n  self.rotate=rotate\n  return\n  \n def __repr__(self):\n  return ('<%s(%r) %s rotate=%r>'%\n  (self.__class__.__name__,self.pageid,\n  bbox2str(self.bbox),self.rotate))\n", ["Lib.site-packages.pdfminer.utils"]], "Lib.site-packages.pdfminer.pdfparser": [".py", "#!/usr/bin/env python\nimport logging\nfrom io import BytesIO\nfrom .psparser import PSStackParser\nfrom .psparser import PSSyntaxError\nfrom .psparser import PSEOF\nfrom .psparser import KWD\nfrom .psparser import STRICT\nfrom .pdftypes import PDFException\nfrom .pdftypes import PDFStream\nfrom .pdftypes import PDFObjRef\nfrom .pdftypes import int_value\nfrom .pdftypes import dict_value\n\n\n\n\nclass PDFSyntaxError(PDFException):\n pass\n \n \n \n \nclass PDFParser(PSStackParser):\n\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,fp):\n  PSStackParser.__init__(self,fp)\n  self.doc=None\n  self.fallback=False\n  return\n  \n def set_document(self,doc):\n  ''\n  self.doc=doc\n  return\n  \n KEYWORD_R=KWD(b'R')\n KEYWORD_NULL=KWD(b'null')\n KEYWORD_ENDOBJ=KWD(b'endobj')\n KEYWORD_STREAM=KWD(b'stream')\n KEYWORD_XREF=KWD(b'xref')\n KEYWORD_STARTXREF=KWD(b'startxref')\n \n def do_keyword(self,pos,token):\n  ''\n  \n  if token in (self.KEYWORD_XREF,self.KEYWORD_STARTXREF):\n   self.add_results(*self.pop(1))\n   \n  elif token is self.KEYWORD_ENDOBJ:\n   self.add_results(*self.pop(4))\n   \n  elif token is self.KEYWORD_NULL:\n  \n   self.push((pos,None ))\n   \n  elif token is self.KEYWORD_R:\n  \n   try :\n    ((_,objid),(_,genno))=self.pop(2)\n    (objid,genno)=(int(objid),int(genno))\n    obj=PDFObjRef(self.doc,objid,genno)\n    self.push((pos,obj))\n   except PSSyntaxError:\n    pass\n    \n  elif token is self.KEYWORD_STREAM:\n  \n   ((_,dic),)=self.pop(1)\n   dic=dict_value(dic)\n   objlen=0\n   if not self.fallback:\n    try :\n     objlen=int_value(dic['Length'])\n    except KeyError:\n     if STRICT:\n      raise PDFSyntaxError('/Length is undefined: %r'%dic)\n   self.seek(pos)\n   try :\n    (_,line)=self.nextline()\n   except PSEOF:\n    if STRICT:\n     raise PDFSyntaxError('Unexpected EOF')\n    return\n   pos +=len(line)\n   self.fp.seek(pos)\n   data=self.fp.read(objlen)\n   self.seek(pos+objlen)\n   while 1:\n    try :\n     (linepos,line)=self.nextline()\n    except PSEOF:\n     if STRICT:\n      raise PDFSyntaxError('Unexpected EOF')\n     break\n    if b'endstream'in line:\n     i=line.index(b'endstream')\n     objlen +=i\n     if self.fallback:\n      data +=line[:i]\n     break\n    objlen +=len(line)\n    if self.fallback:\n     data +=line\n   self.seek(pos+objlen)\n   \n   if self.debug:\n    logging.debug('Stream: pos=%d, objlen=%d, dic=%r, data=%r...'%\\\n    (pos,objlen,dic,data[:10]))\n   obj=PDFStream(dic,data,self.doc.decipher)\n   self.push((pos,obj))\n   \n  else :\n  \n   self.push((pos,token))\n   \n  return\n  \n  \n  \n  \nclass PDFStreamParser(PDFParser):\n\n ''\n\n\n\n\n\n \n \n def __init__(self,data):\n  PDFParser.__init__(self,BytesIO(data))\n  return\n  \n def flush(self):\n  self.add_results(*self.popall())\n  return\n  \n KEYWORD_OBJ=KWD(b'obj')\n def do_keyword(self,pos,token):\n  if token is self.KEYWORD_R:\n  \n   try :\n    ((_,objid),(_,genno))=self.pop(2)\n    (objid,genno)=(int(objid),int(genno))\n    obj=PDFObjRef(self.doc,objid,genno)\n    self.push((pos,obj))\n   except PSSyntaxError:\n    pass\n   return\n  elif token in (self.KEYWORD_OBJ,self.KEYWORD_ENDOBJ):\n   if STRICT:\n   \n   \n    raise PDFSyntaxError('Keyword endobj found in stream')\n   return\n   \n  self.push((pos,token))\n  return\n", ["Lib.site-packages.pdfminer.pdftypes", "Lib.site-packages.pdfminer.psparser", "io", "logging"]], "Lib.site-packages.pdfminer.ccitt": [".py", "#!/usr/bin/env python\n\n\n\n\n\n\n\n\n\n\n\nimport sys\nimport array\n\n\n\n\nclass BitParser:\n\n def __init__(self):\n  self._pos=0\n  return\n  \n @classmethod\n def add(klass,root,v,bits):\n  p=root\n  b=None\n  for i in range(len(bits)):\n   if 0 <i:\n    if p[b]is None :\n     p[b]=[None ,None ]\n    p=p[b]\n   if bits[i]=='1':\n    b=1\n   else :\n    b=0\n  p[b]=v\n  return\n  \n def feedbytes(self,data):\n  for b in data:\n   for m in (128,64,32,16,8,4,2,1):\n    self._parse_bit(b&m)\n  return\n  \n def _parse_bit(self,x):\n  if x:\n   v=self._state[1]\n  else :\n   v=self._state[0]\n  self._pos +=1\n  if isinstance(v,list):\n   self._state=v\n  else :\n   self._state=self._accept(v)\n  return\n  \n  \n  \n  \nclass CCITTG4Parser(BitParser):\n\n MODE=[None ,None ]\n BitParser.add(MODE,0,'1')\n BitParser.add(MODE,+1,'011')\n BitParser.add(MODE,-1,'010')\n BitParser.add(MODE,'h','001')\n BitParser.add(MODE,'p','0001')\n BitParser.add(MODE,+2,'000011')\n BitParser.add(MODE,-2,'000010')\n BitParser.add(MODE,+3,'0000011')\n BitParser.add(MODE,-3,'0000010')\n BitParser.add(MODE,'u','0000001111')\n BitParser.add(MODE,'x1','0000001000')\n BitParser.add(MODE,'x2','0000001001')\n BitParser.add(MODE,'x3','0000001010')\n BitParser.add(MODE,'x4','0000001011')\n BitParser.add(MODE,'x5','0000001100')\n BitParser.add(MODE,'x6','0000001101')\n BitParser.add(MODE,'x7','0000001110')\n BitParser.add(MODE,'e','000000000001000000000001')\n \n WHITE=[None ,None ]\n BitParser.add(WHITE,0,'00110101')\n BitParser.add(WHITE,1,'000111')\n BitParser.add(WHITE,2,'0111')\n BitParser.add(WHITE,3,'1000')\n BitParser.add(WHITE,4,'1011')\n BitParser.add(WHITE,5,'1100')\n BitParser.add(WHITE,6,'1110')\n BitParser.add(WHITE,7,'1111')\n BitParser.add(WHITE,8,'10011')\n BitParser.add(WHITE,9,'10100')\n BitParser.add(WHITE,10,'00111')\n BitParser.add(WHITE,11,'01000')\n BitParser.add(WHITE,12,'001000')\n BitParser.add(WHITE,13,'000011')\n BitParser.add(WHITE,14,'110100')\n BitParser.add(WHITE,15,'110101')\n BitParser.add(WHITE,16,'101010')\n BitParser.add(WHITE,17,'101011')\n BitParser.add(WHITE,18,'0100111')\n BitParser.add(WHITE,19,'0001100')\n BitParser.add(WHITE,20,'0001000')\n BitParser.add(WHITE,21,'0010111')\n BitParser.add(WHITE,22,'0000011')\n BitParser.add(WHITE,23,'0000100')\n BitParser.add(WHITE,24,'0101000')\n BitParser.add(WHITE,25,'0101011')\n BitParser.add(WHITE,26,'0010011')\n BitParser.add(WHITE,27,'0100100')\n BitParser.add(WHITE,28,'0011000')\n BitParser.add(WHITE,29,'00000010')\n BitParser.add(WHITE,30,'00000011')\n BitParser.add(WHITE,31,'00011010')\n BitParser.add(WHITE,32,'00011011')\n BitParser.add(WHITE,33,'00010010')\n BitParser.add(WHITE,34,'00010011')\n BitParser.add(WHITE,35,'00010100')\n BitParser.add(WHITE,36,'00010101')\n BitParser.add(WHITE,37,'00010110')\n BitParser.add(WHITE,38,'00010111')\n BitParser.add(WHITE,39,'00101000')\n BitParser.add(WHITE,40,'00101001')\n BitParser.add(WHITE,41,'00101010')\n BitParser.add(WHITE,42,'00101011')\n BitParser.add(WHITE,43,'00101100')\n BitParser.add(WHITE,44,'00101101')\n BitParser.add(WHITE,45,'00000100')\n BitParser.add(WHITE,46,'00000101')\n BitParser.add(WHITE,47,'00001010')\n BitParser.add(WHITE,48,'00001011')\n BitParser.add(WHITE,49,'01010010')\n BitParser.add(WHITE,50,'01010011')\n BitParser.add(WHITE,51,'01010100')\n BitParser.add(WHITE,52,'01010101')\n BitParser.add(WHITE,53,'00100100')\n BitParser.add(WHITE,54,'00100101')\n BitParser.add(WHITE,55,'01011000')\n BitParser.add(WHITE,56,'01011001')\n BitParser.add(WHITE,57,'01011010')\n BitParser.add(WHITE,58,'01011011')\n BitParser.add(WHITE,59,'01001010')\n BitParser.add(WHITE,60,'01001011')\n BitParser.add(WHITE,61,'00110010')\n BitParser.add(WHITE,62,'00110011')\n BitParser.add(WHITE,63,'00110100')\n BitParser.add(WHITE,64,'11011')\n BitParser.add(WHITE,128,'10010')\n BitParser.add(WHITE,192,'010111')\n BitParser.add(WHITE,256,'0110111')\n BitParser.add(WHITE,320,'00110110')\n BitParser.add(WHITE,384,'00110111')\n BitParser.add(WHITE,448,'01100100')\n BitParser.add(WHITE,512,'01100101')\n BitParser.add(WHITE,576,'01101000')\n BitParser.add(WHITE,640,'01100111')\n BitParser.add(WHITE,704,'011001100')\n BitParser.add(WHITE,768,'011001101')\n BitParser.add(WHITE,832,'011010010')\n BitParser.add(WHITE,896,'011010011')\n BitParser.add(WHITE,960,'011010100')\n BitParser.add(WHITE,1024,'011010101')\n BitParser.add(WHITE,1088,'011010110')\n BitParser.add(WHITE,1152,'011010111')\n BitParser.add(WHITE,1216,'011011000')\n BitParser.add(WHITE,1280,'011011001')\n BitParser.add(WHITE,1344,'011011010')\n BitParser.add(WHITE,1408,'011011011')\n BitParser.add(WHITE,1472,'010011000')\n BitParser.add(WHITE,1536,'010011001')\n BitParser.add(WHITE,1600,'010011010')\n BitParser.add(WHITE,1664,'011000')\n BitParser.add(WHITE,1728,'010011011')\n BitParser.add(WHITE,1792,'00000001000')\n BitParser.add(WHITE,1856,'00000001100')\n BitParser.add(WHITE,1920,'00000001101')\n BitParser.add(WHITE,1984,'000000010010')\n BitParser.add(WHITE,2048,'000000010011')\n BitParser.add(WHITE,2112,'000000010100')\n BitParser.add(WHITE,2176,'000000010101')\n BitParser.add(WHITE,2240,'000000010110')\n BitParser.add(WHITE,2304,'000000010111')\n BitParser.add(WHITE,2368,'000000011100')\n BitParser.add(WHITE,2432,'000000011101')\n BitParser.add(WHITE,2496,'000000011110')\n BitParser.add(WHITE,2560,'000000011111')\n \n BLACK=[None ,None ]\n BitParser.add(BLACK,0,'0000110111')\n BitParser.add(BLACK,1,'010')\n BitParser.add(BLACK,2,'11')\n BitParser.add(BLACK,3,'10')\n BitParser.add(BLACK,4,'011')\n BitParser.add(BLACK,5,'0011')\n BitParser.add(BLACK,6,'0010')\n BitParser.add(BLACK,7,'00011')\n BitParser.add(BLACK,8,'000101')\n BitParser.add(BLACK,9,'000100')\n BitParser.add(BLACK,10,'0000100')\n BitParser.add(BLACK,11,'0000101')\n BitParser.add(BLACK,12,'0000111')\n BitParser.add(BLACK,13,'00000100')\n BitParser.add(BLACK,14,'00000111')\n BitParser.add(BLACK,15,'000011000')\n BitParser.add(BLACK,16,'0000010111')\n BitParser.add(BLACK,17,'0000011000')\n BitParser.add(BLACK,18,'0000001000')\n BitParser.add(BLACK,19,'00001100111')\n BitParser.add(BLACK,20,'00001101000')\n BitParser.add(BLACK,21,'00001101100')\n BitParser.add(BLACK,22,'00000110111')\n BitParser.add(BLACK,23,'00000101000')\n BitParser.add(BLACK,24,'00000010111')\n BitParser.add(BLACK,25,'00000011000')\n BitParser.add(BLACK,26,'000011001010')\n BitParser.add(BLACK,27,'000011001011')\n BitParser.add(BLACK,28,'000011001100')\n BitParser.add(BLACK,29,'000011001101')\n BitParser.add(BLACK,30,'000001101000')\n BitParser.add(BLACK,31,'000001101001')\n BitParser.add(BLACK,32,'000001101010')\n BitParser.add(BLACK,33,'000001101011')\n BitParser.add(BLACK,34,'000011010010')\n BitParser.add(BLACK,35,'000011010011')\n BitParser.add(BLACK,36,'000011010100')\n BitParser.add(BLACK,37,'000011010101')\n BitParser.add(BLACK,38,'000011010110')\n BitParser.add(BLACK,39,'000011010111')\n BitParser.add(BLACK,40,'000001101100')\n BitParser.add(BLACK,41,'000001101101')\n BitParser.add(BLACK,42,'000011011010')\n BitParser.add(BLACK,43,'000011011011')\n BitParser.add(BLACK,44,'000001010100')\n BitParser.add(BLACK,45,'000001010101')\n BitParser.add(BLACK,46,'000001010110')\n BitParser.add(BLACK,47,'000001010111')\n BitParser.add(BLACK,48,'000001100100')\n BitParser.add(BLACK,49,'000001100101')\n BitParser.add(BLACK,50,'000001010010')\n BitParser.add(BLACK,51,'000001010011')\n BitParser.add(BLACK,52,'000000100100')\n BitParser.add(BLACK,53,'000000110111')\n BitParser.add(BLACK,54,'000000111000')\n BitParser.add(BLACK,55,'000000100111')\n BitParser.add(BLACK,56,'000000101000')\n BitParser.add(BLACK,57,'000001011000')\n BitParser.add(BLACK,58,'000001011001')\n BitParser.add(BLACK,59,'000000101011')\n BitParser.add(BLACK,60,'000000101100')\n BitParser.add(BLACK,61,'000001011010')\n BitParser.add(BLACK,62,'000001100110')\n BitParser.add(BLACK,63,'000001100111')\n BitParser.add(BLACK,64,'0000001111')\n BitParser.add(BLACK,128,'000011001000')\n BitParser.add(BLACK,192,'000011001001')\n BitParser.add(BLACK,256,'000001011011')\n BitParser.add(BLACK,320,'000000110011')\n BitParser.add(BLACK,384,'000000110100')\n BitParser.add(BLACK,448,'000000110101')\n BitParser.add(BLACK,512,'0000001101100')\n BitParser.add(BLACK,576,'0000001101101')\n BitParser.add(BLACK,640,'0000001001010')\n BitParser.add(BLACK,704,'0000001001011')\n BitParser.add(BLACK,768,'0000001001100')\n BitParser.add(BLACK,832,'0000001001101')\n BitParser.add(BLACK,896,'0000001110010')\n BitParser.add(BLACK,960,'0000001110011')\n BitParser.add(BLACK,1024,'0000001110100')\n BitParser.add(BLACK,1088,'0000001110101')\n BitParser.add(BLACK,1152,'0000001110110')\n BitParser.add(BLACK,1216,'0000001110111')\n BitParser.add(BLACK,1280,'0000001010010')\n BitParser.add(BLACK,1344,'0000001010011')\n BitParser.add(BLACK,1408,'0000001010100')\n BitParser.add(BLACK,1472,'0000001010101')\n BitParser.add(BLACK,1536,'0000001011010')\n BitParser.add(BLACK,1600,'0000001011011')\n BitParser.add(BLACK,1664,'0000001100100')\n BitParser.add(BLACK,1728,'0000001100101')\n BitParser.add(BLACK,1792,'00000001000')\n BitParser.add(BLACK,1856,'00000001100')\n BitParser.add(BLACK,1920,'00000001101')\n BitParser.add(BLACK,1984,'000000010010')\n BitParser.add(BLACK,2048,'000000010011')\n BitParser.add(BLACK,2112,'000000010100')\n BitParser.add(BLACK,2176,'000000010101')\n BitParser.add(BLACK,2240,'000000010110')\n BitParser.add(BLACK,2304,'000000010111')\n BitParser.add(BLACK,2368,'000000011100')\n BitParser.add(BLACK,2432,'000000011101')\n BitParser.add(BLACK,2496,'000000011110')\n BitParser.add(BLACK,2560,'000000011111')\n \n UNCOMPRESSED=[None ,None ]\n BitParser.add(UNCOMPRESSED,'1','1')\n BitParser.add(UNCOMPRESSED,'01','01')\n BitParser.add(UNCOMPRESSED,'001','001')\n BitParser.add(UNCOMPRESSED,'0001','0001')\n BitParser.add(UNCOMPRESSED,'00001','00001')\n BitParser.add(UNCOMPRESSED,'00000','000001')\n BitParser.add(UNCOMPRESSED,'T00','00000011')\n BitParser.add(UNCOMPRESSED,'T10','00000010')\n BitParser.add(UNCOMPRESSED,'T000','000000011')\n BitParser.add(UNCOMPRESSED,'T100','000000010')\n BitParser.add(UNCOMPRESSED,'T0000','0000000011')\n BitParser.add(UNCOMPRESSED,'T1000','0000000010')\n BitParser.add(UNCOMPRESSED,'T00000','00000000011')\n BitParser.add(UNCOMPRESSED,'T10000','00000000010')\n \n class EOFB(Exception):\n  pass\n  \n class InvalidData(Exception):\n  pass\n  \n class ByteSkip(Exception):\n  pass\n  \n def __init__(self,width,bytealign=False ):\n  BitParser.__init__(self)\n  self.width=width\n  self.bytealign=bytealign\n  self.reset()\n  return\n  \n def feedbytes(self,data):\n  for b in data:\n   try :\n    for m in (128,64,32,16,8,4,2,1):\n     self._parse_bit(b&m)\n   except self.ByteSkip:\n    self._accept=self._parse_mode\n    self._state=self.MODE\n   except self.EOFB:\n    break\n  return\n  \n def _parse_mode(self,mode):\n  if mode =='p':\n   self._do_pass()\n   self._flush_line()\n   return self.MODE\n  elif mode =='h':\n   self._n1=0\n   self._accept=self._parse_horiz1\n   if self._color:\n    return self.WHITE\n   else :\n    return self.BLACK\n  elif mode =='u':\n   self._accept=self._parse_uncompressed\n   return self.UNCOMPRESSED\n  elif mode =='e':\n   raise self.EOFB\n  elif isinstance(mode,int):\n   self._do_vertical(mode)\n   self._flush_line()\n   return self.MODE\n  else :\n   raise self.InvalidData(mode)\n   \n def _parse_horiz1(self,n):\n  if n is None :\n   raise self.InvalidData\n  self._n1 +=n\n  if n <64:\n   self._n2=0\n   self._color=1 -self._color\n   self._accept=self._parse_horiz2\n  if self._color:\n   return self.WHITE\n  else :\n   return self.BLACK\n   \n def _parse_horiz2(self,n):\n  if n is None :\n   raise self.InvalidData\n  self._n2 +=n\n  if n <64:\n   self._color=1 -self._color\n   self._accept=self._parse_mode\n   self._do_horizontal(self._n1,self._n2)\n   self._flush_line()\n   return self.MODE\n  elif self._color:\n   return self.WHITE\n  else :\n   return self.BLACK\n   \n def _parse_uncompressed(self,bits):\n  if not bits:\n   raise self.InvalidData\n  if bits.startswith('T'):\n   self._accept=self._parse_mode\n   self._color=int(bits[1])\n   self._do_uncompressed(bits[2:])\n   return self.MODE\n  else :\n   self._do_uncompressed(bits)\n   return self.UNCOMPRESSED\n   \n def _get_bits(self):\n  return ''.join(str(b)for b in self._curline[:self._curpos])\n  \n def _get_refline(self,i):\n  if i <0:\n   return '[]'+''.join(str(b)for b in self._refline)\n  elif len(self._refline)<=i:\n   return ''.join(str(b)for b in self._refline)+'[]'\n  else :\n   return (''.join(str(b)for b in self._refline[:i])+\n   '['+str(self._refline[i])+']'+\n   ''.join(str(b)for b in self._refline[i+1:]))\n   \n def reset(self):\n  self._y=0\n  self._curline=array.array('b',[1]*self.width)\n  self._reset_line()\n  self._accept=self._parse_mode\n  self._state=self.MODE\n  return\n  \n def output_line(self,y,bits):\n  print(y,''.join(str(b)for b in bits))\n  return\n  \n def _reset_line(self):\n  self._refline=self._curline\n  self._curline=array.array('b',[1]*self.width)\n  self._curpos=-1\n  self._color=1\n  return\n  \n def _flush_line(self):\n  if self.width <=self._curpos:\n   self.output_line(self._y,self._curline)\n   self._y +=1\n   self._reset_line()\n   if self.bytealign:\n    raise self.ByteSkip\n  return\n  \n def _do_vertical(self,dx):\n \n \n  x1=self._curpos+1\n  while 1:\n   if x1 ==0:\n    if (self._color ==1 and self._refline[x1]!=self._color):\n     break\n   elif x1 ==len(self._refline):\n    break\n   elif (self._refline[x1 -1]==self._color and\n   self._refline[x1]!=self._color):\n    break\n   x1 +=1\n  x1 +=dx\n  x0=max(0,self._curpos)\n  x1=max(0,min(self.width,x1))\n  if x1 <x0:\n   for x in range(x1,x0):\n    self._curline[x]=self._color\n  elif x0 <x1:\n   for x in range(x0,x1):\n    self._curline[x]=self._color\n  self._curpos=x1\n  self._color=1 -self._color\n  return\n  \n def _do_pass(self):\n \n \n  x1=self._curpos+1\n  while 1:\n   if x1 ==0:\n    if (self._color ==1 and self._refline[x1]!=self._color):\n     break\n   elif x1 ==len(self._refline):\n    break\n   elif (self._refline[x1 -1]==self._color and\n   self._refline[x1]!=self._color):\n    break\n   x1 +=1\n  while 1:\n   if x1 ==0:\n    if (self._color ==0 and self._refline[x1]==self._color):\n     break\n   elif x1 ==len(self._refline):\n    break\n   elif (self._refline[x1 -1]!=self._color and\n   self._refline[x1]==self._color):\n    break\n   x1 +=1\n  for x in range(self._curpos,x1):\n   self._curline[x]=self._color\n  self._curpos=x1\n  return\n  \n def _do_horizontal(self,n1,n2):\n \n  if self._curpos <0:\n   self._curpos=0\n  x=self._curpos\n  for _ in range(n1):\n   if len(self._curline)<=x:\n    break\n   self._curline[x]=self._color\n   x +=1\n  for _ in range(n2):\n   if len(self._curline)<=x:\n    break\n   self._curline[x]=1 -self._color\n   x +=1\n  self._curpos=x\n  return\n  \n def _do_uncompressed(self,bits):\n \n  for c in bits:\n   self._curline[self._curpos]=int(c)\n   self._curpos +=1\n   self._flush_line()\n  return\n  \nimport unittest\n\n\n\n\nclass TestCCITTG4Parser(unittest.TestCase):\n\n def get_parser(self,bits):\n  parser=CCITTG4Parser(len(bits))\n  parser._curline=[int(c)for c in bits]\n  parser._reset_line()\n  return parser\n  \n def test_b1(self):\n  parser=self.get_parser('00000')\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,0)\n  return\n  \n def test_b2(self):\n  parser=self.get_parser('10000')\n  parser._do_vertical(-1)\n  self.assertEqual(parser._curpos,0)\n  return\n  \n def test_b3(self):\n  parser=self.get_parser('000111')\n  parser._do_pass()\n  self.assertEqual(parser._curpos,3)\n  self.assertEqual(parser._get_bits(),'111')\n  return\n  \n def test_b4(self):\n  parser=self.get_parser('00000')\n  parser._do_vertical(+2)\n  self.assertEqual(parser._curpos,2)\n  self.assertEqual(parser._get_bits(),'11')\n  return\n  \n def test_b5(self):\n  parser=self.get_parser('11111111100')\n  parser._do_horizontal(0,3)\n  self.assertEqual(parser._curpos,3)\n  parser._do_vertical(1)\n  self.assertEqual(parser._curpos,10)\n  self.assertEqual(parser._get_bits(),'0001111111')\n  return\n  \n def test_e1(self):\n  parser=self.get_parser('10000')\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,1)\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,5)\n  self.assertEqual(parser._get_bits(),'10000')\n  return\n  \n def test_e2(self):\n  parser=self.get_parser('10011')\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,1)\n  parser._do_vertical(2)\n  self.assertEqual(parser._curpos,5)\n  self.assertEqual(parser._get_bits(),'10000')\n  return\n  \n def test_e3(self):\n  parser=self.get_parser('011111')\n  parser._color=0\n  parser._do_vertical(0)\n  self.assertEqual(parser._color,1)\n  self.assertEqual(parser._curpos,1)\n  parser._do_vertical(-2)\n  self.assertEqual(parser._color,0)\n  self.assertEqual(parser._curpos,4)\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,6)\n  self.assertEqual(parser._get_bits(),'011100')\n  return\n  \n def test_e4(self):\n  parser=self.get_parser('10000')\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,1)\n  parser._do_vertical(-2)\n  self.assertEqual(parser._curpos,3)\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,5)\n  self.assertEqual(parser._get_bits(),'10011')\n  return\n  \n def test_e5(self):\n  parser=self.get_parser('011000')\n  parser._color=0\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,1)\n  parser._do_vertical(3)\n  self.assertEqual(parser._curpos,6)\n  self.assertEqual(parser._get_bits(),'011111')\n  return\n  \n def test_e6(self):\n  parser=self.get_parser('11001')\n  parser._do_pass()\n  self.assertEqual(parser._curpos,4)\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,5)\n  self.assertEqual(parser._get_bits(),'11111')\n  return\n  \n def test_e7(self):\n  parser=self.get_parser('0000000000')\n  parser._curpos=2\n  parser._color=1\n  parser._do_horizontal(2,6)\n  self.assertEqual(parser._curpos,10)\n  self.assertEqual(parser._get_bits(),'1111000000')\n  return\n  \n def test_e8(self):\n  parser=self.get_parser('001100000')\n  parser._curpos=1\n  parser._color=0\n  parser._do_vertical(0)\n  self.assertEqual(parser._curpos,2)\n  parser._do_horizontal(7,0)\n  self.assertEqual(parser._curpos,9)\n  self.assertEqual(parser._get_bits(),'101111111')\n  return\n  \n def test_m1(self):\n  parser=self.get_parser('10101')\n  parser._do_pass()\n  self.assertEqual(parser._curpos,2)\n  parser._do_pass()\n  self.assertEqual(parser._curpos,4)\n  self.assertEqual(parser._get_bits(),'1111')\n  return\n  \n def test_m2(self):\n  parser=self.get_parser('101011')\n  parser._do_vertical(-1)\n  parser._do_vertical(-1)\n  parser._do_vertical(1)\n  parser._do_horizontal(1,1)\n  self.assertEqual(parser._get_bits(),'011101')\n  return\n  \n def test_m3(self):\n  parser=self.get_parser('10111011')\n  parser._do_vertical(-1)\n  parser._do_pass()\n  parser._do_vertical(1)\n  parser._do_vertical(1)\n  self.assertEqual(parser._get_bits(),'00000001')\n  return\n  \n  \n  \n  \nclass CCITTFaxDecoder(CCITTG4Parser):\n\n def __init__(self,width,bytealign=False ,reversed=False ):\n  CCITTG4Parser.__init__(self,width,bytealign=bytealign)\n  self.reversed=reversed\n  self._buf=b''\n  return\n  \n def close(self):\n  return self._buf\n  \n def output_line(self,y,bits):\n  bytes=array.array('B',[0]*((len(bits)+7)//8))\n  if self.reversed:\n   bits=[1 -b for b in bits]\n  for (i,b)in enumerate(bits):\n   if b:\n    bytes[i //8]+=(128,64,32,16,8,4,2,1)[i %8]\n  self._buf +=bytes.tostring()\n  return\n  \n  \ndef ccittfaxdecode(data,params):\n K=params.get('K')\n cols=params.get('Columns')\n bytealign=params.get('EncodedByteAlign')\n reversed=params.get('BlackIs1')\n if K ==-1:\n  parser=CCITTFaxDecoder(cols,bytealign=bytealign,reversed=reversed)\n else :\n  raise ValueError(K)\n parser.feedbytes(data)\n return parser.close()\n \n \n \ndef main(argv):\n if not argv[1:]:\n  return unittest.main()\n  \n class Parser(CCITTG4Parser):\n \n  def __init__(self,width,bytealign=False ):\n   import pygame\n   CCITTG4Parser.__init__(self,width,bytealign=bytealign)\n   self.img=pygame.Surface((self.width,1000))\n   return\n   \n  def output_line(self,y,bits):\n   for (x,b)in enumerate(bits):\n    if b:\n     self.img.set_at((x,y),(255,255,255))\n    else :\n     self.img.set_at((x,y),(0,0,0))\n   return\n   \n  def close(self):\n   import pygame\n   pygame.image.save(self.img,'out.bmp')\n   return\n   \n for path in argv[1:]:\n  with open(path,'rb')as fp:\n   (_,_,k,w,h,_)=path.split('.')\n   parser=Parser(int(w))\n   parser.feedbytes(fp.read())\n   parser.close()\n return\n \nif __name__ =='__main__':sys.exit(main(sys.argv))\n", ["array", "pygame", "sys", "unittest"]], "Lib.site-packages.pdfminer.pdfcolor": [".py", "#!/usr/bin/env python\nfrom .psparser import LIT\n\n\n\n\nLITERAL_DEVICE_GRAY=LIT('DeviceGray')\nLITERAL_DEVICE_RGB=LIT('DeviceRGB')\nLITERAL_DEVICE_CMYK=LIT('DeviceCMYK')\n\n\nclass PDFColorSpace:\n\n def __init__(self,name,ncomponents):\n  self.name=name\n  self.ncomponents=ncomponents\n  return\n  \n def __repr__(self):\n  return '<PDFColorSpace: %s, ncomponents=%d>'%(self.name,self.ncomponents)\n  \n  \nPREDEFINED_COLORSPACE=dict(\n(name,PDFColorSpace(name,n))for (name,n)in {\n'CalRGB':3,\n'CalGray':1,\n'Lab':3,\n'DeviceRGB':3,\n'DeviceCMYK':4,\n'DeviceGray':1,\n'Separation':1,\n'Indexed':1,\n'Pattern':1,\n}.items())\n", ["Lib.site-packages.pdfminer.psparser"]], "Lib.site-packages.pdfminer.rijndael": [".py", "#!/usr/bin/env python\n\n\"\"\" Python implementation of Rijndael encryption algorithm.\n\nThis code is in the public domain.\n\nThis code is based on a public domain C implementation\nby Philip J. Erdelsky:\n  http://www.efgh.com/software/rijndael.htm\n\n\"\"\"\n\nimport struct\n\n\ndef KEYLENGTH(keybits):\n return (keybits)//8\n \n \ndef RKLENGTH(keybits):\n return (keybits)//8+28\n \n \ndef NROUNDS(keybits):\n return (keybits)//32+6\n \nTe0=[\n0xc66363a5,0xf87c7c84,0xee777799,0xf67b7b8d,\n0xfff2f20d,0xd66b6bbd,0xde6f6fb1,0x91c5c554,\n0x60303050,0x02010103,0xce6767a9,0x562b2b7d,\n0xe7fefe19,0xb5d7d762,0x4dababe6,0xec76769a,\n0x8fcaca45,0x1f82829d,0x89c9c940,0xfa7d7d87,\n0xeffafa15,0xb25959eb,0x8e4747c9,0xfbf0f00b,\n0x41adadec,0xb3d4d467,0x5fa2a2fd,0x45afafea,\n0x239c9cbf,0x53a4a4f7,0xe4727296,0x9bc0c05b,\n0x75b7b7c2,0xe1fdfd1c,0x3d9393ae,0x4c26266a,\n0x6c36365a,0x7e3f3f41,0xf5f7f702,0x83cccc4f,\n0x6834345c,0x51a5a5f4,0xd1e5e534,0xf9f1f108,\n0xe2717193,0xabd8d873,0x62313153,0x2a15153f,\n0x0804040c,0x95c7c752,0x46232365,0x9dc3c35e,\n0x30181828,0x379696a1,0x0a05050f,0x2f9a9ab5,\n0x0e070709,0x24121236,0x1b80809b,0xdfe2e23d,\n0xcdebeb26,0x4e272769,0x7fb2b2cd,0xea75759f,\n0x1209091b,0x1d83839e,0x582c2c74,0x341a1a2e,\n0x361b1b2d,0xdc6e6eb2,0xb45a5aee,0x5ba0a0fb,\n0xa45252f6,0x763b3b4d,0xb7d6d661,0x7db3b3ce,\n0x5229297b,0xdde3e33e,0x5e2f2f71,0x13848497,\n0xa65353f5,0xb9d1d168,0x00000000,0xc1eded2c,\n0x40202060,0xe3fcfc1f,0x79b1b1c8,0xb65b5bed,\n0xd46a6abe,0x8dcbcb46,0x67bebed9,0x7239394b,\n0x944a4ade,0x984c4cd4,0xb05858e8,0x85cfcf4a,\n0xbbd0d06b,0xc5efef2a,0x4faaaae5,0xedfbfb16,\n0x864343c5,0x9a4d4dd7,0x66333355,0x11858594,\n0x8a4545cf,0xe9f9f910,0x04020206,0xfe7f7f81,\n0xa05050f0,0x783c3c44,0x259f9fba,0x4ba8a8e3,\n0xa25151f3,0x5da3a3fe,0x804040c0,0x058f8f8a,\n0x3f9292ad,0x219d9dbc,0x70383848,0xf1f5f504,\n0x63bcbcdf,0x77b6b6c1,0xafdada75,0x42212163,\n0x20101030,0xe5ffff1a,0xfdf3f30e,0xbfd2d26d,\n0x81cdcd4c,0x180c0c14,0x26131335,0xc3ecec2f,\n0xbe5f5fe1,0x359797a2,0x884444cc,0x2e171739,\n0x93c4c457,0x55a7a7f2,0xfc7e7e82,0x7a3d3d47,\n0xc86464ac,0xba5d5de7,0x3219192b,0xe6737395,\n0xc06060a0,0x19818198,0x9e4f4fd1,0xa3dcdc7f,\n0x44222266,0x542a2a7e,0x3b9090ab,0x0b888883,\n0x8c4646ca,0xc7eeee29,0x6bb8b8d3,0x2814143c,\n0xa7dede79,0xbc5e5ee2,0x160b0b1d,0xaddbdb76,\n0xdbe0e03b,0x64323256,0x743a3a4e,0x140a0a1e,\n0x924949db,0x0c06060a,0x4824246c,0xb85c5ce4,\n0x9fc2c25d,0xbdd3d36e,0x43acacef,0xc46262a6,\n0x399191a8,0x319595a4,0xd3e4e437,0xf279798b,\n0xd5e7e732,0x8bc8c843,0x6e373759,0xda6d6db7,\n0x018d8d8c,0xb1d5d564,0x9c4e4ed2,0x49a9a9e0,\n0xd86c6cb4,0xac5656fa,0xf3f4f407,0xcfeaea25,\n0xca6565af,0xf47a7a8e,0x47aeaee9,0x10080818,\n0x6fbabad5,0xf0787888,0x4a25256f,0x5c2e2e72,\n0x381c1c24,0x57a6a6f1,0x73b4b4c7,0x97c6c651,\n0xcbe8e823,0xa1dddd7c,0xe874749c,0x3e1f1f21,\n0x964b4bdd,0x61bdbddc,0x0d8b8b86,0x0f8a8a85,\n0xe0707090,0x7c3e3e42,0x71b5b5c4,0xcc6666aa,\n0x904848d8,0x06030305,0xf7f6f601,0x1c0e0e12,\n0xc26161a3,0x6a35355f,0xae5757f9,0x69b9b9d0,\n0x17868691,0x99c1c158,0x3a1d1d27,0x279e9eb9,\n0xd9e1e138,0xebf8f813,0x2b9898b3,0x22111133,\n0xd26969bb,0xa9d9d970,0x078e8e89,0x339494a7,\n0x2d9b9bb6,0x3c1e1e22,0x15878792,0xc9e9e920,\n0x87cece49,0xaa5555ff,0x50282878,0xa5dfdf7a,\n0x038c8c8f,0x59a1a1f8,0x09898980,0x1a0d0d17,\n0x65bfbfda,0xd7e6e631,0x844242c6,0xd06868b8,\n0x824141c3,0x299999b0,0x5a2d2d77,0x1e0f0f11,\n0x7bb0b0cb,0xa85454fc,0x6dbbbbd6,0x2c16163a,\n]\n\nTe1=[\n0xa5c66363,0x84f87c7c,0x99ee7777,0x8df67b7b,\n0x0dfff2f2,0xbdd66b6b,0xb1de6f6f,0x5491c5c5,\n0x50603030,0x03020101,0xa9ce6767,0x7d562b2b,\n0x19e7fefe,0x62b5d7d7,0xe64dabab,0x9aec7676,\n0x458fcaca,0x9d1f8282,0x4089c9c9,0x87fa7d7d,\n0x15effafa,0xebb25959,0xc98e4747,0x0bfbf0f0,\n0xec41adad,0x67b3d4d4,0xfd5fa2a2,0xea45afaf,\n0xbf239c9c,0xf753a4a4,0x96e47272,0x5b9bc0c0,\n0xc275b7b7,0x1ce1fdfd,0xae3d9393,0x6a4c2626,\n0x5a6c3636,0x417e3f3f,0x02f5f7f7,0x4f83cccc,\n0x5c683434,0xf451a5a5,0x34d1e5e5,0x08f9f1f1,\n0x93e27171,0x73abd8d8,0x53623131,0x3f2a1515,\n0x0c080404,0x5295c7c7,0x65462323,0x5e9dc3c3,\n0x28301818,0xa1379696,0x0f0a0505,0xb52f9a9a,\n0x090e0707,0x36241212,0x9b1b8080,0x3ddfe2e2,\n0x26cdebeb,0x694e2727,0xcd7fb2b2,0x9fea7575,\n0x1b120909,0x9e1d8383,0x74582c2c,0x2e341a1a,\n0x2d361b1b,0xb2dc6e6e,0xeeb45a5a,0xfb5ba0a0,\n0xf6a45252,0x4d763b3b,0x61b7d6d6,0xce7db3b3,\n0x7b522929,0x3edde3e3,0x715e2f2f,0x97138484,\n0xf5a65353,0x68b9d1d1,0x00000000,0x2cc1eded,\n0x60402020,0x1fe3fcfc,0xc879b1b1,0xedb65b5b,\n0xbed46a6a,0x468dcbcb,0xd967bebe,0x4b723939,\n0xde944a4a,0xd4984c4c,0xe8b05858,0x4a85cfcf,\n0x6bbbd0d0,0x2ac5efef,0xe54faaaa,0x16edfbfb,\n0xc5864343,0xd79a4d4d,0x55663333,0x94118585,\n0xcf8a4545,0x10e9f9f9,0x06040202,0x81fe7f7f,\n0xf0a05050,0x44783c3c,0xba259f9f,0xe34ba8a8,\n0xf3a25151,0xfe5da3a3,0xc0804040,0x8a058f8f,\n0xad3f9292,0xbc219d9d,0x48703838,0x04f1f5f5,\n0xdf63bcbc,0xc177b6b6,0x75afdada,0x63422121,\n0x30201010,0x1ae5ffff,0x0efdf3f3,0x6dbfd2d2,\n0x4c81cdcd,0x14180c0c,0x35261313,0x2fc3ecec,\n0xe1be5f5f,0xa2359797,0xcc884444,0x392e1717,\n0x5793c4c4,0xf255a7a7,0x82fc7e7e,0x477a3d3d,\n0xacc86464,0xe7ba5d5d,0x2b321919,0x95e67373,\n0xa0c06060,0x98198181,0xd19e4f4f,0x7fa3dcdc,\n0x66442222,0x7e542a2a,0xab3b9090,0x830b8888,\n0xca8c4646,0x29c7eeee,0xd36bb8b8,0x3c281414,\n0x79a7dede,0xe2bc5e5e,0x1d160b0b,0x76addbdb,\n0x3bdbe0e0,0x56643232,0x4e743a3a,0x1e140a0a,\n0xdb924949,0x0a0c0606,0x6c482424,0xe4b85c5c,\n0x5d9fc2c2,0x6ebdd3d3,0xef43acac,0xa6c46262,\n0xa8399191,0xa4319595,0x37d3e4e4,0x8bf27979,\n0x32d5e7e7,0x438bc8c8,0x596e3737,0xb7da6d6d,\n0x8c018d8d,0x64b1d5d5,0xd29c4e4e,0xe049a9a9,\n0xb4d86c6c,0xfaac5656,0x07f3f4f4,0x25cfeaea,\n0xafca6565,0x8ef47a7a,0xe947aeae,0x18100808,\n0xd56fbaba,0x88f07878,0x6f4a2525,0x725c2e2e,\n0x24381c1c,0xf157a6a6,0xc773b4b4,0x5197c6c6,\n0x23cbe8e8,0x7ca1dddd,0x9ce87474,0x213e1f1f,\n0xdd964b4b,0xdc61bdbd,0x860d8b8b,0x850f8a8a,\n0x90e07070,0x427c3e3e,0xc471b5b5,0xaacc6666,\n0xd8904848,0x05060303,0x01f7f6f6,0x121c0e0e,\n0xa3c26161,0x5f6a3535,0xf9ae5757,0xd069b9b9,\n0x91178686,0x5899c1c1,0x273a1d1d,0xb9279e9e,\n0x38d9e1e1,0x13ebf8f8,0xb32b9898,0x33221111,\n0xbbd26969,0x70a9d9d9,0x89078e8e,0xa7339494,\n0xb62d9b9b,0x223c1e1e,0x92158787,0x20c9e9e9,\n0x4987cece,0xffaa5555,0x78502828,0x7aa5dfdf,\n0x8f038c8c,0xf859a1a1,0x80098989,0x171a0d0d,\n0xda65bfbf,0x31d7e6e6,0xc6844242,0xb8d06868,\n0xc3824141,0xb0299999,0x775a2d2d,0x111e0f0f,\n0xcb7bb0b0,0xfca85454,0xd66dbbbb,0x3a2c1616,\n]\n\nTe2=[\n0x63a5c663,0x7c84f87c,0x7799ee77,0x7b8df67b,\n0xf20dfff2,0x6bbdd66b,0x6fb1de6f,0xc55491c5,\n0x30506030,0x01030201,0x67a9ce67,0x2b7d562b,\n0xfe19e7fe,0xd762b5d7,0xabe64dab,0x769aec76,\n0xca458fca,0x829d1f82,0xc94089c9,0x7d87fa7d,\n0xfa15effa,0x59ebb259,0x47c98e47,0xf00bfbf0,\n0xadec41ad,0xd467b3d4,0xa2fd5fa2,0xafea45af,\n0x9cbf239c,0xa4f753a4,0x7296e472,0xc05b9bc0,\n0xb7c275b7,0xfd1ce1fd,0x93ae3d93,0x266a4c26,\n0x365a6c36,0x3f417e3f,0xf702f5f7,0xcc4f83cc,\n0x345c6834,0xa5f451a5,0xe534d1e5,0xf108f9f1,\n0x7193e271,0xd873abd8,0x31536231,0x153f2a15,\n0x040c0804,0xc75295c7,0x23654623,0xc35e9dc3,\n0x18283018,0x96a13796,0x050f0a05,0x9ab52f9a,\n0x07090e07,0x12362412,0x809b1b80,0xe23ddfe2,\n0xeb26cdeb,0x27694e27,0xb2cd7fb2,0x759fea75,\n0x091b1209,0x839e1d83,0x2c74582c,0x1a2e341a,\n0x1b2d361b,0x6eb2dc6e,0x5aeeb45a,0xa0fb5ba0,\n0x52f6a452,0x3b4d763b,0xd661b7d6,0xb3ce7db3,\n0x297b5229,0xe33edde3,0x2f715e2f,0x84971384,\n0x53f5a653,0xd168b9d1,0x00000000,0xed2cc1ed,\n0x20604020,0xfc1fe3fc,0xb1c879b1,0x5bedb65b,\n0x6abed46a,0xcb468dcb,0xbed967be,0x394b7239,\n0x4ade944a,0x4cd4984c,0x58e8b058,0xcf4a85cf,\n0xd06bbbd0,0xef2ac5ef,0xaae54faa,0xfb16edfb,\n0x43c58643,0x4dd79a4d,0x33556633,0x85941185,\n0x45cf8a45,0xf910e9f9,0x02060402,0x7f81fe7f,\n0x50f0a050,0x3c44783c,0x9fba259f,0xa8e34ba8,\n0x51f3a251,0xa3fe5da3,0x40c08040,0x8f8a058f,\n0x92ad3f92,0x9dbc219d,0x38487038,0xf504f1f5,\n0xbcdf63bc,0xb6c177b6,0xda75afda,0x21634221,\n0x10302010,0xff1ae5ff,0xf30efdf3,0xd26dbfd2,\n0xcd4c81cd,0x0c14180c,0x13352613,0xec2fc3ec,\n0x5fe1be5f,0x97a23597,0x44cc8844,0x17392e17,\n0xc45793c4,0xa7f255a7,0x7e82fc7e,0x3d477a3d,\n0x64acc864,0x5de7ba5d,0x192b3219,0x7395e673,\n0x60a0c060,0x81981981,0x4fd19e4f,0xdc7fa3dc,\n0x22664422,0x2a7e542a,0x90ab3b90,0x88830b88,\n0x46ca8c46,0xee29c7ee,0xb8d36bb8,0x143c2814,\n0xde79a7de,0x5ee2bc5e,0x0b1d160b,0xdb76addb,\n0xe03bdbe0,0x32566432,0x3a4e743a,0x0a1e140a,\n0x49db9249,0x060a0c06,0x246c4824,0x5ce4b85c,\n0xc25d9fc2,0xd36ebdd3,0xacef43ac,0x62a6c462,\n0x91a83991,0x95a43195,0xe437d3e4,0x798bf279,\n0xe732d5e7,0xc8438bc8,0x37596e37,0x6db7da6d,\n0x8d8c018d,0xd564b1d5,0x4ed29c4e,0xa9e049a9,\n0x6cb4d86c,0x56faac56,0xf407f3f4,0xea25cfea,\n0x65afca65,0x7a8ef47a,0xaee947ae,0x08181008,\n0xbad56fba,0x7888f078,0x256f4a25,0x2e725c2e,\n0x1c24381c,0xa6f157a6,0xb4c773b4,0xc65197c6,\n0xe823cbe8,0xdd7ca1dd,0x749ce874,0x1f213e1f,\n0x4bdd964b,0xbddc61bd,0x8b860d8b,0x8a850f8a,\n0x7090e070,0x3e427c3e,0xb5c471b5,0x66aacc66,\n0x48d89048,0x03050603,0xf601f7f6,0x0e121c0e,\n0x61a3c261,0x355f6a35,0x57f9ae57,0xb9d069b9,\n0x86911786,0xc15899c1,0x1d273a1d,0x9eb9279e,\n0xe138d9e1,0xf813ebf8,0x98b32b98,0x11332211,\n0x69bbd269,0xd970a9d9,0x8e89078e,0x94a73394,\n0x9bb62d9b,0x1e223c1e,0x87921587,0xe920c9e9,\n0xce4987ce,0x55ffaa55,0x28785028,0xdf7aa5df,\n0x8c8f038c,0xa1f859a1,0x89800989,0x0d171a0d,\n0xbfda65bf,0xe631d7e6,0x42c68442,0x68b8d068,\n0x41c38241,0x99b02999,0x2d775a2d,0x0f111e0f,\n0xb0cb7bb0,0x54fca854,0xbbd66dbb,0x163a2c16,\n]\n\nTe3=[\n0x6363a5c6,0x7c7c84f8,0x777799ee,0x7b7b8df6,\n0xf2f20dff,0x6b6bbdd6,0x6f6fb1de,0xc5c55491,\n0x30305060,0x01010302,0x6767a9ce,0x2b2b7d56,\n0xfefe19e7,0xd7d762b5,0xababe64d,0x76769aec,\n0xcaca458f,0x82829d1f,0xc9c94089,0x7d7d87fa,\n0xfafa15ef,0x5959ebb2,0x4747c98e,0xf0f00bfb,\n0xadadec41,0xd4d467b3,0xa2a2fd5f,0xafafea45,\n0x9c9cbf23,0xa4a4f753,0x727296e4,0xc0c05b9b,\n0xb7b7c275,0xfdfd1ce1,0x9393ae3d,0x26266a4c,\n0x36365a6c,0x3f3f417e,0xf7f702f5,0xcccc4f83,\n0x34345c68,0xa5a5f451,0xe5e534d1,0xf1f108f9,\n0x717193e2,0xd8d873ab,0x31315362,0x15153f2a,\n0x04040c08,0xc7c75295,0x23236546,0xc3c35e9d,\n0x18182830,0x9696a137,0x05050f0a,0x9a9ab52f,\n0x0707090e,0x12123624,0x80809b1b,0xe2e23ddf,\n0xebeb26cd,0x2727694e,0xb2b2cd7f,0x75759fea,\n0x09091b12,0x83839e1d,0x2c2c7458,0x1a1a2e34,\n0x1b1b2d36,0x6e6eb2dc,0x5a5aeeb4,0xa0a0fb5b,\n0x5252f6a4,0x3b3b4d76,0xd6d661b7,0xb3b3ce7d,\n0x29297b52,0xe3e33edd,0x2f2f715e,0x84849713,\n0x5353f5a6,0xd1d168b9,0x00000000,0xeded2cc1,\n0x20206040,0xfcfc1fe3,0xb1b1c879,0x5b5bedb6,\n0x6a6abed4,0xcbcb468d,0xbebed967,0x39394b72,\n0x4a4ade94,0x4c4cd498,0x5858e8b0,0xcfcf4a85,\n0xd0d06bbb,0xefef2ac5,0xaaaae54f,0xfbfb16ed,\n0x4343c586,0x4d4dd79a,0x33335566,0x85859411,\n0x4545cf8a,0xf9f910e9,0x02020604,0x7f7f81fe,\n0x5050f0a0,0x3c3c4478,0x9f9fba25,0xa8a8e34b,\n0x5151f3a2,0xa3a3fe5d,0x4040c080,0x8f8f8a05,\n0x9292ad3f,0x9d9dbc21,0x38384870,0xf5f504f1,\n0xbcbcdf63,0xb6b6c177,0xdada75af,0x21216342,\n0x10103020,0xffff1ae5,0xf3f30efd,0xd2d26dbf,\n0xcdcd4c81,0x0c0c1418,0x13133526,0xecec2fc3,\n0x5f5fe1be,0x9797a235,0x4444cc88,0x1717392e,\n0xc4c45793,0xa7a7f255,0x7e7e82fc,0x3d3d477a,\n0x6464acc8,0x5d5de7ba,0x19192b32,0x737395e6,\n0x6060a0c0,0x81819819,0x4f4fd19e,0xdcdc7fa3,\n0x22226644,0x2a2a7e54,0x9090ab3b,0x8888830b,\n0x4646ca8c,0xeeee29c7,0xb8b8d36b,0x14143c28,\n0xdede79a7,0x5e5ee2bc,0x0b0b1d16,0xdbdb76ad,\n0xe0e03bdb,0x32325664,0x3a3a4e74,0x0a0a1e14,\n0x4949db92,0x06060a0c,0x24246c48,0x5c5ce4b8,\n0xc2c25d9f,0xd3d36ebd,0xacacef43,0x6262a6c4,\n0x9191a839,0x9595a431,0xe4e437d3,0x79798bf2,\n0xe7e732d5,0xc8c8438b,0x3737596e,0x6d6db7da,\n0x8d8d8c01,0xd5d564b1,0x4e4ed29c,0xa9a9e049,\n0x6c6cb4d8,0x5656faac,0xf4f407f3,0xeaea25cf,\n0x6565afca,0x7a7a8ef4,0xaeaee947,0x08081810,\n0xbabad56f,0x787888f0,0x25256f4a,0x2e2e725c,\n0x1c1c2438,0xa6a6f157,0xb4b4c773,0xc6c65197,\n0xe8e823cb,0xdddd7ca1,0x74749ce8,0x1f1f213e,\n0x4b4bdd96,0xbdbddc61,0x8b8b860d,0x8a8a850f,\n0x707090e0,0x3e3e427c,0xb5b5c471,0x6666aacc,\n0x4848d890,0x03030506,0xf6f601f7,0x0e0e121c,\n0x6161a3c2,0x35355f6a,0x5757f9ae,0xb9b9d069,\n0x86869117,0xc1c15899,0x1d1d273a,0x9e9eb927,\n0xe1e138d9,0xf8f813eb,0x9898b32b,0x11113322,\n0x6969bbd2,0xd9d970a9,0x8e8e8907,0x9494a733,\n0x9b9bb62d,0x1e1e223c,0x87879215,0xe9e920c9,\n0xcece4987,0x5555ffaa,0x28287850,0xdfdf7aa5,\n0x8c8c8f03,0xa1a1f859,0x89898009,0x0d0d171a,\n0xbfbfda65,0xe6e631d7,0x4242c684,0x6868b8d0,\n0x4141c382,0x9999b029,0x2d2d775a,0x0f0f111e,\n0xb0b0cb7b,0x5454fca8,0xbbbbd66d,0x16163a2c,\n]\n\nTe4=[\n0x63636363,0x7c7c7c7c,0x77777777,0x7b7b7b7b,\n0xf2f2f2f2,0x6b6b6b6b,0x6f6f6f6f,0xc5c5c5c5,\n0x30303030,0x01010101,0x67676767,0x2b2b2b2b,\n0xfefefefe,0xd7d7d7d7,0xabababab,0x76767676,\n0xcacacaca,0x82828282,0xc9c9c9c9,0x7d7d7d7d,\n0xfafafafa,0x59595959,0x47474747,0xf0f0f0f0,\n0xadadadad,0xd4d4d4d4,0xa2a2a2a2,0xafafafaf,\n0x9c9c9c9c,0xa4a4a4a4,0x72727272,0xc0c0c0c0,\n0xb7b7b7b7,0xfdfdfdfd,0x93939393,0x26262626,\n0x36363636,0x3f3f3f3f,0xf7f7f7f7,0xcccccccc,\n0x34343434,0xa5a5a5a5,0xe5e5e5e5,0xf1f1f1f1,\n0x71717171,0xd8d8d8d8,0x31313131,0x15151515,\n0x04040404,0xc7c7c7c7,0x23232323,0xc3c3c3c3,\n0x18181818,0x96969696,0x05050505,0x9a9a9a9a,\n0x07070707,0x12121212,0x80808080,0xe2e2e2e2,\n0xebebebeb,0x27272727,0xb2b2b2b2,0x75757575,\n0x09090909,0x83838383,0x2c2c2c2c,0x1a1a1a1a,\n0x1b1b1b1b,0x6e6e6e6e,0x5a5a5a5a,0xa0a0a0a0,\n0x52525252,0x3b3b3b3b,0xd6d6d6d6,0xb3b3b3b3,\n0x29292929,0xe3e3e3e3,0x2f2f2f2f,0x84848484,\n0x53535353,0xd1d1d1d1,0x00000000,0xedededed,\n0x20202020,0xfcfcfcfc,0xb1b1b1b1,0x5b5b5b5b,\n0x6a6a6a6a,0xcbcbcbcb,0xbebebebe,0x39393939,\n0x4a4a4a4a,0x4c4c4c4c,0x58585858,0xcfcfcfcf,\n0xd0d0d0d0,0xefefefef,0xaaaaaaaa,0xfbfbfbfb,\n0x43434343,0x4d4d4d4d,0x33333333,0x85858585,\n0x45454545,0xf9f9f9f9,0x02020202,0x7f7f7f7f,\n0x50505050,0x3c3c3c3c,0x9f9f9f9f,0xa8a8a8a8,\n0x51515151,0xa3a3a3a3,0x40404040,0x8f8f8f8f,\n0x92929292,0x9d9d9d9d,0x38383838,0xf5f5f5f5,\n0xbcbcbcbc,0xb6b6b6b6,0xdadadada,0x21212121,\n0x10101010,0xffffffff,0xf3f3f3f3,0xd2d2d2d2,\n0xcdcdcdcd,0x0c0c0c0c,0x13131313,0xecececec,\n0x5f5f5f5f,0x97979797,0x44444444,0x17171717,\n0xc4c4c4c4,0xa7a7a7a7,0x7e7e7e7e,0x3d3d3d3d,\n0x64646464,0x5d5d5d5d,0x19191919,0x73737373,\n0x60606060,0x81818181,0x4f4f4f4f,0xdcdcdcdc,\n0x22222222,0x2a2a2a2a,0x90909090,0x88888888,\n0x46464646,0xeeeeeeee,0xb8b8b8b8,0x14141414,\n0xdededede,0x5e5e5e5e,0x0b0b0b0b,0xdbdbdbdb,\n0xe0e0e0e0,0x32323232,0x3a3a3a3a,0x0a0a0a0a,\n0x49494949,0x06060606,0x24242424,0x5c5c5c5c,\n0xc2c2c2c2,0xd3d3d3d3,0xacacacac,0x62626262,\n0x91919191,0x95959595,0xe4e4e4e4,0x79797979,\n0xe7e7e7e7,0xc8c8c8c8,0x37373737,0x6d6d6d6d,\n0x8d8d8d8d,0xd5d5d5d5,0x4e4e4e4e,0xa9a9a9a9,\n0x6c6c6c6c,0x56565656,0xf4f4f4f4,0xeaeaeaea,\n0x65656565,0x7a7a7a7a,0xaeaeaeae,0x08080808,\n0xbabababa,0x78787878,0x25252525,0x2e2e2e2e,\n0x1c1c1c1c,0xa6a6a6a6,0xb4b4b4b4,0xc6c6c6c6,\n0xe8e8e8e8,0xdddddddd,0x74747474,0x1f1f1f1f,\n0x4b4b4b4b,0xbdbdbdbd,0x8b8b8b8b,0x8a8a8a8a,\n0x70707070,0x3e3e3e3e,0xb5b5b5b5,0x66666666,\n0x48484848,0x03030303,0xf6f6f6f6,0x0e0e0e0e,\n0x61616161,0x35353535,0x57575757,0xb9b9b9b9,\n0x86868686,0xc1c1c1c1,0x1d1d1d1d,0x9e9e9e9e,\n0xe1e1e1e1,0xf8f8f8f8,0x98989898,0x11111111,\n0x69696969,0xd9d9d9d9,0x8e8e8e8e,0x94949494,\n0x9b9b9b9b,0x1e1e1e1e,0x87878787,0xe9e9e9e9,\n0xcececece,0x55555555,0x28282828,0xdfdfdfdf,\n0x8c8c8c8c,0xa1a1a1a1,0x89898989,0x0d0d0d0d,\n0xbfbfbfbf,0xe6e6e6e6,0x42424242,0x68686868,\n0x41414141,0x99999999,0x2d2d2d2d,0x0f0f0f0f,\n0xb0b0b0b0,0x54545454,0xbbbbbbbb,0x16161616,\n]\n\nTd0=[\n0x51f4a750,0x7e416553,0x1a17a4c3,0x3a275e96,\n0x3bab6bcb,0x1f9d45f1,0xacfa58ab,0x4be30393,\n0x2030fa55,0xad766df6,0x88cc7691,0xf5024c25,\n0x4fe5d7fc,0xc52acbd7,0x26354480,0xb562a38f,\n0xdeb15a49,0x25ba1b67,0x45ea0e98,0x5dfec0e1,\n0xc32f7502,0x814cf012,0x8d4697a3,0x6bd3f9c6,\n0x038f5fe7,0x15929c95,0xbf6d7aeb,0x955259da,\n0xd4be832d,0x587421d3,0x49e06929,0x8ec9c844,\n0x75c2896a,0xf48e7978,0x99583e6b,0x27b971dd,\n0xbee14fb6,0xf088ad17,0xc920ac66,0x7dce3ab4,\n0x63df4a18,0xe51a3182,0x97513360,0x62537f45,\n0xb16477e0,0xbb6bae84,0xfe81a01c,0xf9082b94,\n0x70486858,0x8f45fd19,0x94de6c87,0x527bf8b7,\n0xab73d323,0x724b02e2,0xe31f8f57,0x6655ab2a,\n0xb2eb2807,0x2fb5c203,0x86c57b9a,0xd33708a5,\n0x302887f2,0x23bfa5b2,0x02036aba,0xed16825c,\n0x8acf1c2b,0xa779b492,0xf307f2f0,0x4e69e2a1,\n0x65daf4cd,0x0605bed5,0xd134621f,0xc4a6fe8a,\n0x342e539d,0xa2f355a0,0x058ae132,0xa4f6eb75,\n0x0b83ec39,0x4060efaa,0x5e719f06,0xbd6e1051,\n0x3e218af9,0x96dd063d,0xdd3e05ae,0x4de6bd46,\n0x91548db5,0x71c45d05,0x0406d46f,0x605015ff,\n0x1998fb24,0xd6bde997,0x894043cc,0x67d99e77,\n0xb0e842bd,0x07898b88,0xe7195b38,0x79c8eedb,\n0xa17c0a47,0x7c420fe9,0xf8841ec9,0x00000000,\n0x09808683,0x322bed48,0x1e1170ac,0x6c5a724e,\n0xfd0efffb,0x0f853856,0x3daed51e,0x362d3927,\n0x0a0fd964,0x685ca621,0x9b5b54d1,0x24362e3a,\n0x0c0a67b1,0x9357e70f,0xb4ee96d2,0x1b9b919e,\n0x80c0c54f,0x61dc20a2,0x5a774b69,0x1c121a16,\n0xe293ba0a,0xc0a02ae5,0x3c22e043,0x121b171d,\n0x0e090d0b,0xf28bc7ad,0x2db6a8b9,0x141ea9c8,\n0x57f11985,0xaf75074c,0xee99ddbb,0xa37f60fd,\n0xf701269f,0x5c72f5bc,0x44663bc5,0x5bfb7e34,\n0x8b432976,0xcb23c6dc,0xb6edfc68,0xb8e4f163,\n0xd731dcca,0x42638510,0x13972240,0x84c61120,\n0x854a247d,0xd2bb3df8,0xaef93211,0xc729a16d,\n0x1d9e2f4b,0xdcb230f3,0x0d8652ec,0x77c1e3d0,\n0x2bb3166c,0xa970b999,0x119448fa,0x47e96422,\n0xa8fc8cc4,0xa0f03f1a,0x567d2cd8,0x223390ef,\n0x87494ec7,0xd938d1c1,0x8ccaa2fe,0x98d40b36,\n0xa6f581cf,0xa57ade28,0xdab78e26,0x3fadbfa4,\n0x2c3a9de4,0x5078920d,0x6a5fcc9b,0x547e4662,\n0xf68d13c2,0x90d8b8e8,0x2e39f75e,0x82c3aff5,\n0x9f5d80be,0x69d0937c,0x6fd52da9,0xcf2512b3,\n0xc8ac993b,0x10187da7,0xe89c636e,0xdb3bbb7b,\n0xcd267809,0x6e5918f4,0xec9ab701,0x834f9aa8,\n0xe6956e65,0xaaffe67e,0x21bccf08,0xef15e8e6,\n0xbae79bd9,0x4a6f36ce,0xea9f09d4,0x29b07cd6,\n0x31a4b2af,0x2a3f2331,0xc6a59430,0x35a266c0,\n0x744ebc37,0xfc82caa6,0xe090d0b0,0x33a7d815,\n0xf104984a,0x41ecdaf7,0x7fcd500e,0x1791f62f,\n0x764dd68d,0x43efb04d,0xccaa4d54,0xe49604df,\n0x9ed1b5e3,0x4c6a881b,0xc12c1fb8,0x4665517f,\n0x9d5eea04,0x018c355d,0xfa877473,0xfb0b412e,\n0xb3671d5a,0x92dbd252,0xe9105633,0x6dd64713,\n0x9ad7618c,0x37a10c7a,0x59f8148e,0xeb133c89,\n0xcea927ee,0xb761c935,0xe11ce5ed,0x7a47b13c,\n0x9cd2df59,0x55f2733f,0x1814ce79,0x73c737bf,\n0x53f7cdea,0x5ffdaa5b,0xdf3d6f14,0x7844db86,\n0xcaaff381,0xb968c43e,0x3824342c,0xc2a3405f,\n0x161dc372,0xbce2250c,0x283c498b,0xff0d9541,\n0x39a80171,0x080cb3de,0xd8b4e49c,0x6456c190,\n0x7bcb8461,0xd532b670,0x486c5c74,0xd0b85742,\n]\n\nTd1=[\n0x5051f4a7,0x537e4165,0xc31a17a4,0x963a275e,\n0xcb3bab6b,0xf11f9d45,0xabacfa58,0x934be303,\n0x552030fa,0xf6ad766d,0x9188cc76,0x25f5024c,\n0xfc4fe5d7,0xd7c52acb,0x80263544,0x8fb562a3,\n0x49deb15a,0x6725ba1b,0x9845ea0e,0xe15dfec0,\n0x02c32f75,0x12814cf0,0xa38d4697,0xc66bd3f9,\n0xe7038f5f,0x9515929c,0xebbf6d7a,0xda955259,\n0x2dd4be83,0xd3587421,0x2949e069,0x448ec9c8,\n0x6a75c289,0x78f48e79,0x6b99583e,0xdd27b971,\n0xb6bee14f,0x17f088ad,0x66c920ac,0xb47dce3a,\n0x1863df4a,0x82e51a31,0x60975133,0x4562537f,\n0xe0b16477,0x84bb6bae,0x1cfe81a0,0x94f9082b,\n0x58704868,0x198f45fd,0x8794de6c,0xb7527bf8,\n0x23ab73d3,0xe2724b02,0x57e31f8f,0x2a6655ab,\n0x07b2eb28,0x032fb5c2,0x9a86c57b,0xa5d33708,\n0xf2302887,0xb223bfa5,0xba02036a,0x5ced1682,\n0x2b8acf1c,0x92a779b4,0xf0f307f2,0xa14e69e2,\n0xcd65daf4,0xd50605be,0x1fd13462,0x8ac4a6fe,\n0x9d342e53,0xa0a2f355,0x32058ae1,0x75a4f6eb,\n0x390b83ec,0xaa4060ef,0x065e719f,0x51bd6e10,\n0xf93e218a,0x3d96dd06,0xaedd3e05,0x464de6bd,\n0xb591548d,0x0571c45d,0x6f0406d4,0xff605015,\n0x241998fb,0x97d6bde9,0xcc894043,0x7767d99e,\n0xbdb0e842,0x8807898b,0x38e7195b,0xdb79c8ee,\n0x47a17c0a,0xe97c420f,0xc9f8841e,0x00000000,\n0x83098086,0x48322bed,0xac1e1170,0x4e6c5a72,\n0xfbfd0eff,0x560f8538,0x1e3daed5,0x27362d39,\n0x640a0fd9,0x21685ca6,0xd19b5b54,0x3a24362e,\n0xb10c0a67,0x0f9357e7,0xd2b4ee96,0x9e1b9b91,\n0x4f80c0c5,0xa261dc20,0x695a774b,0x161c121a,\n0x0ae293ba,0xe5c0a02a,0x433c22e0,0x1d121b17,\n0x0b0e090d,0xadf28bc7,0xb92db6a8,0xc8141ea9,\n0x8557f119,0x4caf7507,0xbbee99dd,0xfda37f60,\n0x9ff70126,0xbc5c72f5,0xc544663b,0x345bfb7e,\n0x768b4329,0xdccb23c6,0x68b6edfc,0x63b8e4f1,\n0xcad731dc,0x10426385,0x40139722,0x2084c611,\n0x7d854a24,0xf8d2bb3d,0x11aef932,0x6dc729a1,\n0x4b1d9e2f,0xf3dcb230,0xec0d8652,0xd077c1e3,\n0x6c2bb316,0x99a970b9,0xfa119448,0x2247e964,\n0xc4a8fc8c,0x1aa0f03f,0xd8567d2c,0xef223390,\n0xc787494e,0xc1d938d1,0xfe8ccaa2,0x3698d40b,\n0xcfa6f581,0x28a57ade,0x26dab78e,0xa43fadbf,\n0xe42c3a9d,0x0d507892,0x9b6a5fcc,0x62547e46,\n0xc2f68d13,0xe890d8b8,0x5e2e39f7,0xf582c3af,\n0xbe9f5d80,0x7c69d093,0xa96fd52d,0xb3cf2512,\n0x3bc8ac99,0xa710187d,0x6ee89c63,0x7bdb3bbb,\n0x09cd2678,0xf46e5918,0x01ec9ab7,0xa8834f9a,\n0x65e6956e,0x7eaaffe6,0x0821bccf,0xe6ef15e8,\n0xd9bae79b,0xce4a6f36,0xd4ea9f09,0xd629b07c,\n0xaf31a4b2,0x312a3f23,0x30c6a594,0xc035a266,\n0x37744ebc,0xa6fc82ca,0xb0e090d0,0x1533a7d8,\n0x4af10498,0xf741ecda,0x0e7fcd50,0x2f1791f6,\n0x8d764dd6,0x4d43efb0,0x54ccaa4d,0xdfe49604,\n0xe39ed1b5,0x1b4c6a88,0xb8c12c1f,0x7f466551,\n0x049d5eea,0x5d018c35,0x73fa8774,0x2efb0b41,\n0x5ab3671d,0x5292dbd2,0x33e91056,0x136dd647,\n0x8c9ad761,0x7a37a10c,0x8e59f814,0x89eb133c,\n0xeecea927,0x35b761c9,0xede11ce5,0x3c7a47b1,\n0x599cd2df,0x3f55f273,0x791814ce,0xbf73c737,\n0xea53f7cd,0x5b5ffdaa,0x14df3d6f,0x867844db,\n0x81caaff3,0x3eb968c4,0x2c382434,0x5fc2a340,\n0x72161dc3,0x0cbce225,0x8b283c49,0x41ff0d95,\n0x7139a801,0xde080cb3,0x9cd8b4e4,0x906456c1,\n0x617bcb84,0x70d532b6,0x74486c5c,0x42d0b857,\n]\n\nTd2=[\n0xa75051f4,0x65537e41,0xa4c31a17,0x5e963a27,\n0x6bcb3bab,0x45f11f9d,0x58abacfa,0x03934be3,\n0xfa552030,0x6df6ad76,0x769188cc,0x4c25f502,\n0xd7fc4fe5,0xcbd7c52a,0x44802635,0xa38fb562,\n0x5a49deb1,0x1b6725ba,0x0e9845ea,0xc0e15dfe,\n0x7502c32f,0xf012814c,0x97a38d46,0xf9c66bd3,\n0x5fe7038f,0x9c951592,0x7aebbf6d,0x59da9552,\n0x832dd4be,0x21d35874,0x692949e0,0xc8448ec9,\n0x896a75c2,0x7978f48e,0x3e6b9958,0x71dd27b9,\n0x4fb6bee1,0xad17f088,0xac66c920,0x3ab47dce,\n0x4a1863df,0x3182e51a,0x33609751,0x7f456253,\n0x77e0b164,0xae84bb6b,0xa01cfe81,0x2b94f908,\n0x68587048,0xfd198f45,0x6c8794de,0xf8b7527b,\n0xd323ab73,0x02e2724b,0x8f57e31f,0xab2a6655,\n0x2807b2eb,0xc2032fb5,0x7b9a86c5,0x08a5d337,\n0x87f23028,0xa5b223bf,0x6aba0203,0x825ced16,\n0x1c2b8acf,0xb492a779,0xf2f0f307,0xe2a14e69,\n0xf4cd65da,0xbed50605,0x621fd134,0xfe8ac4a6,\n0x539d342e,0x55a0a2f3,0xe132058a,0xeb75a4f6,\n0xec390b83,0xefaa4060,0x9f065e71,0x1051bd6e,\n0x8af93e21,0x063d96dd,0x05aedd3e,0xbd464de6,\n0x8db59154,0x5d0571c4,0xd46f0406,0x15ff6050,\n0xfb241998,0xe997d6bd,0x43cc8940,0x9e7767d9,\n0x42bdb0e8,0x8b880789,0x5b38e719,0xeedb79c8,\n0x0a47a17c,0x0fe97c42,0x1ec9f884,0x00000000,\n0x86830980,0xed48322b,0x70ac1e11,0x724e6c5a,\n0xfffbfd0e,0x38560f85,0xd51e3dae,0x3927362d,\n0xd9640a0f,0xa621685c,0x54d19b5b,0x2e3a2436,\n0x67b10c0a,0xe70f9357,0x96d2b4ee,0x919e1b9b,\n0xc54f80c0,0x20a261dc,0x4b695a77,0x1a161c12,\n0xba0ae293,0x2ae5c0a0,0xe0433c22,0x171d121b,\n0x0d0b0e09,0xc7adf28b,0xa8b92db6,0xa9c8141e,\n0x198557f1,0x074caf75,0xddbbee99,0x60fda37f,\n0x269ff701,0xf5bc5c72,0x3bc54466,0x7e345bfb,\n0x29768b43,0xc6dccb23,0xfc68b6ed,0xf163b8e4,\n0xdccad731,0x85104263,0x22401397,0x112084c6,\n0x247d854a,0x3df8d2bb,0x3211aef9,0xa16dc729,\n0x2f4b1d9e,0x30f3dcb2,0x52ec0d86,0xe3d077c1,\n0x166c2bb3,0xb999a970,0x48fa1194,0x642247e9,\n0x8cc4a8fc,0x3f1aa0f0,0x2cd8567d,0x90ef2233,\n0x4ec78749,0xd1c1d938,0xa2fe8cca,0x0b3698d4,\n0x81cfa6f5,0xde28a57a,0x8e26dab7,0xbfa43fad,\n0x9de42c3a,0x920d5078,0xcc9b6a5f,0x4662547e,\n0x13c2f68d,0xb8e890d8,0xf75e2e39,0xaff582c3,\n0x80be9f5d,0x937c69d0,0x2da96fd5,0x12b3cf25,\n0x993bc8ac,0x7da71018,0x636ee89c,0xbb7bdb3b,\n0x7809cd26,0x18f46e59,0xb701ec9a,0x9aa8834f,\n0x6e65e695,0xe67eaaff,0xcf0821bc,0xe8e6ef15,\n0x9bd9bae7,0x36ce4a6f,0x09d4ea9f,0x7cd629b0,\n0xb2af31a4,0x23312a3f,0x9430c6a5,0x66c035a2,\n0xbc37744e,0xcaa6fc82,0xd0b0e090,0xd81533a7,\n0x984af104,0xdaf741ec,0x500e7fcd,0xf62f1791,\n0xd68d764d,0xb04d43ef,0x4d54ccaa,0x04dfe496,\n0xb5e39ed1,0x881b4c6a,0x1fb8c12c,0x517f4665,\n0xea049d5e,0x355d018c,0x7473fa87,0x412efb0b,\n0x1d5ab367,0xd25292db,0x5633e910,0x47136dd6,\n0x618c9ad7,0x0c7a37a1,0x148e59f8,0x3c89eb13,\n0x27eecea9,0xc935b761,0xe5ede11c,0xb13c7a47,\n0xdf599cd2,0x733f55f2,0xce791814,0x37bf73c7,\n0xcdea53f7,0xaa5b5ffd,0x6f14df3d,0xdb867844,\n0xf381caaf,0xc43eb968,0x342c3824,0x405fc2a3,\n0xc372161d,0x250cbce2,0x498b283c,0x9541ff0d,\n0x017139a8,0xb3de080c,0xe49cd8b4,0xc1906456,\n0x84617bcb,0xb670d532,0x5c74486c,0x5742d0b8,\n]\n\nTd3=[\n0xf4a75051,0x4165537e,0x17a4c31a,0x275e963a,\n0xab6bcb3b,0x9d45f11f,0xfa58abac,0xe303934b,\n0x30fa5520,0x766df6ad,0xcc769188,0x024c25f5,\n0xe5d7fc4f,0x2acbd7c5,0x35448026,0x62a38fb5,\n0xb15a49de,0xba1b6725,0xea0e9845,0xfec0e15d,\n0x2f7502c3,0x4cf01281,0x4697a38d,0xd3f9c66b,\n0x8f5fe703,0x929c9515,0x6d7aebbf,0x5259da95,\n0xbe832dd4,0x7421d358,0xe0692949,0xc9c8448e,\n0xc2896a75,0x8e7978f4,0x583e6b99,0xb971dd27,\n0xe14fb6be,0x88ad17f0,0x20ac66c9,0xce3ab47d,\n0xdf4a1863,0x1a3182e5,0x51336097,0x537f4562,\n0x6477e0b1,0x6bae84bb,0x81a01cfe,0x082b94f9,\n0x48685870,0x45fd198f,0xde6c8794,0x7bf8b752,\n0x73d323ab,0x4b02e272,0x1f8f57e3,0x55ab2a66,\n0xeb2807b2,0xb5c2032f,0xc57b9a86,0x3708a5d3,\n0x2887f230,0xbfa5b223,0x036aba02,0x16825ced,\n0xcf1c2b8a,0x79b492a7,0x07f2f0f3,0x69e2a14e,\n0xdaf4cd65,0x05bed506,0x34621fd1,0xa6fe8ac4,\n0x2e539d34,0xf355a0a2,0x8ae13205,0xf6eb75a4,\n0x83ec390b,0x60efaa40,0x719f065e,0x6e1051bd,\n0x218af93e,0xdd063d96,0x3e05aedd,0xe6bd464d,\n0x548db591,0xc45d0571,0x06d46f04,0x5015ff60,\n0x98fb2419,0xbde997d6,0x4043cc89,0xd99e7767,\n0xe842bdb0,0x898b8807,0x195b38e7,0xc8eedb79,\n0x7c0a47a1,0x420fe97c,0x841ec9f8,0x00000000,\n0x80868309,0x2bed4832,0x1170ac1e,0x5a724e6c,\n0x0efffbfd,0x8538560f,0xaed51e3d,0x2d392736,\n0x0fd9640a,0x5ca62168,0x5b54d19b,0x362e3a24,\n0x0a67b10c,0x57e70f93,0xee96d2b4,0x9b919e1b,\n0xc0c54f80,0xdc20a261,0x774b695a,0x121a161c,\n0x93ba0ae2,0xa02ae5c0,0x22e0433c,0x1b171d12,\n0x090d0b0e,0x8bc7adf2,0xb6a8b92d,0x1ea9c814,\n0xf1198557,0x75074caf,0x99ddbbee,0x7f60fda3,\n0x01269ff7,0x72f5bc5c,0x663bc544,0xfb7e345b,\n0x4329768b,0x23c6dccb,0xedfc68b6,0xe4f163b8,\n0x31dccad7,0x63851042,0x97224013,0xc6112084,\n0x4a247d85,0xbb3df8d2,0xf93211ae,0x29a16dc7,\n0x9e2f4b1d,0xb230f3dc,0x8652ec0d,0xc1e3d077,\n0xb3166c2b,0x70b999a9,0x9448fa11,0xe9642247,\n0xfc8cc4a8,0xf03f1aa0,0x7d2cd856,0x3390ef22,\n0x494ec787,0x38d1c1d9,0xcaa2fe8c,0xd40b3698,\n0xf581cfa6,0x7ade28a5,0xb78e26da,0xadbfa43f,\n0x3a9de42c,0x78920d50,0x5fcc9b6a,0x7e466254,\n0x8d13c2f6,0xd8b8e890,0x39f75e2e,0xc3aff582,\n0x5d80be9f,0xd0937c69,0xd52da96f,0x2512b3cf,\n0xac993bc8,0x187da710,0x9c636ee8,0x3bbb7bdb,\n0x267809cd,0x5918f46e,0x9ab701ec,0x4f9aa883,\n0x956e65e6,0xffe67eaa,0xbccf0821,0x15e8e6ef,\n0xe79bd9ba,0x6f36ce4a,0x9f09d4ea,0xb07cd629,\n0xa4b2af31,0x3f23312a,0xa59430c6,0xa266c035,\n0x4ebc3774,0x82caa6fc,0x90d0b0e0,0xa7d81533,\n0x04984af1,0xecdaf741,0xcd500e7f,0x91f62f17,\n0x4dd68d76,0xefb04d43,0xaa4d54cc,0x9604dfe4,\n0xd1b5e39e,0x6a881b4c,0x2c1fb8c1,0x65517f46,\n0x5eea049d,0x8c355d01,0x877473fa,0x0b412efb,\n0x671d5ab3,0xdbd25292,0x105633e9,0xd647136d,\n0xd7618c9a,0xa10c7a37,0xf8148e59,0x133c89eb,\n0xa927eece,0x61c935b7,0x1ce5ede1,0x47b13c7a,\n0xd2df599c,0xf2733f55,0x14ce7918,0xc737bf73,\n0xf7cdea53,0xfdaa5b5f,0x3d6f14df,0x44db8678,\n0xaff381ca,0x68c43eb9,0x24342c38,0xa3405fc2,\n0x1dc37216,0xe2250cbc,0x3c498b28,0x0d9541ff,\n0xa8017139,0x0cb3de08,0xb4e49cd8,0x56c19064,\n0xcb84617b,0x32b670d5,0x6c5c7448,0xb85742d0,\n]\n\nTd4=[\n0x52525252,0x09090909,0x6a6a6a6a,0xd5d5d5d5,\n0x30303030,0x36363636,0xa5a5a5a5,0x38383838,\n0xbfbfbfbf,0x40404040,0xa3a3a3a3,0x9e9e9e9e,\n0x81818181,0xf3f3f3f3,0xd7d7d7d7,0xfbfbfbfb,\n0x7c7c7c7c,0xe3e3e3e3,0x39393939,0x82828282,\n0x9b9b9b9b,0x2f2f2f2f,0xffffffff,0x87878787,\n0x34343434,0x8e8e8e8e,0x43434343,0x44444444,\n0xc4c4c4c4,0xdededede,0xe9e9e9e9,0xcbcbcbcb,\n0x54545454,0x7b7b7b7b,0x94949494,0x32323232,\n0xa6a6a6a6,0xc2c2c2c2,0x23232323,0x3d3d3d3d,\n0xeeeeeeee,0x4c4c4c4c,0x95959595,0x0b0b0b0b,\n0x42424242,0xfafafafa,0xc3c3c3c3,0x4e4e4e4e,\n0x08080808,0x2e2e2e2e,0xa1a1a1a1,0x66666666,\n0x28282828,0xd9d9d9d9,0x24242424,0xb2b2b2b2,\n0x76767676,0x5b5b5b5b,0xa2a2a2a2,0x49494949,\n0x6d6d6d6d,0x8b8b8b8b,0xd1d1d1d1,0x25252525,\n0x72727272,0xf8f8f8f8,0xf6f6f6f6,0x64646464,\n0x86868686,0x68686868,0x98989898,0x16161616,\n0xd4d4d4d4,0xa4a4a4a4,0x5c5c5c5c,0xcccccccc,\n0x5d5d5d5d,0x65656565,0xb6b6b6b6,0x92929292,\n0x6c6c6c6c,0x70707070,0x48484848,0x50505050,\n0xfdfdfdfd,0xedededed,0xb9b9b9b9,0xdadadada,\n0x5e5e5e5e,0x15151515,0x46464646,0x57575757,\n0xa7a7a7a7,0x8d8d8d8d,0x9d9d9d9d,0x84848484,\n0x90909090,0xd8d8d8d8,0xabababab,0x00000000,\n0x8c8c8c8c,0xbcbcbcbc,0xd3d3d3d3,0x0a0a0a0a,\n0xf7f7f7f7,0xe4e4e4e4,0x58585858,0x05050505,\n0xb8b8b8b8,0xb3b3b3b3,0x45454545,0x06060606,\n0xd0d0d0d0,0x2c2c2c2c,0x1e1e1e1e,0x8f8f8f8f,\n0xcacacaca,0x3f3f3f3f,0x0f0f0f0f,0x02020202,\n0xc1c1c1c1,0xafafafaf,0xbdbdbdbd,0x03030303,\n0x01010101,0x13131313,0x8a8a8a8a,0x6b6b6b6b,\n0x3a3a3a3a,0x91919191,0x11111111,0x41414141,\n0x4f4f4f4f,0x67676767,0xdcdcdcdc,0xeaeaeaea,\n0x97979797,0xf2f2f2f2,0xcfcfcfcf,0xcececece,\n0xf0f0f0f0,0xb4b4b4b4,0xe6e6e6e6,0x73737373,\n0x96969696,0xacacacac,0x74747474,0x22222222,\n0xe7e7e7e7,0xadadadad,0x35353535,0x85858585,\n0xe2e2e2e2,0xf9f9f9f9,0x37373737,0xe8e8e8e8,\n0x1c1c1c1c,0x75757575,0xdfdfdfdf,0x6e6e6e6e,\n0x47474747,0xf1f1f1f1,0x1a1a1a1a,0x71717171,\n0x1d1d1d1d,0x29292929,0xc5c5c5c5,0x89898989,\n0x6f6f6f6f,0xb7b7b7b7,0x62626262,0x0e0e0e0e,\n0xaaaaaaaa,0x18181818,0xbebebebe,0x1b1b1b1b,\n0xfcfcfcfc,0x56565656,0x3e3e3e3e,0x4b4b4b4b,\n0xc6c6c6c6,0xd2d2d2d2,0x79797979,0x20202020,\n0x9a9a9a9a,0xdbdbdbdb,0xc0c0c0c0,0xfefefefe,\n0x78787878,0xcdcdcdcd,0x5a5a5a5a,0xf4f4f4f4,\n0x1f1f1f1f,0xdddddddd,0xa8a8a8a8,0x33333333,\n0x88888888,0x07070707,0xc7c7c7c7,0x31313131,\n0xb1b1b1b1,0x12121212,0x10101010,0x59595959,\n0x27272727,0x80808080,0xecececec,0x5f5f5f5f,\n0x60606060,0x51515151,0x7f7f7f7f,0xa9a9a9a9,\n0x19191919,0xb5b5b5b5,0x4a4a4a4a,0x0d0d0d0d,\n0x2d2d2d2d,0xe5e5e5e5,0x7a7a7a7a,0x9f9f9f9f,\n0x93939393,0xc9c9c9c9,0x9c9c9c9c,0xefefefef,\n0xa0a0a0a0,0xe0e0e0e0,0x3b3b3b3b,0x4d4d4d4d,\n0xaeaeaeae,0x2a2a2a2a,0xf5f5f5f5,0xb0b0b0b0,\n0xc8c8c8c8,0xebebebeb,0xbbbbbbbb,0x3c3c3c3c,\n0x83838383,0x53535353,0x99999999,0x61616161,\n0x17171717,0x2b2b2b2b,0x04040404,0x7e7e7e7e,\n0xbabababa,0x77777777,0xd6d6d6d6,0x26262626,\n0xe1e1e1e1,0x69696969,0x14141414,0x63636363,\n0x55555555,0x21212121,0x0c0c0c0c,0x7d7d7d7d,\n]\n\nrcon=[\n0x01000000,0x02000000,0x04000000,0x08000000,\n0x10000000,0x20000000,0x40000000,0x80000000,\n0x1B000000,0x36000000,\n\n]\n\nif len(struct.pack('L',0))==4:\n\n def GETU32(x):return struct.unpack('>L',x)[0]\n def PUTU32(x):return struct.pack('>L',x)\nelse :\n\n def GETU32(x):return struct.unpack('>I',x)[0]\n def PUTU32(x):return struct.pack('>I',x)\n \n \n \n \n \ndef rijndaelSetupEncrypt(key,keybits):\n i=p=0\n rk=[0]*RKLENGTH(keybits)\n rk[0]=GETU32(key[0:4])\n rk[1]=GETU32(key[4:8])\n rk[2]=GETU32(key[8:12])\n rk[3]=GETU32(key[12:16])\n if keybits ==128:\n  while 1:\n   temp=rk[p+3]\n   rk[p+4]=(rk[p+0]^\n   (Te4[(temp >>16)&0xff]&0xff000000)^\n   (Te4[(temp >>8)&0xff]&0x00ff0000)^\n   (Te4[(temp)&0xff]&0x0000ff00)^\n   (Te4[(temp >>24)]&0x000000ff)^\n   rcon[i])\n   rk[p+5]=rk[p+1]^rk[p+4]\n   rk[p+6]=rk[p+2]^rk[p+5]\n   rk[p+7]=rk[p+3]^rk[p+6]\n   i +=1\n   if i ==10:return (rk,10)\n   p +=4\n   \n rk[4]=GETU32(key[16:20])\n rk[5]=GETU32(key[20:24])\n if keybits ==192:\n  while 1:\n   temp=rk[p+5]\n   rk[p+6]=(rk[p+0]^\n   (Te4[(temp >>16)&0xff]&0xff000000)^\n   (Te4[(temp >>8)&0xff]&0x00ff0000)^\n   (Te4[(temp)&0xff]&0x0000ff00)^\n   (Te4[(temp >>24)]&0x000000ff)^\n   rcon[i])\n   rk[p+7]=rk[p+1]^rk[p+6]\n   rk[p+8]=rk[p+2]^rk[p+7]\n   rk[p+9]=rk[p+3]^rk[p+8]\n   i +=1\n   if i ==8:return (rk,12)\n   rk[p+10]=rk[p+4]^rk[p+9]\n   rk[p+11]=rk[p+5]^rk[p+10]\n   p +=6\n   \n rk[6]=GETU32(key[24:28])\n rk[7]=GETU32(key[28:32])\n if keybits ==256:\n  while 1:\n   temp=rk[p+7]\n   rk[p+8]=(rk[p+0]^\n   (Te4[(temp >>16)&0xff]&0xff000000)^\n   (Te4[(temp >>8)&0xff]&0x00ff0000)^\n   (Te4[(temp)&0xff]&0x0000ff00)^\n   (Te4[(temp >>24)]&0x000000ff)^\n   rcon[i])\n   rk[p+9]=rk[p+1]^rk[p+8]\n   rk[p+10]=rk[p+2]^rk[p+9]\n   rk[p+11]=rk[p+3]^rk[p+10]\n   i +=1\n   if i ==7:return (rk,14)\n   temp=rk[p+11]\n   rk[p+12]=(rk[p+4]^\n   (Te4[(temp >>24)]&0xff000000)^\n   (Te4[(temp >>16)&0xff]&0x00ff0000)^\n   (Te4[(temp >>8)&0xff]&0x0000ff00)^\n   (Te4[(temp)&0xff]&0x000000ff))\n   rk[p+13]=rk[p+5]^rk[p+12]\n   rk[p+14]=rk[p+6]^rk[p+13]\n   rk[p+15]=rk[p+7]^rk[p+14]\n   p +=8\n   \n raise ValueError(keybits)\n \n \n \n \n \ndef rijndaelSetupDecrypt(key,keybits):\n\n\n (rk,nrounds)=rijndaelSetupEncrypt(key,keybits)\n \n i=0\n j=4 *nrounds\n while i <j:\n  temp=rk[i];rk[i]=rk[j];rk[j]=temp\n  temp=rk[i+1];rk[i+1]=rk[j+1];rk[j+1]=temp\n  temp=rk[i+2];rk[i+2]=rk[j+2];rk[j+2]=temp\n  temp=rk[i+3];rk[i+3]=rk[j+3];rk[j+3]=temp\n  i +=4\n  j -=4\n  \n p=0\n for i in range(1,nrounds):\n  p +=4\n  rk[p+0]=(\n  Td0[Te4[(rk[p+0]>>24)]&0xff]^\n  Td1[Te4[(rk[p+0]>>16)&0xff]&0xff]^\n  Td2[Te4[(rk[p+0]>>8)&0xff]&0xff]^\n  Td3[Te4[(rk[p+0])&0xff]&0xff])\n  rk[p+1]=(\n  Td0[Te4[(rk[p+1]>>24)]&0xff]^\n  Td1[Te4[(rk[p+1]>>16)&0xff]&0xff]^\n  Td2[Te4[(rk[p+1]>>8)&0xff]&0xff]^\n  Td3[Te4[(rk[p+1])&0xff]&0xff])\n  rk[p+2]=(\n  Td0[Te4[(rk[p+2]>>24)]&0xff]^\n  Td1[Te4[(rk[p+2]>>16)&0xff]&0xff]^\n  Td2[Te4[(rk[p+2]>>8)&0xff]&0xff]^\n  Td3[Te4[(rk[p+2])&0xff]&0xff])\n  rk[p+3]=(\n  Td0[Te4[(rk[p+3]>>24)]&0xff]^\n  Td1[Te4[(rk[p+3]>>16)&0xff]&0xff]^\n  Td2[Te4[(rk[p+3]>>8)&0xff]&0xff]^\n  Td3[Te4[(rk[p+3])&0xff]&0xff])\n  \n return (rk,nrounds)\n \n \ndef rijndaelEncrypt(rk,nrounds,plaintext):\n assert len(plaintext)==16\n \n \n \n s0=GETU32(plaintext[0:4])^rk[0]\n s1=GETU32(plaintext[4:8])^rk[1]\n s2=GETU32(plaintext[8:12])^rk[2]\n s3=GETU32(plaintext[12:16])^rk[3]\n \n \n r=nrounds >>1\n p=0\n while 1:\n  t0=(\n  Te0[(s0 >>24)]^\n  Te1[(s1 >>16)&0xff]^\n  Te2[(s2 >>8)&0xff]^\n  Te3[(s3)&0xff]^\n  rk[p+4])\n  t1=(\n  Te0[(s1 >>24)]^\n  Te1[(s2 >>16)&0xff]^\n  Te2[(s3 >>8)&0xff]^\n  Te3[(s0)&0xff]^\n  rk[p+5])\n  t2=(\n  Te0[(s2 >>24)]^\n  Te1[(s3 >>16)&0xff]^\n  Te2[(s0 >>8)&0xff]^\n  Te3[(s1)&0xff]^\n  rk[p+6])\n  t3=(\n  Te0[(s3 >>24)]^\n  Te1[(s0 >>16)&0xff]^\n  Te2[(s1 >>8)&0xff]^\n  Te3[(s2)&0xff]^\n  rk[p+7])\n  p +=8\n  r -=1\n  if r ==0:break\n  s0=(\n  Te0[(t0 >>24)]^\n  Te1[(t1 >>16)&0xff]^\n  Te2[(t2 >>8)&0xff]^\n  Te3[(t3)&0xff]^\n  rk[p+0])\n  s1=(\n  Te0[(t1 >>24)]^\n  Te1[(t2 >>16)&0xff]^\n  Te2[(t3 >>8)&0xff]^\n  Te3[(t0)&0xff]^\n  rk[p+1])\n  s2=(\n  Te0[(t2 >>24)]^\n  Te1[(t3 >>16)&0xff]^\n  Te2[(t0 >>8)&0xff]^\n  Te3[(t1)&0xff]^\n  rk[p+2])\n  s3=(\n  Te0[(t3 >>24)]^\n  Te1[(t0 >>16)&0xff]^\n  Te2[(t1 >>8)&0xff]^\n  Te3[(t2)&0xff]^\n  rk[p+3])\n  \n ciphertext=b''\n \n \n \n s0=(\n (Te4[(t0 >>24)]&0xff000000)^\n (Te4[(t1 >>16)&0xff]&0x00ff0000)^\n (Te4[(t2 >>8)&0xff]&0x0000ff00)^\n (Te4[(t3)&0xff]&0x000000ff)^\n rk[p+0])\n ciphertext +=PUTU32(s0)\n s1=(\n (Te4[(t1 >>24)]&0xff000000)^\n (Te4[(t2 >>16)&0xff]&0x00ff0000)^\n (Te4[(t3 >>8)&0xff]&0x0000ff00)^\n (Te4[(t0)&0xff]&0x000000ff)^\n rk[p+1])\n ciphertext +=PUTU32(s1)\n s2=(\n (Te4[(t2 >>24)]&0xff000000)^\n (Te4[(t3 >>16)&0xff]&0x00ff0000)^\n (Te4[(t0 >>8)&0xff]&0x0000ff00)^\n (Te4[(t1)&0xff]&0x000000ff)^\n rk[p+2])\n ciphertext +=PUTU32(s2)\n s3=(\n (Te4[(t3 >>24)]&0xff000000)^\n (Te4[(t0 >>16)&0xff]&0x00ff0000)^\n (Te4[(t1 >>8)&0xff]&0x0000ff00)^\n (Te4[(t2)&0xff]&0x000000ff)^\n rk[p+3])\n ciphertext +=PUTU32(s3)\n \n assert len(ciphertext)==16\n return ciphertext\n \n \ndef rijndaelDecrypt(rk,nrounds,ciphertext):\n assert len(ciphertext)==16\n \n \n \n s0=GETU32(ciphertext[0:4])^rk[0]\n s1=GETU32(ciphertext[4:8])^rk[1]\n s2=GETU32(ciphertext[8:12])^rk[2]\n s3=GETU32(ciphertext[12:16])^rk[3]\n \n \n r=nrounds >>1\n p=0\n while 1:\n  t0=(\n  Td0[(s0 >>24)]^\n  Td1[(s3 >>16)&0xff]^\n  Td2[(s2 >>8)&0xff]^\n  Td3[(s1)&0xff]^\n  rk[p+4])\n  t1=(\n  Td0[(s1 >>24)]^\n  Td1[(s0 >>16)&0xff]^\n  Td2[(s3 >>8)&0xff]^\n  Td3[(s2)&0xff]^\n  rk[p+5])\n  t2=(\n  Td0[(s2 >>24)]^\n  Td1[(s1 >>16)&0xff]^\n  Td2[(s0 >>8)&0xff]^\n  Td3[(s3)&0xff]^\n  rk[p+6])\n  t3=(\n  Td0[(s3 >>24)]^\n  Td1[(s2 >>16)&0xff]^\n  Td2[(s1 >>8)&0xff]^\n  Td3[(s0)&0xff]^\n  rk[p+7])\n  p +=8\n  r -=1\n  if r ==0:break\n  s0=(\n  Td0[(t0 >>24)]^\n  Td1[(t3 >>16)&0xff]^\n  Td2[(t2 >>8)&0xff]^\n  Td3[(t1)&0xff]^\n  rk[p+0])\n  s1=(\n  Td0[(t1 >>24)]^\n  Td1[(t0 >>16)&0xff]^\n  Td2[(t3 >>8)&0xff]^\n  Td3[(t2)&0xff]^\n  rk[p+1])\n  s2=(\n  Td0[(t2 >>24)]^\n  Td1[(t1 >>16)&0xff]^\n  Td2[(t0 >>8)&0xff]^\n  Td3[(t3)&0xff]^\n  rk[p+2])\n  s3=(\n  Td0[(t3 >>24)]^\n  Td1[(t2 >>16)&0xff]^\n  Td2[(t1 >>8)&0xff]^\n  Td3[(t0)&0xff]^\n  rk[p+3])\n  \n plaintext=b''\n \n \n \n s0=(\n (Td4[(t0 >>24)]&0xff000000)^\n (Td4[(t3 >>16)&0xff]&0x00ff0000)^\n (Td4[(t2 >>8)&0xff]&0x0000ff00)^\n (Td4[(t1)&0xff]&0x000000ff)^\n rk[p+0])\n plaintext +=PUTU32(s0)\n s1=(\n (Td4[(t1 >>24)]&0xff000000)^\n (Td4[(t0 >>16)&0xff]&0x00ff0000)^\n (Td4[(t3 >>8)&0xff]&0x0000ff00)^\n (Td4[(t2)&0xff]&0x000000ff)^\n rk[p+1])\n plaintext +=PUTU32(s1)\n s2=(\n (Td4[(t2 >>24)]&0xff000000)^\n (Td4[(t1 >>16)&0xff]&0x00ff0000)^\n (Td4[(t0 >>8)&0xff]&0x0000ff00)^\n (Td4[(t3)&0xff]&0x000000ff)^\n rk[p+2])\n plaintext +=PUTU32(s2)\n s3=(\n (Td4[(t3 >>24)]&0xff000000)^\n (Td4[(t2 >>16)&0xff]&0x00ff0000)^\n (Td4[(t1 >>8)&0xff]&0x0000ff00)^\n (Td4[(t0)&0xff]&0x000000ff)^\n rk[p+3])\n plaintext +=PUTU32(s3)\n \n assert len(plaintext)==16\n return plaintext\n \n \n \nclass RijndaelDecryptor:\n\n ''\n\n\n\n\n \n \n def __init__(self,key,keybits=256):\n  assert len(key)==KEYLENGTH(keybits)\n  (self.rk,self.nrounds)=rijndaelSetupDecrypt(key,keybits)\n  assert len(self.rk)==RKLENGTH(keybits)\n  assert self.nrounds ==NROUNDS(keybits)\n  return\n  \n def decrypt(self,ciphertext):\n  assert len(ciphertext)==16\n  return rijndaelDecrypt(self.rk,self.nrounds,ciphertext)\n  \n  \n  \nclass RijndaelEncryptor:\n\n ''\n\n\n\n\n \n \n def __init__(self,key,keybits=256):\n  assert len(key)==KEYLENGTH(keybits)\n  (self.rk,self.nrounds)=rijndaelSetupEncrypt(key,keybits)\n  assert len(self.rk)==RKLENGTH(keybits)\n  assert self.nrounds ==NROUNDS(keybits)\n  return\n  \n def encrypt(self,plaintext):\n  assert len(plaintext)==16\n  return rijndaelEncrypt(self.rk,self.nrounds,plaintext)\n  \n  \nif __name__ =='__main__':\n import doctest\n print('pdfminer.rijndael',doctest.testmod())\n", ["doctest", "struct"]], "Lib.site-packages.pdfminer.converter": [".py", "#!/usr/bin/env python\nimport logging\nimport re\nfrom .pdfdevice import PDFTextDevice\nfrom .pdffont import PDFUnicodeNotDefined\nfrom .layout import LTContainer\nfrom .layout import LTPage\nfrom .layout import LTText\nfrom .layout import LTLine\nfrom .layout import LTRect\nfrom .layout import LTCurve\nfrom .layout import LTFigure\nfrom .layout import LTImage\nfrom .layout import LTChar\nfrom .layout import LTTextLine\nfrom .layout import LTTextBox\nfrom .layout import LTTextBoxVertical\nfrom .layout import LTTextGroup\nfrom .utils import apply_matrix_pt\nfrom .utils import mult_matrix\nfrom .utils import q\nfrom .utils import bbox2str\n\n\n\n\nclass PDFLayoutAnalyzer(PDFTextDevice):\n\n def __init__(self,rsrcmgr,pageno=1,laparams=None ):\n  PDFTextDevice.__init__(self,rsrcmgr)\n  self.pageno=pageno\n  self.laparams=laparams\n  self._stack=[]\n  return\n  \n def begin_page(self,page,ctm):\n  (x0,y0,x1,y1)=page.mediabox\n  (x0,y0)=apply_matrix_pt(ctm,(x0,y0))\n  (x1,y1)=apply_matrix_pt(ctm,(x1,y1))\n  mediabox=(0,0,abs(x0 -x1),abs(y0 -y1))\n  self.cur_item=LTPage(self.pageno,mediabox)\n  return\n  \n def end_page(self,page):\n  assert not self._stack\n  assert isinstance(self.cur_item,LTPage)\n  if self.laparams is not None :\n   self.cur_item.analyze(self.laparams)\n  self.pageno +=1\n  self.receive_layout(self.cur_item)\n  return\n  \n def begin_figure(self,name,bbox,matrix):\n  self._stack.append(self.cur_item)\n  self.cur_item=LTFigure(name,bbox,mult_matrix(matrix,self.ctm))\n  return\n  \n def end_figure(self,_):\n  fig=self.cur_item\n  assert isinstance(self.cur_item,LTFigure)\n  self.cur_item=self._stack.pop()\n  self.cur_item.add(fig)\n  return\n  \n def render_image(self,name,stream):\n  assert isinstance(self.cur_item,LTFigure)\n  item=LTImage(name,stream,\n  (self.cur_item.x0,self.cur_item.y0,\n  self.cur_item.x1,self.cur_item.y1))\n  self.cur_item.add(item)\n  return\n  \n def paint_path(self,gstate,stroke,fill,evenodd,path):\n  shape=''.join(x[0]for x in path)\n  if shape =='ml':\n  \n   (_,x0,y0)=path[0]\n   (_,x1,y1)=path[1]\n   (x0,y0)=apply_matrix_pt(self.ctm,(x0,y0))\n   (x1,y1)=apply_matrix_pt(self.ctm,(x1,y1))\n   if x0 ==x1 or y0 ==y1:\n    self.cur_item.add(LTLine(gstate.linewidth,(x0,y0),(x1,y1)))\n    return\n  if shape =='mlllh':\n  \n   (_,x0,y0)=path[0]\n   (_,x1,y1)=path[1]\n   (_,x2,y2)=path[2]\n   (_,x3,y3)=path[3]\n   (x0,y0)=apply_matrix_pt(self.ctm,(x0,y0))\n   (x1,y1)=apply_matrix_pt(self.ctm,(x1,y1))\n   (x2,y2)=apply_matrix_pt(self.ctm,(x2,y2))\n   (x3,y3)=apply_matrix_pt(self.ctm,(x3,y3))\n   if ((x0 ==x1 and y1 ==y2 and x2 ==x3 and y3 ==y0)or\n   (y0 ==y1 and x1 ==x2 and y2 ==y3 and x3 ==x0)):\n    self.cur_item.add(LTRect(gstate.linewidth,(x0,y0,x2,y2)))\n    return\n    \n  pts=[]\n  for p in path:\n   for i in range(1,len(p),2):\n    pts.append(apply_matrix_pt(self.ctm,(p[i],p[i+1])))\n  self.cur_item.add(LTCurve(gstate.linewidth,pts))\n  return\n  \n def render_char(self,matrix,font,fontsize,scaling,rise,cid):\n  try :\n   text=font.to_unichr(cid)\n   assert isinstance(text,str),text\n  except PDFUnicodeNotDefined:\n   text=self.handle_undefined_char(font,cid)\n  textwidth=font.char_width(cid)\n  textdisp=font.char_disp(cid)\n  item=LTChar(matrix,font,fontsize,scaling,rise,text,textwidth,textdisp)\n  self.cur_item.add(item)\n  return item.adv\n  \n def handle_undefined_char(self,font,cid):\n  logging.info('undefined: %r, %r'%(font,cid))\n  return f'(cid:{cid})'\n  \n def receive_layout(self,ltpage):\n  return\n  \n  \n  \n  \nclass PDFPageAggregator(PDFLayoutAnalyzer):\n\n def __init__(self,rsrcmgr,pageno=1,laparams=None ):\n  PDFLayoutAnalyzer.__init__(self,rsrcmgr,pageno=pageno,laparams=laparams)\n  self.result=None\n  return\n  \n def receive_layout(self,ltpage):\n  self.result=ltpage\n  return\n  \n def get_result(self):\n  return self.result\n  \n  \n  \n  \nclass PDFConverter(PDFLayoutAnalyzer):\n\n def __init__(self,rsrcmgr,outfp,pageno=1,laparams=None ):\n  PDFLayoutAnalyzer.__init__(self,rsrcmgr,pageno=pageno,laparams=laparams)\n  self.outfp=outfp\n  return\n  \n  \n  \n  \nclass TextConverter(PDFConverter):\n\n def __init__(self,rsrcmgr,outfp,pageno=1,laparams=None ,\n showpageno=False ,imagewriter=None ):\n  PDFConverter.__init__(self,rsrcmgr,outfp,pageno=pageno,laparams=laparams)\n  self.showpageno=showpageno\n  self.imagewriter=imagewriter\n  return\n  \n def write_text(self,text):\n  self.outfp.write(text)\n  return\n  \n def receive_layout(self,ltpage):\n  def render(item):\n   if isinstance(item,LTContainer):\n    for child in item:\n     render(child)\n   elif isinstance(item,LTText):\n    self.write_text(item.get_text())\n   if isinstance(item,LTTextBox):\n    self.write_text('\\n')\n   elif isinstance(item,LTImage):\n    if self.imagewriter is not None :\n     self.imagewriter.export_image(item)\n  if self.showpageno:\n   self.write_text('Page %s\\n'%ltpage.pageid)\n  render(ltpage)\n  self.write_text('\\f')\n  return\n  \n  \n  \n  \n def render_image(self,name,stream):\n  if self.imagewriter is None :\n   return\n  PDFConverter.render_image(self,name,stream)\n  return\n  \n def paint_path(self,gstate,stroke,fill,evenodd,path):\n  return\n  \n  \n  \n  \nclass HTMLConverter(PDFConverter):\n\n RECT_COLORS={\n \n 'figure':'yellow',\n 'textline':'magenta',\n 'textbox':'cyan',\n 'textgroup':'red',\n 'curve':'black',\n 'page':'gray',\n }\n \n TEXT_COLORS={\n 'textbox':'blue',\n 'char':'black',\n }\n \n def __init__(self,rsrcmgr,outfp,pageno=1,laparams=None ,\n scale=1,fontscale=1.0,layoutmode='normal',showpageno=True ,\n pagemargin=50,imagewriter=None ,debug=0,\n rect_colors={'curve':'black','page':'gray'},\n text_colors={'char':'black'}):\n  PDFConverter.__init__(self,rsrcmgr,outfp,pageno=pageno,laparams=laparams)\n  self.scale=scale\n  self.fontscale=fontscale\n  self.layoutmode=layoutmode\n  self.showpageno=showpageno\n  self.pagemargin=pagemargin\n  self.imagewriter=imagewriter\n  self.rect_colors=rect_colors\n  self.text_colors=text_colors\n  if debug:\n   self.rect_colors.update(self.RECT_COLORS)\n   self.text_colors.update(self.TEXT_COLORS)\n  self._yoffset=self.pagemargin\n  self._font=None\n  self._fontstack=[]\n  self.write_header()\n  return\n  \n def write(self,text):\n  self.outfp.write(text)\n  return\n  \n def write_header(self):\n  self.write('<html><head>\\n')\n  self.write('<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\\n')\n  self.write('</head><body>\\n')\n  return\n  \n def write_footer(self):\n  self.write('<div style=\"position:absolute; top:0px;\">Page: %s</div>\\n'%\n  ', '.join('<a href=\"#%s\">%s</a>'%(i,i)for i in range(1,self.pageno)))\n  self.write('</body></html>\\n')\n  return\n  \n def write_text(self,text):\n  self.write(q(text))\n  return\n  \n def place_rect(self,color,borderwidth,x,y,w,h):\n  color=self.rect_colors.get(color)\n  if color is not None :\n   self.write('<span style=\"position:absolute; border: %s %dpx solid; '\n   'left:%dpx; top:%dpx; width:%dpx; height:%dpx;\"></span>\\n'%\n   (color,borderwidth,\n   x *self.scale,(self._yoffset -y)*self.scale,\n   w *self.scale,h *self.scale))\n  return\n  \n def place_border(self,color,borderwidth,item):\n  self.place_rect(color,borderwidth,item.x0,item.y1,item.width,item.height)\n  return\n  \n def place_image(self,item,borderwidth,x,y,w,h):\n  if self.imagewriter is not None :\n   name=self.imagewriter.export_image(item)\n   self.write('<img src=\"%s\" border=\"%d\" style=\"position:absolute; left:%dpx; top:%dpx;\" '\n   'width=\"%d\" height=\"%d\" />\\n'%\n   (q(name),borderwidth,\n   x *self.scale,(self._yoffset -y)*self.scale,\n   w *self.scale,h *self.scale))\n  return\n  \n def place_text(self,color,text,x,y,size):\n  color=self.text_colors.get(color)\n  if color is not None :\n   self.write('<span style=\"position:absolute; color:%s; left:%dpx; top:%dpx; font-size:%dpx;\">'%\n   (color,x *self.scale,(self._yoffset -y)*self.scale,size *self.scale *self.fontscale))\n   self.write_text(text)\n   self.write('</span>\\n')\n  return\n  \n def begin_div(self,color,borderwidth,x,y,w,h,writing_mode=False ):\n  self._fontstack.append(self._font)\n  self._font=None\n  self.write('<div style=\"position:absolute; border: %s %dpx solid; writing-mode:%s; '\n  'left:%dpx; top:%dpx; width:%dpx; height:%dpx;\">'%\n  (color,borderwidth,writing_mode,\n  x *self.scale,(self._yoffset -y)*self.scale,\n  w *self.scale,h *self.scale))\n  return\n  \n def end_div(self,color):\n  if self._font is not None :\n   self.write('</span>')\n  self._font=self._fontstack.pop()\n  self.write('</div>')\n  return\n  \n def put_text(self,text,fontname,fontsize):\n  font=(fontname,fontsize)\n  if font !=self._font:\n   if self._font is not None :\n    self.write('</span>')\n   self.write('<span style=\"font-family: %s; font-size:%dpx\">'%\n   (q(fontname),fontsize *self.scale *self.fontscale))\n   self._font=font\n  self.write_text(text)\n  return\n  \n def put_newline(self):\n  self.write('<br>')\n  return\n  \n def receive_layout(self,ltpage):\n  def show_group(item):\n   if isinstance(item,LTTextGroup):\n    self.place_border('textgroup',1,item)\n    for child in item:\n     show_group(child)\n   return\n   \n  def render(item):\n   if isinstance(item,LTPage):\n    self._yoffset +=item.y1\n    self.place_border('page',1,item)\n    if self.showpageno:\n     self.write('<div style=\"position:absolute; top:%dpx;\">'%\n     ((self._yoffset -item.y1)*self.scale))\n     self.write('<a name=\"%s\">Page %s</a></div>\\n'%(item.pageid,item.pageid))\n    for child in item:\n     render(child)\n    if item.groups is not None :\n     for group in item.groups:\n      show_group(group)\n   elif isinstance(item,LTCurve):\n    self.place_border('curve',1,item)\n   elif isinstance(item,LTFigure):\n    self.begin_div('figure',1,item.x0,item.y1,item.width,item.height)\n    for child in item:\n     render(child)\n    self.end_div('figure')\n   elif isinstance(item,LTImage):\n    self.place_image(item,1,item.x0,item.y1,item.width,item.height)\n   else :\n    if self.layoutmode =='exact':\n     if isinstance(item,LTTextLine):\n      self.place_border('textline',1,item)\n      for child in item:\n       render(child)\n     elif isinstance(item,LTTextBox):\n      self.place_border('textbox',1,item)\n      self.place_text('textbox',str(item.index+1),item.x0,item.y1,20)\n      for child in item:\n       render(child)\n     elif isinstance(item,LTChar):\n      self.place_border('char',1,item)\n      self.place_text('char',item.get_text(),item.x0,item.y1,item.size)\n    else :\n     if isinstance(item,LTTextLine):\n      for child in item:\n       render(child)\n      if self.layoutmode !='loose':\n       self.put_newline()\n     elif isinstance(item,LTTextBox):\n      self.begin_div('textbox',1,item.x0,item.y1,item.width,item.height,\n      item.get_writing_mode())\n      for child in item:\n       render(child)\n      self.end_div('textbox')\n     elif isinstance(item,LTChar):\n      self.put_text(item.get_text(),item.fontname,item.size)\n     elif isinstance(item,LTText):\n      self.write_text(item.get_text())\n   return\n  render(ltpage)\n  self._yoffset +=self.pagemargin\n  return\n  \n def close(self):\n  self.write_footer()\n  return\n  \n  \n  \n  \nclass XMLConverter(PDFConverter):\n\n CONTROL=re.compile(r'[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f]')\n \n def __init__(self,rsrcmgr,outfp,pageno=1,\n laparams=None ,imagewriter=None ,stripcontrol=False ):\n  PDFConverter.__init__(self,rsrcmgr,outfp,pageno=pageno,laparams=laparams)\n  self.imagewriter=imagewriter\n  self.stripcontrol=stripcontrol\n  self.write_header()\n  return\n  \n def write_header(self):\n  self.outfp.write('<?xml version=\"1.0\" encoding=\"utf-8\" ?>\\n')\n  self.outfp.write('<pages>\\n')\n  return\n  \n def write_footer(self):\n  self.outfp.write('</pages>\\n')\n  return\n  \n def write_text(self,text):\n  if self.stripcontrol:\n   text=self.CONTROL.sub(u'',text)\n  self.outfp.write(q(text))\n  return\n  \n def receive_layout(self,ltpage):\n  def show_group(item):\n   if isinstance(item,LTTextBox):\n    self.outfp.write('<textbox id=\"%d\" bbox=\"%s\" />\\n'%\n    (item.index,bbox2str(item.bbox)))\n   elif isinstance(item,LTTextGroup):\n    self.outfp.write('<textgroup bbox=\"%s\">\\n'%bbox2str(item.bbox))\n    for child in item:\n     show_group(child)\n    self.outfp.write('</textgroup>\\n')\n   return\n   \n  def render(item):\n   if isinstance(item,LTPage):\n    self.outfp.write('<page id=\"%s\" bbox=\"%s\" rotate=\"%d\">\\n'%\n    (item.pageid,bbox2str(item.bbox),item.rotate))\n    for child in item:\n     render(child)\n    if item.groups is not None :\n     self.outfp.write('<layout>\\n')\n     for group in item.groups:\n      show_group(group)\n     self.outfp.write('</layout>\\n')\n    self.outfp.write('</page>\\n')\n   elif isinstance(item,LTLine):\n    self.outfp.write('<line linewidth=\"%d\" bbox=\"%s\" />\\n'%\n    (item.linewidth,bbox2str(item.bbox)))\n   elif isinstance(item,LTRect):\n    self.outfp.write('<rect linewidth=\"%d\" bbox=\"%s\" />\\n'%\n    (item.linewidth,bbox2str(item.bbox)))\n   elif isinstance(item,LTCurve):\n    self.outfp.write('<curve linewidth=\"%d\" bbox=\"%s\" pts=\"%s\"/>\\n'%\n    (item.linewidth,bbox2str(item.bbox),item.get_pts()))\n   elif isinstance(item,LTFigure):\n    self.outfp.write('<figure name=\"%s\" bbox=\"%s\">\\n'%\n    (item.name,bbox2str(item.bbox)))\n    for child in item:\n     render(child)\n    self.outfp.write('</figure>\\n')\n   elif isinstance(item,LTTextLine):\n    self.outfp.write('<textline bbox=\"%s\">\\n'%bbox2str(item.bbox))\n    for child in item:\n     render(child)\n    self.outfp.write('</textline>\\n')\n   elif isinstance(item,LTTextBox):\n    wmode=''\n    if isinstance(item,LTTextBoxVertical):\n     wmode=' wmode=\"vertical\"'\n    self.outfp.write('<textbox id=\"%d\" bbox=\"%s\"%s>\\n'%\n    (item.index,bbox2str(item.bbox),wmode))\n    for child in item:\n     render(child)\n    self.outfp.write('</textbox>\\n')\n   elif isinstance(item,LTChar):\n    self.outfp.write('<text font=\"%s\" bbox=\"%s\" size=\"%.3f\">'%\n    (q(item.fontname),bbox2str(item.bbox),item.size))\n    self.write_text(item.get_text())\n    self.outfp.write('</text>\\n')\n   elif isinstance(item,LTText):\n    self.outfp.write('<text>%s</text>\\n'%item.get_text())\n   elif isinstance(item,LTImage):\n    if self.imagewriter is not None :\n     name=self.imagewriter.export_image(item)\n     self.outfp.write('<image src=\"%s\" width=\"%d\" height=\"%d\" />\\n'%\n     (q(name),item.width,item.height))\n    else :\n     self.outfp.write('<image width=\"%d\" height=\"%d\" />\\n'%\n     (item.width,item.height))\n   else :\n    assert 0,item\n   return\n  render(ltpage)\n  return\n  \n def close(self):\n  self.write_footer()\n  return\n", ["Lib.site-packages.pdfminer.layout", "Lib.site-packages.pdfminer.pdfdevice", "Lib.site-packages.pdfminer.pdffont", "Lib.site-packages.pdfminer.utils", "logging", "re"]], "Lib.site-packages.pdfminer": [".py", "#!/usr/bin/env python\n__version__='20191125'\n\nif __name__ =='__main__':\n print(__version__)\n", [], 1], "Lib.site-packages.pdfminer.arcfour": [".py", "#!/usr/bin/env python\n\n\"\"\" Python implementation of Arcfour encryption algorithm.\n\nThis code is in the public domain.\n\n\"\"\"\n\n\n\n\nclass Arcfour:\n\n ''\n\n\n\n\n\n\n \n \n def __init__(self,key):\n  s=list(range(256))\n  j=0\n  klen=len(key)\n  for i in range(256):\n   j=(j+s[i]+key[i %klen])%256\n   (s[i],s[j])=(s[j],s[i])\n  self.s=s\n  (self.i,self.j)=(0,0)\n  return\n  \n def process(self,data):\n  (i,j)=(self.i,self.j)\n  s=self.s\n  r=[]\n  for c in data:\n   i=(i+1)%256\n   j=(j+s[i])%256\n   (s[i],s[j])=(s[j],s[i])\n   k=s[(s[i]+s[j])%256]\n   r.append(c ^k)\n  (self.i,self.j)=(i,j)\n  return bytes(r)\n  \n encrypt=decrypt=process\n \nnew=Arcfour\n\n\nif __name__ =='__main__':\n import doctest\n print('pdfminer.arcfour:',doctest.testmod())\n", ["doctest"]], "Lib.site-packages.pdfminer.cmapdb": [".py", "#!/usr/bin/env python\n\n\"\"\" Adobe character mapping (CMap) support.\n\nCMaps provide the mapping between character codes and Unicode\ncode-points to character ids (CIDs).\n\nMore information is available on the Adobe website:\n\n  http://opensource.adobe.com/wiki/display/cmap/CMap+Resources\n\n\"\"\"\n\nimport sys\nimport os\nimport os.path\nimport gzip\nimport codecs\nimport marshal\nimport struct\nimport logging\nfrom .psparser import PSStackParser\nfrom .psparser import PSSyntaxError\nfrom .psparser import PSEOF\nfrom .psparser import PSLiteral\nfrom .psparser import literal_name\nfrom .psparser import KWD\nfrom .encodingdb import name2unicode\nfrom .utils import choplist\nfrom .utils import nunpack\n\n\nclass CMapError(Exception):\n pass\n \n \n \n \nclass CMapBase:\n\n debug=0\n \n def __init__(self,**kwargs):\n  self.attrs=kwargs.copy()\n  return\n  \n def is_vertical(self):\n  return self.attrs.get('WMode',0)!=0\n  \n def set_attr(self,k,v):\n  self.attrs[k]=v\n  return\n  \n def add_code2cid(self,code,cid):\n  return\n  \n def add_cid2unichr(self,cid,code):\n  return\n  \n def use_cmap(self,cmap):\n  return\n  \n  \n  \n  \nclass CMap(CMapBase):\n\n def __init__(self,**kwargs):\n  CMapBase.__init__(self,**kwargs)\n  self.code2cid={}\n  return\n  \n def __repr__(self):\n  return '<CMap: %s>'%self.attrs.get('CMapName')\n  \n def use_cmap(self,cmap):\n  assert isinstance(cmap,CMap)\n  \n  def copy(dst,src):\n   for (k,v)in src.items():\n    if isinstance(v,dict):\n     d={}\n     dst[k]=d\n     copy(d,v)\n    else :\n     dst[k]=v\n  copy(self.code2cid,cmap.code2cid)\n  return\n  \n def decode(self,code):\n  if self.debug:\n   logging.debug('decode: %r, %r'%(self,code))\n  d=self.code2cid\n  for c in code:\n   if c in d:\n    d=d[c]\n    if isinstance(d,int):\n     yield d\n     d=self.code2cid\n   else :\n    d=self.code2cid\n  return\n  \n def dump(self,out=sys.stdout,code2cid=None ,code=None ):\n  if code2cid is None :\n   code2cid=self.code2cid\n   code=()\n  for (k,v)in sorted(code2cid.items()):\n   c=code+(k,)\n   if isinstance(v,int):\n    out.write('code %r = cid %d\\n'%(c,v))\n   else :\n    self.dump(out=out,code2cid=v,code=c)\n  return\n  \n  \n  \n  \nclass IdentityCMap(CMapBase):\n\n def decode(self,code):\n  n=len(code)//2\n  if n:\n   return struct.unpack('>%dH'%n,code)\n  else :\n   return ()\n   \n   \n   \n   \nclass UnicodeMap(CMapBase):\n\n def __init__(self,**kwargs):\n  CMapBase.__init__(self,**kwargs)\n  self.cid2unichr={}\n  return\n  \n def __repr__(self):\n  return '<UnicodeMap: %s>'%self.attrs.get('CMapName')\n  \n def get_unichr(self,cid):\n  if self.debug:\n   logging.debug('get_unichr: %r, %r'%(self,cid))\n  return self.cid2unichr[cid]\n  \n def dump(self,out=sys.stdout):\n  for (k,v)in sorted(self.cid2unichr.items()):\n   out.write('cid %d = unicode %r\\n'%(k,v))\n  return\n  \n  \n  \n  \nclass FileCMap(CMap):\n\n def add_code2cid(self,code,cid):\n  assert isinstance(code,bytes)and isinstance(cid,int)\n  d=self.code2cid\n  for c in code[:-1]:\n   c=ord(c)\n   if c in d:\n    d=d[c]\n   else :\n    t={}\n    d[c]=t\n    d=t\n  c=ord(code[-1])\n  d[c]=cid\n  return\n  \n  \n  \n  \nclass FileUnicodeMap(UnicodeMap):\n\n def add_cid2unichr(self,cid,code):\n  assert isinstance(cid,int)\n  if isinstance(code,PSLiteral):\n  \n   self.cid2unichr[cid]=name2unicode(code.name)\n  elif isinstance(code,bytes):\n  \n   self.cid2unichr[cid]=code.decode('UTF-16BE','ignore')\n  elif isinstance(code,int):\n   self.cid2unichr[cid]=chr(code)\n  else :\n   raise TypeError(code)\n  return\n  \n  \n  \n  \nclass PyCMap(CMap):\n\n def __init__(self,name,module):\n  CMap.__init__(self,CMapName=name)\n  self.code2cid=module.CODE2CID\n  if module.IS_VERTICAL:\n   self.attrs['WMode']=1\n  return\n  \n  \n  \n  \nclass PyUnicodeMap(UnicodeMap):\n\n def __init__(self,name,module,vertical):\n  UnicodeMap.__init__(self,CMapName=name)\n  if vertical:\n   self.cid2unichr=module.CID2UNICHR_V\n   self.attrs['WMode']=1\n  else :\n   self.cid2unichr=module.CID2UNICHR_H\n  return\n  \n  \n  \n  \nclass CMapDB:\n\n _cmap_cache={}\n _umap_cache={}\n \n class CMapNotFound(CMapError):\n  pass\n  \n @classmethod\n def _load_data(klass,name):\n  filename='%s.marshal.gz'%name\n  logging.info('loading: %r'%name)\n  cmap_paths=(os.environ.get('CMAP_PATH','/usr/share/pdfminer/'),\n  os.path.join(os.path.dirname(__file__),'cmap'),)\n  for directory in cmap_paths:\n   path=os.path.join(directory,filename)\n   if os.path.exists(path):\n    gzfile=gzip.open(path)\n    try :\n     return type(str(name),(),marshal.loads(gzfile.read()))\n    finally :\n     gzfile.close()\n  else :\n   raise CMapDB.CMapNotFound(name)\n   \n @classmethod\n def get_cmap(klass,name):\n  if name =='Identity-H':\n   return IdentityCMap(WMode=0)\n  elif name =='Identity-V':\n   return IdentityCMap(WMode=1)\n  try :\n   return klass._cmap_cache[name]\n  except KeyError:\n   pass\n  data=klass._load_data(name)\n  klass._cmap_cache[name]=cmap=PyCMap(name,data)\n  return cmap\n  \n @classmethod\n def get_unicode_map(klass,name,vertical=False ):\n  try :\n   return klass._umap_cache[name][vertical]\n  except KeyError:\n   pass\n  data=klass._load_data('to-unicode-%s'%name)\n  klass._umap_cache[name]=umaps=[PyUnicodeMap(name,data,v)for v in (False ,True )]\n  return umaps[vertical]\n  \n  \n  \n  \nclass CMapParser(PSStackParser):\n\n def __init__(self,cmap,fp):\n  PSStackParser.__init__(self,fp)\n  self.cmap=cmap\n  \n  self._in_cmap=True\n  return\n  \n def run(self):\n  try :\n   self.nextobject()\n  except PSEOF:\n   pass\n  return\n  \n KEYWORD_BEGINCMAP=KWD(b'begincmap')\n KEYWORD_ENDCMAP=KWD(b'endcmap')\n KEYWORD_USECMAP=KWD(b'usecmap')\n KEYWORD_DEF=KWD(b'def')\n KEYWORD_BEGINCODESPACERANGE=KWD(b'begincodespacerange')\n KEYWORD_ENDCODESPACERANGE=KWD(b'endcodespacerange')\n KEYWORD_BEGINCIDRANGE=KWD(b'begincidrange')\n KEYWORD_ENDCIDRANGE=KWD(b'endcidrange')\n KEYWORD_BEGINCIDCHAR=KWD(b'begincidchar')\n KEYWORD_ENDCIDCHAR=KWD(b'endcidchar')\n KEYWORD_BEGINBFRANGE=KWD(b'beginbfrange')\n KEYWORD_ENDBFRANGE=KWD(b'endbfrange')\n KEYWORD_BEGINBFCHAR=KWD(b'beginbfchar')\n KEYWORD_ENDBFCHAR=KWD(b'endbfchar')\n KEYWORD_BEGINNOTDEFRANGE=KWD(b'beginnotdefrange')\n KEYWORD_ENDNOTDEFRANGE=KWD(b'endnotdefrange')\n \n def do_keyword(self,pos,token):\n  if token is self.KEYWORD_BEGINCMAP:\n   self._in_cmap=True\n   self.popall()\n   return\n  elif token is self.KEYWORD_ENDCMAP:\n   self._in_cmap=False\n   return\n  if not self._in_cmap:\n   return\n   \n  if token is self.KEYWORD_DEF:\n   try :\n    ((_,k),(_,v))=self.pop(2)\n    self.cmap.set_attr(literal_name(k),v)\n   except PSSyntaxError:\n    pass\n   return\n   \n  if token is self.KEYWORD_USECMAP:\n   try :\n    ((_,cmapname),)=self.pop(1)\n    self.cmap.use_cmap(CMapDB.get_cmap(literal_name(cmapname)))\n   except PSSyntaxError:\n    pass\n   except CMapDB.CMapNotFound:\n    pass\n   return\n   \n  if token is self.KEYWORD_BEGINCODESPACERANGE:\n   self.popall()\n   return\n  if token is self.KEYWORD_ENDCODESPACERANGE:\n   self.popall()\n   return\n   \n  if token is self.KEYWORD_BEGINCIDRANGE:\n   self.popall()\n   return\n  if token is self.KEYWORD_ENDCIDRANGE:\n   objs=[obj for (__,obj)in self.popall()]\n   for (s,e,cid)in choplist(3,objs):\n    if (not isinstance(s,bytes)or not isinstance(e,bytes)or\n    not isinstance(cid,int)or len(s)!=len(e)):\n     continue\n    sprefix=s[:-4]\n    eprefix=e[:-4]\n    if sprefix !=eprefix:\n     continue\n    svar=s[-4:]\n    evar=e[-4:]\n    s1=nunpack(svar)\n    e1=nunpack(evar)\n    vlen=len(svar)\n    \n    for i in range(e1 -s1+1):\n     x=sprefix+struct.pack('>L',s1+i)[-vlen:]\n     self.cmap.add_code2cid(x,cid+i)\n   return\n   \n  if token is self.KEYWORD_BEGINCIDCHAR:\n   self.popall()\n   return\n  if token is self.KEYWORD_ENDCIDCHAR:\n   objs=[obj for (__,obj)in self.popall()]\n   for (cid,code)in choplist(2,objs):\n    if isinstance(code,bytes)and isinstance(cid,bytes):\n     self.cmap.add_code2cid(code,nunpack(cid))\n   return\n   \n  if token is self.KEYWORD_BEGINBFRANGE:\n   self.popall()\n   return\n  if token is self.KEYWORD_ENDBFRANGE:\n   objs=[obj for (__,obj)in self.popall()]\n   for (s,e,code)in choplist(3,objs):\n    if (not isinstance(s,bytes)or not isinstance(e,bytes)or\n    len(s)!=len(e)):\n     continue\n    s1=nunpack(s)\n    e1=nunpack(e)\n    \n    if isinstance(code,list):\n     for i in range(e1 -s1+1):\n      self.cmap.add_cid2unichr(s1+i,code[i])\n    else :\n     var=code[-4:]\n     base=nunpack(var)\n     prefix=code[:-4]\n     vlen=len(var)\n     for i in range(e1 -s1+1):\n      x=prefix+struct.pack('>L',base+i)[-vlen:]\n      self.cmap.add_cid2unichr(s1+i,x)\n   return\n   \n  if token is self.KEYWORD_BEGINBFCHAR:\n   self.popall()\n   return\n  if token is self.KEYWORD_ENDBFCHAR:\n   objs=[obj for (__,obj)in self.popall()]\n   for (cid,code)in choplist(2,objs):\n    if isinstance(cid,bytes)and isinstance(code,bytes):\n     self.cmap.add_cid2unichr(nunpack(cid),code)\n   return\n   \n  if token is self.KEYWORD_BEGINNOTDEFRANGE:\n   self.popall()\n   return\n  if token is self.KEYWORD_ENDNOTDEFRANGE:\n   self.popall()\n   return\n   \n  self.push((pos,token))\n  return\n  \n  \n  \n  \nclass CMapConverter:\n\n def __init__(self,enc2codec={}):\n  self.enc2codec=enc2codec\n  self.code2cid={}\n  self.is_vertical={}\n  self.cid2unichr_h={}\n  self.cid2unichr_v={}\n  return\n  \n def get_encs(self):\n  return self.code2cid.keys()\n  \n def get_maps(self,enc):\n  if enc.endswith('-H'):\n   (hmapenc,vmapenc)=(enc,None )\n  elif enc =='H':\n   (hmapenc,vmapenc)=('H','V')\n  else :\n   (hmapenc,vmapenc)=(enc+'-H',enc+'-V')\n  if hmapenc in self.code2cid:\n   hmap=self.code2cid[hmapenc]\n  else :\n   hmap={}\n   self.code2cid[hmapenc]=hmap\n  vmap=None\n  if vmapenc:\n   self.is_vertical[vmapenc]=True\n   if vmapenc in self.code2cid:\n    vmap=self.code2cid[vmapenc]\n   else :\n    vmap={}\n    self.code2cid[vmapenc]=vmap\n  return (hmap,vmap)\n  \n def load(self,fp):\n  encs=None\n  for line in fp:\n   (line,_,_)=line.strip().partition('#')\n   if not line:continue\n   values=line.split('\\t')\n   if encs is None :\n    assert values[0]=='CID'\n    encs=values\n    continue\n    \n   def put(dmap,code,cid,force=False ):\n    for b in code[:-1]:\n     if b in dmap:\n      dmap=dmap[b]\n     else :\n      d={}\n      dmap[b]=d\n      dmap=d\n    b=code[-1]\n    if force or ((b not in dmap)or dmap[b]==cid):\n     dmap[b]=cid\n    return\n    \n   def add(unimap,enc,code):\n    try :\n     codec=self.enc2codec[enc]\n     c=code.decode(codec,'strict')\n     if len(c)==1:\n      if c not in unimap:\n       unimap[c]=0\n      unimap[c]+=1\n    except KeyError:\n     pass\n    except UnicodeError:\n     pass\n    return\n    \n   def pick(unimap):\n    chars=sorted(\n    unimap.items(),\n    key=(lambda x:(x[1],-ord(x[0]))),reverse=True )\n    (c,_)=chars[0]\n    return c\n    \n   cid=int(values[0])\n   unimap_h={}\n   unimap_v={}\n   for (enc,value)in zip(encs,values):\n    if enc =='CID':continue\n    if value =='*':continue\n    \n    \n    hcodes=[]\n    vcodes=[]\n    for code in value.split(','):\n     vertical=code.endswith('v')\n     if vertical:\n      code=code[:-1]\n     try :\n      code=codecs.decode(code,'hex')\n     except :\n      code=bytes([int(code,16)])\n     if vertical:\n      vcodes.append(code)\n      add(unimap_v,enc,code)\n     else :\n      hcodes.append(code)\n      add(unimap_h,enc,code)\n      \n    (hmap,vmap)=self.get_maps(enc)\n    if vcodes:\n     assert vmap is not None\n     for code in vcodes:\n      put(vmap,code,cid,True )\n     for code in hcodes:\n      put(hmap,code,cid,True )\n    else :\n     for code in hcodes:\n      put(hmap,code,cid)\n      put(vmap,code,cid)\n      \n      \n   if unimap_h:\n    self.cid2unichr_h[cid]=pick(unimap_h)\n   if unimap_v or unimap_h:\n    self.cid2unichr_v[cid]=pick(unimap_v or unimap_h)\n    \n  return\n  \n def dump_cmap(self,fp,enc):\n  data=dict(\n  IS_VERTICAL=self.is_vertical.get(enc,False ),\n  CODE2CID=self.code2cid.get(enc),\n  )\n  fp.write(marshal.dumps(data))\n  return\n  \n def dump_unicodemap(self,fp):\n  data=dict(\n  CID2UNICHR_H=self.cid2unichr_h,\n  CID2UNICHR_V=self.cid2unichr_v,\n  )\n  fp.write(marshal.dumps(data))\n  return\n  \n  \ndef convert_cmap(outdir,regname,enc2codec,paths):\n converter=CMapConverter(enc2codec)\n \n for path in paths:\n  print('reading: %r...'%path)\n  with open(path)as fp:\n   converter.load(fp)\n   \n files=[]\n for enc in converter.get_encs():\n  fname='%s.marshal.gz'%enc\n  path=os.path.join(outdir,fname)\n  print('writing: %r...'%path)\n  with gzip.open(path,'wb')as fp:\n   converter.dump_cmap(fp,enc)\n  files.append(path)\n  \n fname='to-unicode-%s.marshal.gz'%regname\n path=os.path.join(outdir,fname)\n print('writing: %r...'%path)\n with gzip.open(path,'wb')as fp:\n  converter.dump_unicodemap(fp)\n files.append(path)\n return files\n \n \n \ndef main(argv):\n args=argv[1:]\n for fname in args:\n  with open(fname,'rb')as fp:\n   cmap=FileUnicodeMap()\n   \n   CMapParser(cmap,fp).run()\n   cmap.dump()\n return\n \nif __name__ =='__main__':\n sys.exit(main(sys.argv))\n", ["Lib.site-packages.pdfminer.encodingdb", "Lib.site-packages.pdfminer.psparser", "Lib.site-packages.pdfminer.utils", "codecs", "gzip", "logging", "marshal", "os", "os.path", "struct", "sys"]], "Lib.site-packages.pdfminer.pdfdevice": [".py", "#!/usr/bin/env python\nfrom .utils import mult_matrix\nfrom .utils import translate_matrix\nfrom .utils import q\nfrom .utils import bbox2str\nfrom .utils import isnumber\nfrom .pdffont import PDFUnicodeNotDefined\n\n\n\n\nclass PDFDevice:\n\n def __init__(self,rsrcmgr):\n  self.rsrcmgr=rsrcmgr\n  self.ctm=None\n  return\n  \n def __repr__(self):\n  return '<PDFDevice>'\n  \n def close(self):\n  return\n  \n def set_ctm(self,ctm):\n  self.ctm=ctm\n  return\n  \n def begin_tag(self,tag,props=None ):\n  return\n  \n def end_tag(self):\n  return\n  \n def do_tag(self,tag,props=None ):\n  return\n  \n def begin_page(self,page,ctm):\n  return\n  \n def end_page(self,page):\n  return\n  \n def begin_figure(self,name,bbox,matrix):\n  return\n  \n def end_figure(self,name):\n  return\n  \n def paint_path(self,graphicstate,stroke,fill,evenodd,path):\n  return\n  \n def render_image(self,name,stream):\n  return\n  \n def render_string(self,textstate,seq):\n  return\n  \n  \n  \n  \nclass PDFTextDevice(PDFDevice):\n\n def render_string(self,textstate,seq):\n  matrix=mult_matrix(textstate.matrix,self.ctm)\n  font=textstate.font\n  fontsize=textstate.fontsize\n  scaling=textstate.scaling *.01\n  charspace=textstate.charspace *scaling\n  wordspace=textstate.wordspace *scaling\n  rise=textstate.rise\n  if font.is_multibyte():\n   wordspace=0\n  dxscale=.001 *fontsize *scaling\n  if font.is_vertical():\n   textstate.linematrix=self.render_string_vertical(\n   seq,matrix,textstate.linematrix,font,fontsize,\n   scaling,charspace,wordspace,rise,dxscale)\n  else :\n   textstate.linematrix=self.render_string_horizontal(\n   seq,matrix,textstate.linematrix,font,fontsize,\n   scaling,charspace,wordspace,rise,dxscale)\n  return\n  \n def render_string_horizontal(self,seq,matrix,pos,\n font,fontsize,scaling,charspace,wordspace,rise,dxscale):\n  (x,y)=pos\n  needcharspace=False\n  for obj in seq:\n   if isnumber(obj):\n    x -=obj *dxscale\n    needcharspace=True\n   else :\n    for cid in font.decode(obj):\n     if needcharspace:\n      x +=charspace\n     x +=self.render_char(translate_matrix(matrix,(x,y)),\n     font,fontsize,scaling,rise,cid)\n     if cid ==32 and wordspace:\n      x +=wordspace\n     needcharspace=True\n  return (x,y)\n  \n def render_string_vertical(self,seq,matrix,pos,\n font,fontsize,scaling,charspace,wordspace,rise,dxscale):\n  (x,y)=pos\n  needcharspace=False\n  for obj in seq:\n   if isnumber(obj):\n    y -=obj *dxscale\n    needcharspace=True\n   else :\n    for cid in font.decode(obj):\n     if needcharspace:\n      y +=charspace\n     y +=self.render_char(translate_matrix(matrix,(x,y)),\n     font,fontsize,scaling,rise,cid)\n     if cid ==32 and wordspace:\n      y +=wordspace\n     needcharspace=True\n  return (x,y)\n  \n def render_char(self,matrix,font,fontsize,scaling,rise,cid):\n  return 0\n  \n  \n  \n  \nclass TagExtractor(PDFDevice):\n\n def __init__(self,rsrcmgr,outfp):\n  PDFDevice.__init__(self,rsrcmgr)\n  self.outfp=outfp\n  self.pageno=0\n  self._stack=[]\n  return\n  \n def render_string(self,textstate,seq):\n  font=textstate.font\n  text=''\n  for obj in seq:\n   if not isinstance(obj,bytes):\n    continue\n   chars=font.decode(obj)\n   for cid in chars:\n    try :\n     char=font.to_unichr(cid)\n     text +=char\n    except PDFUnicodeNotDefined:\n     pass\n  self.outfp.write(q(text))\n  return\n  \n def begin_page(self,page,ctm):\n  self.outfp.write('<page id=\"%s\" bbox=\"%s\" rotate=\"%d\">'%\n  (self.pageno,bbox2str(page.mediabox),page.rotate))\n  return\n  \n def end_page(self,page):\n  self.outfp.write('</page>\\n')\n  self.pageno +=1\n  return\n  \n def begin_tag(self,tag,props=None ):\n  s=''\n  if isinstance(props,dict):\n   s=''.join(' %s=\"%s\"'%(q(k),q(str(v)))for (k,v)\n   in sorted(props.items()))\n  self.outfp.write('<%s%s>'%(q(tag.name),s))\n  self._stack.append(tag)\n  return\n  \n def end_tag(self):\n  assert self._stack\n  tag=self._stack.pop(-1)\n  self.outfp.write('</%s>'%q(tag.name))\n  return\n  \n def do_tag(self,tag,props=None ):\n  self.begin_tag(tag,props)\n  self._stack.pop(-1)\n  return\n", ["Lib.site-packages.pdfminer.pdffont", "Lib.site-packages.pdfminer.utils"]], "Lib.site-packages.pdfminer.fontmetrics": [".py", "#!/usr/bin/env python\n\n\"\"\" Font metrics for the Adobe core 14 fonts.\n\nFont metrics are used to compute the boundary of each character\nwritten with a proportional font.\n\nThe following data were extracted from the AFM files:\n\n  http://www.ctan.org/tex-archive/fonts/adobe/afm/\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFONT_METRICS={\n'Courier':({'FontName':'Courier','Descent':-194.0,'FontBBox':(-6.0,-249.0,639.0,803.0),'FontWeight':'Medium','CapHeight':572.0,'FontFamily':'Courier','Flags':64,'XHeight':434.0,'ItalicAngle':0.0,'Ascent':627.0},{u' ':600,u'!':600,u'\"':600,u'#':600,u'$':600,u'%':600,u'&':600,u\"'\":600,u'(':600,u')':600,u'*':600,u'+':600,u',':600,u'-':600,u'.':600,u'/':600,u'0':600,u'1':600,u'2':600,u'3':600,u'4':600,u'5':600,u'6':600,u'7':600,u'8':600,u'9':600,u':':600,u';':600,u'<':600,u'=':600,u'>':600,u'?':600,u'@':600,u'A':600,u'B':600,u'C':600,u'D':600,u'E':600,u'F':600,u'G':600,u'H':600,u'I':600,u'J':600,u'K':600,u'L':600,u'M':600,u'N':600,u'O':600,u'P':600,u'Q':600,u'R':600,u'S':600,u'T':600,u'U':600,u'V':600,u'W':600,u'X':600,u'Y':600,u'Z':600,u'[':600,u'\\\\':600,u']':600,u'^':600,u'_':600,u'`':600,u'a':600,u'b':600,u'c':600,u'd':600,u'e':600,u'f':600,u'g':600,u'h':600,u'i':600,u'j':600,u'k':600,u'l':600,u'm':600,u'n':600,u'o':600,u'p':600,u'q':600,u'r':600,u's':600,u't':600,u'u':600,u'v':600,u'w':600,u'x':600,u'y':600,u'z':600,u'{':600,u'|':600,u'}':600,u'~':600,u'\\xa1':600,u'\\xa2':600,u'\\xa3':600,u'\\xa4':600,u'\\xa5':600,u'\\xa6':600,u'\\xa7':600,u'\\xa8':600,u'\\xa9':600,u'\\xaa':600,u'\\xab':600,u'\\xac':600,u'\\xae':600,u'\\xaf':600,u'\\xb0':600,u'\\xb1':600,u'\\xb2':600,u'\\xb3':600,u'\\xb4':600,u'\\xb5':600,u'\\xb6':600,u'\\xb7':600,u'\\xb8':600,u'\\xb9':600,u'\\xba':600,u'\\xbb':600,u'\\xbc':600,u'\\xbd':600,u'\\xbe':600,u'\\xbf':600,u'\\xc0':600,u'\\xc1':600,u'\\xc2':600,u'\\xc3':600,u'\\xc4':600,u'\\xc5':600,u'\\xc6':600,u'\\xc7':600,u'\\xc8':600,u'\\xc9':600,u'\\xca':600,u'\\xcb':600,u'\\xcc':600,u'\\xcd':600,u'\\xce':600,u'\\xcf':600,u'\\xd0':600,u'\\xd1':600,u'\\xd2':600,u'\\xd3':600,u'\\xd4':600,u'\\xd5':600,u'\\xd6':600,u'\\xd7':600,u'\\xd8':600,u'\\xd9':600,u'\\xda':600,u'\\xdb':600,u'\\xdc':600,u'\\xdd':600,u'\\xde':600,u'\\xdf':600,u'\\xe0':600,u'\\xe1':600,u'\\xe2':600,u'\\xe3':600,u'\\xe4':600,u'\\xe5':600,u'\\xe6':600,u'\\xe7':600,u'\\xe8':600,u'\\xe9':600,u'\\xea':600,u'\\xeb':600,u'\\xec':600,u'\\xed':600,u'\\xee':600,u'\\xef':600,u'\\xf0':600,u'\\xf1':600,u'\\xf2':600,u'\\xf3':600,u'\\xf4':600,u'\\xf5':600,u'\\xf6':600,u'\\xf7':600,u'\\xf8':600,u'\\xf9':600,u'\\xfa':600,u'\\xfb':600,u'\\xfc':600,u'\\xfd':600,u'\\xfe':600,u'\\xff':600,u'\\u0100':600,u'\\u0101':600,u'\\u0102':600,u'\\u0103':600,u'\\u0104':600,u'\\u0105':600,u'\\u0106':600,u'\\u0107':600,u'\\u010c':600,u'\\u010d':600,u'\\u010e':600,u'\\u010f':600,u'\\u0110':600,u'\\u0111':600,u'\\u0112':600,u'\\u0113':600,u'\\u0116':600,u'\\u0117':600,u'\\u0118':600,u'\\u0119':600,u'\\u011a':600,u'\\u011b':600,u'\\u011e':600,u'\\u011f':600,u'\\u0122':600,u'\\u0123':600,u'\\u012a':600,u'\\u012b':600,u'\\u012e':600,u'\\u012f':600,u'\\u0130':600,u'\\u0131':600,u'\\u0136':600,u'\\u0137':600,u'\\u0139':600,u'\\u013a':600,u'\\u013b':600,u'\\u013c':600,u'\\u013d':600,u'\\u013e':600,u'\\u0141':600,u'\\u0142':600,u'\\u0143':600,u'\\u0144':600,u'\\u0145':600,u'\\u0146':600,u'\\u0147':600,u'\\u0148':600,u'\\u014c':600,u'\\u014d':600,u'\\u0150':600,u'\\u0151':600,u'\\u0152':600,u'\\u0153':600,u'\\u0154':600,u'\\u0155':600,u'\\u0156':600,u'\\u0157':600,u'\\u0158':600,u'\\u0159':600,u'\\u015a':600,u'\\u015b':600,u'\\u015e':600,u'\\u015f':600,u'\\u0160':600,u'\\u0161':600,u'\\u0162':600,u'\\u0163':600,u'\\u0164':600,u'\\u0165':600,u'\\u016a':600,u'\\u016b':600,u'\\u016e':600,u'\\u016f':600,u'\\u0170':600,u'\\u0171':600,u'\\u0172':600,u'\\u0173':600,u'\\u0178':600,u'\\u0179':600,u'\\u017a':600,u'\\u017b':600,u'\\u017c':600,u'\\u017d':600,u'\\u017e':600,u'\\u0192':600,u'\\u0218':600,u'\\u0219':600,u'\\u02c6':600,u'\\u02c7':600,u'\\u02d8':600,u'\\u02d9':600,u'\\u02da':600,u'\\u02db':600,u'\\u02dc':600,u'\\u02dd':600,u'\\u2013':600,u'\\u2014':600,u'\\u2018':600,u'\\u2019':600,u'\\u201a':600,u'\\u201c':600,u'\\u201d':600,u'\\u201e':600,u'\\u2020':600,u'\\u2021':600,u'\\u2022':600,u'\\u2026':600,u'\\u2030':600,u'\\u2039':600,u'\\u203a':600,u'\\u2044':600,u'\\u2122':600,u'\\u2202':600,u'\\u2206':600,u'\\u2211':600,u'\\u2212':600,u'\\u221a':600,u'\\u2260':600,u'\\u2264':600,u'\\u2265':600,u'\\u25ca':600,u'\\uf6c3':600,u'\\ufb01':600,u'\\ufb02':600}),\n'Courier-Bold':({'FontName':'Courier-Bold','Descent':-194.0,'FontBBox':(-88.0,-249.0,697.0,811.0),'FontWeight':'Bold','CapHeight':572.0,'FontFamily':'Courier','Flags':64,'XHeight':434.0,'ItalicAngle':0.0,'Ascent':627.0},{u' ':600,u'!':600,u'\"':600,u'#':600,u'$':600,u'%':600,u'&':600,u\"'\":600,u'(':600,u')':600,u'*':600,u'+':600,u',':600,u'-':600,u'.':600,u'/':600,u'0':600,u'1':600,u'2':600,u'3':600,u'4':600,u'5':600,u'6':600,u'7':600,u'8':600,u'9':600,u':':600,u';':600,u'<':600,u'=':600,u'>':600,u'?':600,u'@':600,u'A':600,u'B':600,u'C':600,u'D':600,u'E':600,u'F':600,u'G':600,u'H':600,u'I':600,u'J':600,u'K':600,u'L':600,u'M':600,u'N':600,u'O':600,u'P':600,u'Q':600,u'R':600,u'S':600,u'T':600,u'U':600,u'V':600,u'W':600,u'X':600,u'Y':600,u'Z':600,u'[':600,u'\\\\':600,u']':600,u'^':600,u'_':600,u'`':600,u'a':600,u'b':600,u'c':600,u'd':600,u'e':600,u'f':600,u'g':600,u'h':600,u'i':600,u'j':600,u'k':600,u'l':600,u'm':600,u'n':600,u'o':600,u'p':600,u'q':600,u'r':600,u's':600,u't':600,u'u':600,u'v':600,u'w':600,u'x':600,u'y':600,u'z':600,u'{':600,u'|':600,u'}':600,u'~':600,u'\\xa1':600,u'\\xa2':600,u'\\xa3':600,u'\\xa4':600,u'\\xa5':600,u'\\xa6':600,u'\\xa7':600,u'\\xa8':600,u'\\xa9':600,u'\\xaa':600,u'\\xab':600,u'\\xac':600,u'\\xae':600,u'\\xaf':600,u'\\xb0':600,u'\\xb1':600,u'\\xb2':600,u'\\xb3':600,u'\\xb4':600,u'\\xb5':600,u'\\xb6':600,u'\\xb7':600,u'\\xb8':600,u'\\xb9':600,u'\\xba':600,u'\\xbb':600,u'\\xbc':600,u'\\xbd':600,u'\\xbe':600,u'\\xbf':600,u'\\xc0':600,u'\\xc1':600,u'\\xc2':600,u'\\xc3':600,u'\\xc4':600,u'\\xc5':600,u'\\xc6':600,u'\\xc7':600,u'\\xc8':600,u'\\xc9':600,u'\\xca':600,u'\\xcb':600,u'\\xcc':600,u'\\xcd':600,u'\\xce':600,u'\\xcf':600,u'\\xd0':600,u'\\xd1':600,u'\\xd2':600,u'\\xd3':600,u'\\xd4':600,u'\\xd5':600,u'\\xd6':600,u'\\xd7':600,u'\\xd8':600,u'\\xd9':600,u'\\xda':600,u'\\xdb':600,u'\\xdc':600,u'\\xdd':600,u'\\xde':600,u'\\xdf':600,u'\\xe0':600,u'\\xe1':600,u'\\xe2':600,u'\\xe3':600,u'\\xe4':600,u'\\xe5':600,u'\\xe6':600,u'\\xe7':600,u'\\xe8':600,u'\\xe9':600,u'\\xea':600,u'\\xeb':600,u'\\xec':600,u'\\xed':600,u'\\xee':600,u'\\xef':600,u'\\xf0':600,u'\\xf1':600,u'\\xf2':600,u'\\xf3':600,u'\\xf4':600,u'\\xf5':600,u'\\xf6':600,u'\\xf7':600,u'\\xf8':600,u'\\xf9':600,u'\\xfa':600,u'\\xfb':600,u'\\xfc':600,u'\\xfd':600,u'\\xfe':600,u'\\xff':600,u'\\u0100':600,u'\\u0101':600,u'\\u0102':600,u'\\u0103':600,u'\\u0104':600,u'\\u0105':600,u'\\u0106':600,u'\\u0107':600,u'\\u010c':600,u'\\u010d':600,u'\\u010e':600,u'\\u010f':600,u'\\u0110':600,u'\\u0111':600,u'\\u0112':600,u'\\u0113':600,u'\\u0116':600,u'\\u0117':600,u'\\u0118':600,u'\\u0119':600,u'\\u011a':600,u'\\u011b':600,u'\\u011e':600,u'\\u011f':600,u'\\u0122':600,u'\\u0123':600,u'\\u012a':600,u'\\u012b':600,u'\\u012e':600,u'\\u012f':600,u'\\u0130':600,u'\\u0131':600,u'\\u0136':600,u'\\u0137':600,u'\\u0139':600,u'\\u013a':600,u'\\u013b':600,u'\\u013c':600,u'\\u013d':600,u'\\u013e':600,u'\\u0141':600,u'\\u0142':600,u'\\u0143':600,u'\\u0144':600,u'\\u0145':600,u'\\u0146':600,u'\\u0147':600,u'\\u0148':600,u'\\u014c':600,u'\\u014d':600,u'\\u0150':600,u'\\u0151':600,u'\\u0152':600,u'\\u0153':600,u'\\u0154':600,u'\\u0155':600,u'\\u0156':600,u'\\u0157':600,u'\\u0158':600,u'\\u0159':600,u'\\u015a':600,u'\\u015b':600,u'\\u015e':600,u'\\u015f':600,u'\\u0160':600,u'\\u0161':600,u'\\u0162':600,u'\\u0163':600,u'\\u0164':600,u'\\u0165':600,u'\\u016a':600,u'\\u016b':600,u'\\u016e':600,u'\\u016f':600,u'\\u0170':600,u'\\u0171':600,u'\\u0172':600,u'\\u0173':600,u'\\u0178':600,u'\\u0179':600,u'\\u017a':600,u'\\u017b':600,u'\\u017c':600,u'\\u017d':600,u'\\u017e':600,u'\\u0192':600,u'\\u0218':600,u'\\u0219':600,u'\\u02c6':600,u'\\u02c7':600,u'\\u02d8':600,u'\\u02d9':600,u'\\u02da':600,u'\\u02db':600,u'\\u02dc':600,u'\\u02dd':600,u'\\u2013':600,u'\\u2014':600,u'\\u2018':600,u'\\u2019':600,u'\\u201a':600,u'\\u201c':600,u'\\u201d':600,u'\\u201e':600,u'\\u2020':600,u'\\u2021':600,u'\\u2022':600,u'\\u2026':600,u'\\u2030':600,u'\\u2039':600,u'\\u203a':600,u'\\u2044':600,u'\\u2122':600,u'\\u2202':600,u'\\u2206':600,u'\\u2211':600,u'\\u2212':600,u'\\u221a':600,u'\\u2260':600,u'\\u2264':600,u'\\u2265':600,u'\\u25ca':600,u'\\uf6c3':600,u'\\ufb01':600,u'\\ufb02':600}),\n'Courier-BoldOblique':({'FontName':'Courier-BoldOblique','Descent':-194.0,'FontBBox':(-49.0,-249.0,758.0,811.0),'FontWeight':'Bold','CapHeight':572.0,'FontFamily':'Courier','Flags':64,'XHeight':434.0,'ItalicAngle':-11.0,'Ascent':627.0},{u' ':600,u'!':600,u'\"':600,u'#':600,u'$':600,u'%':600,u'&':600,u\"'\":600,u'(':600,u')':600,u'*':600,u'+':600,u',':600,u'-':600,u'.':600,u'/':600,u'0':600,u'1':600,u'2':600,u'3':600,u'4':600,u'5':600,u'6':600,u'7':600,u'8':600,u'9':600,u':':600,u';':600,u'<':600,u'=':600,u'>':600,u'?':600,u'@':600,u'A':600,u'B':600,u'C':600,u'D':600,u'E':600,u'F':600,u'G':600,u'H':600,u'I':600,u'J':600,u'K':600,u'L':600,u'M':600,u'N':600,u'O':600,u'P':600,u'Q':600,u'R':600,u'S':600,u'T':600,u'U':600,u'V':600,u'W':600,u'X':600,u'Y':600,u'Z':600,u'[':600,u'\\\\':600,u']':600,u'^':600,u'_':600,u'`':600,u'a':600,u'b':600,u'c':600,u'd':600,u'e':600,u'f':600,u'g':600,u'h':600,u'i':600,u'j':600,u'k':600,u'l':600,u'm':600,u'n':600,u'o':600,u'p':600,u'q':600,u'r':600,u's':600,u't':600,u'u':600,u'v':600,u'w':600,u'x':600,u'y':600,u'z':600,u'{':600,u'|':600,u'}':600,u'~':600,u'\\xa1':600,u'\\xa2':600,u'\\xa3':600,u'\\xa4':600,u'\\xa5':600,u'\\xa6':600,u'\\xa7':600,u'\\xa8':600,u'\\xa9':600,u'\\xaa':600,u'\\xab':600,u'\\xac':600,u'\\xae':600,u'\\xaf':600,u'\\xb0':600,u'\\xb1':600,u'\\xb2':600,u'\\xb3':600,u'\\xb4':600,u'\\xb5':600,u'\\xb6':600,u'\\xb7':600,u'\\xb8':600,u'\\xb9':600,u'\\xba':600,u'\\xbb':600,u'\\xbc':600,u'\\xbd':600,u'\\xbe':600,u'\\xbf':600,u'\\xc0':600,u'\\xc1':600,u'\\xc2':600,u'\\xc3':600,u'\\xc4':600,u'\\xc5':600,u'\\xc6':600,u'\\xc7':600,u'\\xc8':600,u'\\xc9':600,u'\\xca':600,u'\\xcb':600,u'\\xcc':600,u'\\xcd':600,u'\\xce':600,u'\\xcf':600,u'\\xd0':600,u'\\xd1':600,u'\\xd2':600,u'\\xd3':600,u'\\xd4':600,u'\\xd5':600,u'\\xd6':600,u'\\xd7':600,u'\\xd8':600,u'\\xd9':600,u'\\xda':600,u'\\xdb':600,u'\\xdc':600,u'\\xdd':600,u'\\xde':600,u'\\xdf':600,u'\\xe0':600,u'\\xe1':600,u'\\xe2':600,u'\\xe3':600,u'\\xe4':600,u'\\xe5':600,u'\\xe6':600,u'\\xe7':600,u'\\xe8':600,u'\\xe9':600,u'\\xea':600,u'\\xeb':600,u'\\xec':600,u'\\xed':600,u'\\xee':600,u'\\xef':600,u'\\xf0':600,u'\\xf1':600,u'\\xf2':600,u'\\xf3':600,u'\\xf4':600,u'\\xf5':600,u'\\xf6':600,u'\\xf7':600,u'\\xf8':600,u'\\xf9':600,u'\\xfa':600,u'\\xfb':600,u'\\xfc':600,u'\\xfd':600,u'\\xfe':600,u'\\xff':600,u'\\u0100':600,u'\\u0101':600,u'\\u0102':600,u'\\u0103':600,u'\\u0104':600,u'\\u0105':600,u'\\u0106':600,u'\\u0107':600,u'\\u010c':600,u'\\u010d':600,u'\\u010e':600,u'\\u010f':600,u'\\u0110':600,u'\\u0111':600,u'\\u0112':600,u'\\u0113':600,u'\\u0116':600,u'\\u0117':600,u'\\u0118':600,u'\\u0119':600,u'\\u011a':600,u'\\u011b':600,u'\\u011e':600,u'\\u011f':600,u'\\u0122':600,u'\\u0123':600,u'\\u012a':600,u'\\u012b':600,u'\\u012e':600,u'\\u012f':600,u'\\u0130':600,u'\\u0131':600,u'\\u0136':600,u'\\u0137':600,u'\\u0139':600,u'\\u013a':600,u'\\u013b':600,u'\\u013c':600,u'\\u013d':600,u'\\u013e':600,u'\\u0141':600,u'\\u0142':600,u'\\u0143':600,u'\\u0144':600,u'\\u0145':600,u'\\u0146':600,u'\\u0147':600,u'\\u0148':600,u'\\u014c':600,u'\\u014d':600,u'\\u0150':600,u'\\u0151':600,u'\\u0152':600,u'\\u0153':600,u'\\u0154':600,u'\\u0155':600,u'\\u0156':600,u'\\u0157':600,u'\\u0158':600,u'\\u0159':600,u'\\u015a':600,u'\\u015b':600,u'\\u015e':600,u'\\u015f':600,u'\\u0160':600,u'\\u0161':600,u'\\u0162':600,u'\\u0163':600,u'\\u0164':600,u'\\u0165':600,u'\\u016a':600,u'\\u016b':600,u'\\u016e':600,u'\\u016f':600,u'\\u0170':600,u'\\u0171':600,u'\\u0172':600,u'\\u0173':600,u'\\u0178':600,u'\\u0179':600,u'\\u017a':600,u'\\u017b':600,u'\\u017c':600,u'\\u017d':600,u'\\u017e':600,u'\\u0192':600,u'\\u0218':600,u'\\u0219':600,u'\\u02c6':600,u'\\u02c7':600,u'\\u02d8':600,u'\\u02d9':600,u'\\u02da':600,u'\\u02db':600,u'\\u02dc':600,u'\\u02dd':600,u'\\u2013':600,u'\\u2014':600,u'\\u2018':600,u'\\u2019':600,u'\\u201a':600,u'\\u201c':600,u'\\u201d':600,u'\\u201e':600,u'\\u2020':600,u'\\u2021':600,u'\\u2022':600,u'\\u2026':600,u'\\u2030':600,u'\\u2039':600,u'\\u203a':600,u'\\u2044':600,u'\\u2122':600,u'\\u2202':600,u'\\u2206':600,u'\\u2211':600,u'\\u2212':600,u'\\u221a':600,u'\\u2260':600,u'\\u2264':600,u'\\u2265':600,u'\\u25ca':600,u'\\uf6c3':600,u'\\ufb01':600,u'\\ufb02':600}),\n'Courier-Oblique':({'FontName':'Courier-Oblique','Descent':-194.0,'FontBBox':(-49.0,-249.0,749.0,803.0),'FontWeight':'Medium','CapHeight':572.0,'FontFamily':'Courier','Flags':64,'XHeight':434.0,'ItalicAngle':-11.0,'Ascent':627.0},{u' ':600,u'!':600,u'\"':600,u'#':600,u'$':600,u'%':600,u'&':600,u\"'\":600,u'(':600,u')':600,u'*':600,u'+':600,u',':600,u'-':600,u'.':600,u'/':600,u'0':600,u'1':600,u'2':600,u'3':600,u'4':600,u'5':600,u'6':600,u'7':600,u'8':600,u'9':600,u':':600,u';':600,u'<':600,u'=':600,u'>':600,u'?':600,u'@':600,u'A':600,u'B':600,u'C':600,u'D':600,u'E':600,u'F':600,u'G':600,u'H':600,u'I':600,u'J':600,u'K':600,u'L':600,u'M':600,u'N':600,u'O':600,u'P':600,u'Q':600,u'R':600,u'S':600,u'T':600,u'U':600,u'V':600,u'W':600,u'X':600,u'Y':600,u'Z':600,u'[':600,u'\\\\':600,u']':600,u'^':600,u'_':600,u'`':600,u'a':600,u'b':600,u'c':600,u'd':600,u'e':600,u'f':600,u'g':600,u'h':600,u'i':600,u'j':600,u'k':600,u'l':600,u'm':600,u'n':600,u'o':600,u'p':600,u'q':600,u'r':600,u's':600,u't':600,u'u':600,u'v':600,u'w':600,u'x':600,u'y':600,u'z':600,u'{':600,u'|':600,u'}':600,u'~':600,u'\\xa1':600,u'\\xa2':600,u'\\xa3':600,u'\\xa4':600,u'\\xa5':600,u'\\xa6':600,u'\\xa7':600,u'\\xa8':600,u'\\xa9':600,u'\\xaa':600,u'\\xab':600,u'\\xac':600,u'\\xae':600,u'\\xaf':600,u'\\xb0':600,u'\\xb1':600,u'\\xb2':600,u'\\xb3':600,u'\\xb4':600,u'\\xb5':600,u'\\xb6':600,u'\\xb7':600,u'\\xb8':600,u'\\xb9':600,u'\\xba':600,u'\\xbb':600,u'\\xbc':600,u'\\xbd':600,u'\\xbe':600,u'\\xbf':600,u'\\xc0':600,u'\\xc1':600,u'\\xc2':600,u'\\xc3':600,u'\\xc4':600,u'\\xc5':600,u'\\xc6':600,u'\\xc7':600,u'\\xc8':600,u'\\xc9':600,u'\\xca':600,u'\\xcb':600,u'\\xcc':600,u'\\xcd':600,u'\\xce':600,u'\\xcf':600,u'\\xd0':600,u'\\xd1':600,u'\\xd2':600,u'\\xd3':600,u'\\xd4':600,u'\\xd5':600,u'\\xd6':600,u'\\xd7':600,u'\\xd8':600,u'\\xd9':600,u'\\xda':600,u'\\xdb':600,u'\\xdc':600,u'\\xdd':600,u'\\xde':600,u'\\xdf':600,u'\\xe0':600,u'\\xe1':600,u'\\xe2':600,u'\\xe3':600,u'\\xe4':600,u'\\xe5':600,u'\\xe6':600,u'\\xe7':600,u'\\xe8':600,u'\\xe9':600,u'\\xea':600,u'\\xeb':600,u'\\xec':600,u'\\xed':600,u'\\xee':600,u'\\xef':600,u'\\xf0':600,u'\\xf1':600,u'\\xf2':600,u'\\xf3':600,u'\\xf4':600,u'\\xf5':600,u'\\xf6':600,u'\\xf7':600,u'\\xf8':600,u'\\xf9':600,u'\\xfa':600,u'\\xfb':600,u'\\xfc':600,u'\\xfd':600,u'\\xfe':600,u'\\xff':600,u'\\u0100':600,u'\\u0101':600,u'\\u0102':600,u'\\u0103':600,u'\\u0104':600,u'\\u0105':600,u'\\u0106':600,u'\\u0107':600,u'\\u010c':600,u'\\u010d':600,u'\\u010e':600,u'\\u010f':600,u'\\u0110':600,u'\\u0111':600,u'\\u0112':600,u'\\u0113':600,u'\\u0116':600,u'\\u0117':600,u'\\u0118':600,u'\\u0119':600,u'\\u011a':600,u'\\u011b':600,u'\\u011e':600,u'\\u011f':600,u'\\u0122':600,u'\\u0123':600,u'\\u012a':600,u'\\u012b':600,u'\\u012e':600,u'\\u012f':600,u'\\u0130':600,u'\\u0131':600,u'\\u0136':600,u'\\u0137':600,u'\\u0139':600,u'\\u013a':600,u'\\u013b':600,u'\\u013c':600,u'\\u013d':600,u'\\u013e':600,u'\\u0141':600,u'\\u0142':600,u'\\u0143':600,u'\\u0144':600,u'\\u0145':600,u'\\u0146':600,u'\\u0147':600,u'\\u0148':600,u'\\u014c':600,u'\\u014d':600,u'\\u0150':600,u'\\u0151':600,u'\\u0152':600,u'\\u0153':600,u'\\u0154':600,u'\\u0155':600,u'\\u0156':600,u'\\u0157':600,u'\\u0158':600,u'\\u0159':600,u'\\u015a':600,u'\\u015b':600,u'\\u015e':600,u'\\u015f':600,u'\\u0160':600,u'\\u0161':600,u'\\u0162':600,u'\\u0163':600,u'\\u0164':600,u'\\u0165':600,u'\\u016a':600,u'\\u016b':600,u'\\u016e':600,u'\\u016f':600,u'\\u0170':600,u'\\u0171':600,u'\\u0172':600,u'\\u0173':600,u'\\u0178':600,u'\\u0179':600,u'\\u017a':600,u'\\u017b':600,u'\\u017c':600,u'\\u017d':600,u'\\u017e':600,u'\\u0192':600,u'\\u0218':600,u'\\u0219':600,u'\\u02c6':600,u'\\u02c7':600,u'\\u02d8':600,u'\\u02d9':600,u'\\u02da':600,u'\\u02db':600,u'\\u02dc':600,u'\\u02dd':600,u'\\u2013':600,u'\\u2014':600,u'\\u2018':600,u'\\u2019':600,u'\\u201a':600,u'\\u201c':600,u'\\u201d':600,u'\\u201e':600,u'\\u2020':600,u'\\u2021':600,u'\\u2022':600,u'\\u2026':600,u'\\u2030':600,u'\\u2039':600,u'\\u203a':600,u'\\u2044':600,u'\\u2122':600,u'\\u2202':600,u'\\u2206':600,u'\\u2211':600,u'\\u2212':600,u'\\u221a':600,u'\\u2260':600,u'\\u2264':600,u'\\u2265':600,u'\\u25ca':600,u'\\uf6c3':600,u'\\ufb01':600,u'\\ufb02':600}),\n'Helvetica':({'FontName':'Helvetica','Descent':-207.0,'FontBBox':(-166.0,-225.0,1000.0,931.0),'FontWeight':'Medium','CapHeight':718.0,'FontFamily':'Helvetica','Flags':0,'XHeight':523.0,'ItalicAngle':0.0,'Ascent':718.0},{u' ':278,u'!':278,u'\"':355,u'#':556,u'$':556,u'%':889,u'&':667,u\"'\":191,u'(':333,u')':333,u'*':389,u'+':584,u',':278,u'-':333,u'.':278,u'/':278,u'0':556,u'1':556,u'2':556,u'3':556,u'4':556,u'5':556,u'6':556,u'7':556,u'8':556,u'9':556,u':':278,u';':278,u'<':584,u'=':584,u'>':584,u'?':556,u'@':1015,u'A':667,u'B':667,u'C':722,u'D':722,u'E':667,u'F':611,u'G':778,u'H':722,u'I':278,u'J':500,u'K':667,u'L':556,u'M':833,u'N':722,u'O':778,u'P':667,u'Q':778,u'R':722,u'S':667,u'T':611,u'U':722,u'V':667,u'W':944,u'X':667,u'Y':667,u'Z':611,u'[':278,u'\\\\':278,u']':278,u'^':469,u'_':556,u'`':333,u'a':556,u'b':556,u'c':500,u'd':556,u'e':556,u'f':278,u'g':556,u'h':556,u'i':222,u'j':222,u'k':500,u'l':222,u'm':833,u'n':556,u'o':556,u'p':556,u'q':556,u'r':333,u's':500,u't':278,u'u':556,u'v':500,u'w':722,u'x':500,u'y':500,u'z':500,u'{':334,u'|':260,u'}':334,u'~':584,u'\\xa1':333,u'\\xa2':556,u'\\xa3':556,u'\\xa4':556,u'\\xa5':556,u'\\xa6':260,u'\\xa7':556,u'\\xa8':333,u'\\xa9':737,u'\\xaa':370,u'\\xab':556,u'\\xac':584,u'\\xae':737,u'\\xaf':333,u'\\xb0':400,u'\\xb1':584,u'\\xb2':333,u'\\xb3':333,u'\\xb4':333,u'\\xb5':556,u'\\xb6':537,u'\\xb7':278,u'\\xb8':333,u'\\xb9':333,u'\\xba':365,u'\\xbb':556,u'\\xbc':834,u'\\xbd':834,u'\\xbe':834,u'\\xbf':611,u'\\xc0':667,u'\\xc1':667,u'\\xc2':667,u'\\xc3':667,u'\\xc4':667,u'\\xc5':667,u'\\xc6':1000,u'\\xc7':722,u'\\xc8':667,u'\\xc9':667,u'\\xca':667,u'\\xcb':667,u'\\xcc':278,u'\\xcd':278,u'\\xce':278,u'\\xcf':278,u'\\xd0':722,u'\\xd1':722,u'\\xd2':778,u'\\xd3':778,u'\\xd4':778,u'\\xd5':778,u'\\xd6':778,u'\\xd7':584,u'\\xd8':778,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':667,u'\\xde':667,u'\\xdf':611,u'\\xe0':556,u'\\xe1':556,u'\\xe2':556,u'\\xe3':556,u'\\xe4':556,u'\\xe5':556,u'\\xe6':889,u'\\xe7':500,u'\\xe8':556,u'\\xe9':556,u'\\xea':556,u'\\xeb':556,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':556,u'\\xf1':556,u'\\xf2':556,u'\\xf3':556,u'\\xf4':556,u'\\xf5':556,u'\\xf6':556,u'\\xf7':584,u'\\xf8':611,u'\\xf9':556,u'\\xfa':556,u'\\xfb':556,u'\\xfc':556,u'\\xfd':500,u'\\xfe':556,u'\\xff':500,u'\\u0100':667,u'\\u0101':556,u'\\u0102':667,u'\\u0103':556,u'\\u0104':667,u'\\u0105':556,u'\\u0106':722,u'\\u0107':500,u'\\u010c':722,u'\\u010d':500,u'\\u010e':722,u'\\u010f':643,u'\\u0110':722,u'\\u0111':556,u'\\u0112':667,u'\\u0113':556,u'\\u0116':667,u'\\u0117':556,u'\\u0118':667,u'\\u0119':556,u'\\u011a':667,u'\\u011b':556,u'\\u011e':778,u'\\u011f':556,u'\\u0122':778,u'\\u0123':556,u'\\u012a':278,u'\\u012b':278,u'\\u012e':278,u'\\u012f':222,u'\\u0130':278,u'\\u0131':278,u'\\u0136':667,u'\\u0137':500,u'\\u0139':556,u'\\u013a':222,u'\\u013b':556,u'\\u013c':222,u'\\u013d':556,u'\\u013e':299,u'\\u0141':556,u'\\u0142':222,u'\\u0143':722,u'\\u0144':556,u'\\u0145':722,u'\\u0146':556,u'\\u0147':722,u'\\u0148':556,u'\\u014c':778,u'\\u014d':556,u'\\u0150':778,u'\\u0151':556,u'\\u0152':1000,u'\\u0153':944,u'\\u0154':722,u'\\u0155':333,u'\\u0156':722,u'\\u0157':333,u'\\u0158':722,u'\\u0159':333,u'\\u015a':667,u'\\u015b':500,u'\\u015e':667,u'\\u015f':500,u'\\u0160':667,u'\\u0161':500,u'\\u0162':611,u'\\u0163':278,u'\\u0164':611,u'\\u0165':317,u'\\u016a':722,u'\\u016b':556,u'\\u016e':722,u'\\u016f':556,u'\\u0170':722,u'\\u0171':556,u'\\u0172':722,u'\\u0173':556,u'\\u0178':667,u'\\u0179':611,u'\\u017a':500,u'\\u017b':611,u'\\u017c':500,u'\\u017d':611,u'\\u017e':500,u'\\u0192':556,u'\\u0218':667,u'\\u0219':500,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':556,u'\\u2014':1000,u'\\u2018':222,u'\\u2019':222,u'\\u201a':222,u'\\u201c':333,u'\\u201d':333,u'\\u201e':333,u'\\u2020':556,u'\\u2021':556,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':1000,u'\\u2202':476,u'\\u2206':612,u'\\u2211':600,u'\\u2212':584,u'\\u221a':453,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':471,u'\\uf6c3':250,u'\\ufb01':500,u'\\ufb02':500}),\n'Helvetica-Bold':({'FontName':'Helvetica-Bold','Descent':-207.0,'FontBBox':(-170.0,-228.0,1003.0,962.0),'FontWeight':'Bold','CapHeight':718.0,'FontFamily':'Helvetica','Flags':0,'XHeight':532.0,'ItalicAngle':0.0,'Ascent':718.0},{u' ':278,u'!':333,u'\"':474,u'#':556,u'$':556,u'%':889,u'&':722,u\"'\":238,u'(':333,u')':333,u'*':389,u'+':584,u',':278,u'-':333,u'.':278,u'/':278,u'0':556,u'1':556,u'2':556,u'3':556,u'4':556,u'5':556,u'6':556,u'7':556,u'8':556,u'9':556,u':':333,u';':333,u'<':584,u'=':584,u'>':584,u'?':611,u'@':975,u'A':722,u'B':722,u'C':722,u'D':722,u'E':667,u'F':611,u'G':778,u'H':722,u'I':278,u'J':556,u'K':722,u'L':611,u'M':833,u'N':722,u'O':778,u'P':667,u'Q':778,u'R':722,u'S':667,u'T':611,u'U':722,u'V':667,u'W':944,u'X':667,u'Y':667,u'Z':611,u'[':333,u'\\\\':278,u']':333,u'^':584,u'_':556,u'`':333,u'a':556,u'b':611,u'c':556,u'd':611,u'e':556,u'f':333,u'g':611,u'h':611,u'i':278,u'j':278,u'k':556,u'l':278,u'm':889,u'n':611,u'o':611,u'p':611,u'q':611,u'r':389,u's':556,u't':333,u'u':611,u'v':556,u'w':778,u'x':556,u'y':556,u'z':500,u'{':389,u'|':280,u'}':389,u'~':584,u'\\xa1':333,u'\\xa2':556,u'\\xa3':556,u'\\xa4':556,u'\\xa5':556,u'\\xa6':280,u'\\xa7':556,u'\\xa8':333,u'\\xa9':737,u'\\xaa':370,u'\\xab':556,u'\\xac':584,u'\\xae':737,u'\\xaf':333,u'\\xb0':400,u'\\xb1':584,u'\\xb2':333,u'\\xb3':333,u'\\xb4':333,u'\\xb5':611,u'\\xb6':556,u'\\xb7':278,u'\\xb8':333,u'\\xb9':333,u'\\xba':365,u'\\xbb':556,u'\\xbc':834,u'\\xbd':834,u'\\xbe':834,u'\\xbf':611,u'\\xc0':722,u'\\xc1':722,u'\\xc2':722,u'\\xc3':722,u'\\xc4':722,u'\\xc5':722,u'\\xc6':1000,u'\\xc7':722,u'\\xc8':667,u'\\xc9':667,u'\\xca':667,u'\\xcb':667,u'\\xcc':278,u'\\xcd':278,u'\\xce':278,u'\\xcf':278,u'\\xd0':722,u'\\xd1':722,u'\\xd2':778,u'\\xd3':778,u'\\xd4':778,u'\\xd5':778,u'\\xd6':778,u'\\xd7':584,u'\\xd8':778,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':667,u'\\xde':667,u'\\xdf':611,u'\\xe0':556,u'\\xe1':556,u'\\xe2':556,u'\\xe3':556,u'\\xe4':556,u'\\xe5':556,u'\\xe6':889,u'\\xe7':556,u'\\xe8':556,u'\\xe9':556,u'\\xea':556,u'\\xeb':556,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':611,u'\\xf1':611,u'\\xf2':611,u'\\xf3':611,u'\\xf4':611,u'\\xf5':611,u'\\xf6':611,u'\\xf7':584,u'\\xf8':611,u'\\xf9':611,u'\\xfa':611,u'\\xfb':611,u'\\xfc':611,u'\\xfd':556,u'\\xfe':611,u'\\xff':556,u'\\u0100':722,u'\\u0101':556,u'\\u0102':722,u'\\u0103':556,u'\\u0104':722,u'\\u0105':556,u'\\u0106':722,u'\\u0107':556,u'\\u010c':722,u'\\u010d':556,u'\\u010e':722,u'\\u010f':743,u'\\u0110':722,u'\\u0111':611,u'\\u0112':667,u'\\u0113':556,u'\\u0116':667,u'\\u0117':556,u'\\u0118':667,u'\\u0119':556,u'\\u011a':667,u'\\u011b':556,u'\\u011e':778,u'\\u011f':611,u'\\u0122':778,u'\\u0123':611,u'\\u012a':278,u'\\u012b':278,u'\\u012e':278,u'\\u012f':278,u'\\u0130':278,u'\\u0131':278,u'\\u0136':722,u'\\u0137':556,u'\\u0139':611,u'\\u013a':278,u'\\u013b':611,u'\\u013c':278,u'\\u013d':611,u'\\u013e':400,u'\\u0141':611,u'\\u0142':278,u'\\u0143':722,u'\\u0144':611,u'\\u0145':722,u'\\u0146':611,u'\\u0147':722,u'\\u0148':611,u'\\u014c':778,u'\\u014d':611,u'\\u0150':778,u'\\u0151':611,u'\\u0152':1000,u'\\u0153':944,u'\\u0154':722,u'\\u0155':389,u'\\u0156':722,u'\\u0157':389,u'\\u0158':722,u'\\u0159':389,u'\\u015a':667,u'\\u015b':556,u'\\u015e':667,u'\\u015f':556,u'\\u0160':667,u'\\u0161':556,u'\\u0162':611,u'\\u0163':333,u'\\u0164':611,u'\\u0165':389,u'\\u016a':722,u'\\u016b':611,u'\\u016e':722,u'\\u016f':611,u'\\u0170':722,u'\\u0171':611,u'\\u0172':722,u'\\u0173':611,u'\\u0178':667,u'\\u0179':611,u'\\u017a':500,u'\\u017b':611,u'\\u017c':500,u'\\u017d':611,u'\\u017e':500,u'\\u0192':556,u'\\u0218':667,u'\\u0219':556,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':556,u'\\u2014':1000,u'\\u2018':278,u'\\u2019':278,u'\\u201a':278,u'\\u201c':500,u'\\u201d':500,u'\\u201e':500,u'\\u2020':556,u'\\u2021':556,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':1000,u'\\u2202':494,u'\\u2206':612,u'\\u2211':600,u'\\u2212':584,u'\\u221a':549,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':494,u'\\uf6c3':250,u'\\ufb01':611,u'\\ufb02':611}),\n'Helvetica-BoldOblique':({'FontName':'Helvetica-BoldOblique','Descent':-207.0,'FontBBox':(-175.0,-228.0,1114.0,962.0),'FontWeight':'Bold','CapHeight':718.0,'FontFamily':'Helvetica','Flags':0,'XHeight':532.0,'ItalicAngle':-12.0,'Ascent':718.0},{u' ':278,u'!':333,u'\"':474,u'#':556,u'$':556,u'%':889,u'&':722,u\"'\":238,u'(':333,u')':333,u'*':389,u'+':584,u',':278,u'-':333,u'.':278,u'/':278,u'0':556,u'1':556,u'2':556,u'3':556,u'4':556,u'5':556,u'6':556,u'7':556,u'8':556,u'9':556,u':':333,u';':333,u'<':584,u'=':584,u'>':584,u'?':611,u'@':975,u'A':722,u'B':722,u'C':722,u'D':722,u'E':667,u'F':611,u'G':778,u'H':722,u'I':278,u'J':556,u'K':722,u'L':611,u'M':833,u'N':722,u'O':778,u'P':667,u'Q':778,u'R':722,u'S':667,u'T':611,u'U':722,u'V':667,u'W':944,u'X':667,u'Y':667,u'Z':611,u'[':333,u'\\\\':278,u']':333,u'^':584,u'_':556,u'`':333,u'a':556,u'b':611,u'c':556,u'd':611,u'e':556,u'f':333,u'g':611,u'h':611,u'i':278,u'j':278,u'k':556,u'l':278,u'm':889,u'n':611,u'o':611,u'p':611,u'q':611,u'r':389,u's':556,u't':333,u'u':611,u'v':556,u'w':778,u'x':556,u'y':556,u'z':500,u'{':389,u'|':280,u'}':389,u'~':584,u'\\xa1':333,u'\\xa2':556,u'\\xa3':556,u'\\xa4':556,u'\\xa5':556,u'\\xa6':280,u'\\xa7':556,u'\\xa8':333,u'\\xa9':737,u'\\xaa':370,u'\\xab':556,u'\\xac':584,u'\\xae':737,u'\\xaf':333,u'\\xb0':400,u'\\xb1':584,u'\\xb2':333,u'\\xb3':333,u'\\xb4':333,u'\\xb5':611,u'\\xb6':556,u'\\xb7':278,u'\\xb8':333,u'\\xb9':333,u'\\xba':365,u'\\xbb':556,u'\\xbc':834,u'\\xbd':834,u'\\xbe':834,u'\\xbf':611,u'\\xc0':722,u'\\xc1':722,u'\\xc2':722,u'\\xc3':722,u'\\xc4':722,u'\\xc5':722,u'\\xc6':1000,u'\\xc7':722,u'\\xc8':667,u'\\xc9':667,u'\\xca':667,u'\\xcb':667,u'\\xcc':278,u'\\xcd':278,u'\\xce':278,u'\\xcf':278,u'\\xd0':722,u'\\xd1':722,u'\\xd2':778,u'\\xd3':778,u'\\xd4':778,u'\\xd5':778,u'\\xd6':778,u'\\xd7':584,u'\\xd8':778,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':667,u'\\xde':667,u'\\xdf':611,u'\\xe0':556,u'\\xe1':556,u'\\xe2':556,u'\\xe3':556,u'\\xe4':556,u'\\xe5':556,u'\\xe6':889,u'\\xe7':556,u'\\xe8':556,u'\\xe9':556,u'\\xea':556,u'\\xeb':556,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':611,u'\\xf1':611,u'\\xf2':611,u'\\xf3':611,u'\\xf4':611,u'\\xf5':611,u'\\xf6':611,u'\\xf7':584,u'\\xf8':611,u'\\xf9':611,u'\\xfa':611,u'\\xfb':611,u'\\xfc':611,u'\\xfd':556,u'\\xfe':611,u'\\xff':556,u'\\u0100':722,u'\\u0101':556,u'\\u0102':722,u'\\u0103':556,u'\\u0104':722,u'\\u0105':556,u'\\u0106':722,u'\\u0107':556,u'\\u010c':722,u'\\u010d':556,u'\\u010e':722,u'\\u010f':743,u'\\u0110':722,u'\\u0111':611,u'\\u0112':667,u'\\u0113':556,u'\\u0116':667,u'\\u0117':556,u'\\u0118':667,u'\\u0119':556,u'\\u011a':667,u'\\u011b':556,u'\\u011e':778,u'\\u011f':611,u'\\u0122':778,u'\\u0123':611,u'\\u012a':278,u'\\u012b':278,u'\\u012e':278,u'\\u012f':278,u'\\u0130':278,u'\\u0131':278,u'\\u0136':722,u'\\u0137':556,u'\\u0139':611,u'\\u013a':278,u'\\u013b':611,u'\\u013c':278,u'\\u013d':611,u'\\u013e':400,u'\\u0141':611,u'\\u0142':278,u'\\u0143':722,u'\\u0144':611,u'\\u0145':722,u'\\u0146':611,u'\\u0147':722,u'\\u0148':611,u'\\u014c':778,u'\\u014d':611,u'\\u0150':778,u'\\u0151':611,u'\\u0152':1000,u'\\u0153':944,u'\\u0154':722,u'\\u0155':389,u'\\u0156':722,u'\\u0157':389,u'\\u0158':722,u'\\u0159':389,u'\\u015a':667,u'\\u015b':556,u'\\u015e':667,u'\\u015f':556,u'\\u0160':667,u'\\u0161':556,u'\\u0162':611,u'\\u0163':333,u'\\u0164':611,u'\\u0165':389,u'\\u016a':722,u'\\u016b':611,u'\\u016e':722,u'\\u016f':611,u'\\u0170':722,u'\\u0171':611,u'\\u0172':722,u'\\u0173':611,u'\\u0178':667,u'\\u0179':611,u'\\u017a':500,u'\\u017b':611,u'\\u017c':500,u'\\u017d':611,u'\\u017e':500,u'\\u0192':556,u'\\u0218':667,u'\\u0219':556,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':556,u'\\u2014':1000,u'\\u2018':278,u'\\u2019':278,u'\\u201a':278,u'\\u201c':500,u'\\u201d':500,u'\\u201e':500,u'\\u2020':556,u'\\u2021':556,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':1000,u'\\u2202':494,u'\\u2206':612,u'\\u2211':600,u'\\u2212':584,u'\\u221a':549,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':494,u'\\uf6c3':250,u'\\ufb01':611,u'\\ufb02':611}),\n'Helvetica-Oblique':({'FontName':'Helvetica-Oblique','Descent':-207.0,'FontBBox':(-171.0,-225.0,1116.0,931.0),'FontWeight':'Medium','CapHeight':718.0,'FontFamily':'Helvetica','Flags':0,'XHeight':523.0,'ItalicAngle':-12.0,'Ascent':718.0},{u' ':278,u'!':278,u'\"':355,u'#':556,u'$':556,u'%':889,u'&':667,u\"'\":191,u'(':333,u')':333,u'*':389,u'+':584,u',':278,u'-':333,u'.':278,u'/':278,u'0':556,u'1':556,u'2':556,u'3':556,u'4':556,u'5':556,u'6':556,u'7':556,u'8':556,u'9':556,u':':278,u';':278,u'<':584,u'=':584,u'>':584,u'?':556,u'@':1015,u'A':667,u'B':667,u'C':722,u'D':722,u'E':667,u'F':611,u'G':778,u'H':722,u'I':278,u'J':500,u'K':667,u'L':556,u'M':833,u'N':722,u'O':778,u'P':667,u'Q':778,u'R':722,u'S':667,u'T':611,u'U':722,u'V':667,u'W':944,u'X':667,u'Y':667,u'Z':611,u'[':278,u'\\\\':278,u']':278,u'^':469,u'_':556,u'`':333,u'a':556,u'b':556,u'c':500,u'd':556,u'e':556,u'f':278,u'g':556,u'h':556,u'i':222,u'j':222,u'k':500,u'l':222,u'm':833,u'n':556,u'o':556,u'p':556,u'q':556,u'r':333,u's':500,u't':278,u'u':556,u'v':500,u'w':722,u'x':500,u'y':500,u'z':500,u'{':334,u'|':260,u'}':334,u'~':584,u'\\xa1':333,u'\\xa2':556,u'\\xa3':556,u'\\xa4':556,u'\\xa5':556,u'\\xa6':260,u'\\xa7':556,u'\\xa8':333,u'\\xa9':737,u'\\xaa':370,u'\\xab':556,u'\\xac':584,u'\\xae':737,u'\\xaf':333,u'\\xb0':400,u'\\xb1':584,u'\\xb2':333,u'\\xb3':333,u'\\xb4':333,u'\\xb5':556,u'\\xb6':537,u'\\xb7':278,u'\\xb8':333,u'\\xb9':333,u'\\xba':365,u'\\xbb':556,u'\\xbc':834,u'\\xbd':834,u'\\xbe':834,u'\\xbf':611,u'\\xc0':667,u'\\xc1':667,u'\\xc2':667,u'\\xc3':667,u'\\xc4':667,u'\\xc5':667,u'\\xc6':1000,u'\\xc7':722,u'\\xc8':667,u'\\xc9':667,u'\\xca':667,u'\\xcb':667,u'\\xcc':278,u'\\xcd':278,u'\\xce':278,u'\\xcf':278,u'\\xd0':722,u'\\xd1':722,u'\\xd2':778,u'\\xd3':778,u'\\xd4':778,u'\\xd5':778,u'\\xd6':778,u'\\xd7':584,u'\\xd8':778,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':667,u'\\xde':667,u'\\xdf':611,u'\\xe0':556,u'\\xe1':556,u'\\xe2':556,u'\\xe3':556,u'\\xe4':556,u'\\xe5':556,u'\\xe6':889,u'\\xe7':500,u'\\xe8':556,u'\\xe9':556,u'\\xea':556,u'\\xeb':556,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':556,u'\\xf1':556,u'\\xf2':556,u'\\xf3':556,u'\\xf4':556,u'\\xf5':556,u'\\xf6':556,u'\\xf7':584,u'\\xf8':611,u'\\xf9':556,u'\\xfa':556,u'\\xfb':556,u'\\xfc':556,u'\\xfd':500,u'\\xfe':556,u'\\xff':500,u'\\u0100':667,u'\\u0101':556,u'\\u0102':667,u'\\u0103':556,u'\\u0104':667,u'\\u0105':556,u'\\u0106':722,u'\\u0107':500,u'\\u010c':722,u'\\u010d':500,u'\\u010e':722,u'\\u010f':643,u'\\u0110':722,u'\\u0111':556,u'\\u0112':667,u'\\u0113':556,u'\\u0116':667,u'\\u0117':556,u'\\u0118':667,u'\\u0119':556,u'\\u011a':667,u'\\u011b':556,u'\\u011e':778,u'\\u011f':556,u'\\u0122':778,u'\\u0123':556,u'\\u012a':278,u'\\u012b':278,u'\\u012e':278,u'\\u012f':222,u'\\u0130':278,u'\\u0131':278,u'\\u0136':667,u'\\u0137':500,u'\\u0139':556,u'\\u013a':222,u'\\u013b':556,u'\\u013c':222,u'\\u013d':556,u'\\u013e':299,u'\\u0141':556,u'\\u0142':222,u'\\u0143':722,u'\\u0144':556,u'\\u0145':722,u'\\u0146':556,u'\\u0147':722,u'\\u0148':556,u'\\u014c':778,u'\\u014d':556,u'\\u0150':778,u'\\u0151':556,u'\\u0152':1000,u'\\u0153':944,u'\\u0154':722,u'\\u0155':333,u'\\u0156':722,u'\\u0157':333,u'\\u0158':722,u'\\u0159':333,u'\\u015a':667,u'\\u015b':500,u'\\u015e':667,u'\\u015f':500,u'\\u0160':667,u'\\u0161':500,u'\\u0162':611,u'\\u0163':278,u'\\u0164':611,u'\\u0165':317,u'\\u016a':722,u'\\u016b':556,u'\\u016e':722,u'\\u016f':556,u'\\u0170':722,u'\\u0171':556,u'\\u0172':722,u'\\u0173':556,u'\\u0178':667,u'\\u0179':611,u'\\u017a':500,u'\\u017b':611,u'\\u017c':500,u'\\u017d':611,u'\\u017e':500,u'\\u0192':556,u'\\u0218':667,u'\\u0219':500,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':556,u'\\u2014':1000,u'\\u2018':222,u'\\u2019':222,u'\\u201a':222,u'\\u201c':333,u'\\u201d':333,u'\\u201e':333,u'\\u2020':556,u'\\u2021':556,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':1000,u'\\u2202':476,u'\\u2206':612,u'\\u2211':600,u'\\u2212':584,u'\\u221a':453,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':471,u'\\uf6c3':250,u'\\ufb01':500,u'\\ufb02':500}),\n'Symbol':({'FontName':'Symbol','FontBBox':(-180.0,-293.0,1090.0,1010.0),'FontWeight':'Medium','FontFamily':'Symbol','Flags':0,'ItalicAngle':0.0},{u' ':250,u'!':333,u'#':500,u'%':833,u'&':778,u'(':333,u')':333,u'+':549,u',':250,u'.':250,u'/':278,u'0':500,u'1':500,u'2':500,u'3':500,u'4':500,u'5':500,u'6':500,u'7':500,u'8':500,u'9':500,u':':278,u';':278,u'<':549,u'=':549,u'>':549,u'?':444,u'[':333,u']':333,u'_':500,u'{':480,u'|':200,u'}':480,u'\\xac':713,u'\\xb0':400,u'\\xb1':549,u'\\xb5':576,u'\\xd7':549,u'\\xf7':549,u'\\u0192':500,u'\\u0391':722,u'\\u0392':667,u'\\u0393':603,u'\\u0395':611,u'\\u0396':611,u'\\u0397':722,u'\\u0398':741,u'\\u0399':333,u'\\u039a':722,u'\\u039b':686,u'\\u039c':889,u'\\u039d':722,u'\\u039e':645,u'\\u039f':722,u'\\u03a0':768,u'\\u03a1':556,u'\\u03a3':592,u'\\u03a4':611,u'\\u03a5':690,u'\\u03a6':763,u'\\u03a7':722,u'\\u03a8':795,u'\\u03b1':631,u'\\u03b2':549,u'\\u03b3':411,u'\\u03b4':494,u'\\u03b5':439,u'\\u03b6':494,u'\\u03b7':603,u'\\u03b8':521,u'\\u03b9':329,u'\\u03ba':549,u'\\u03bb':549,u'\\u03bd':521,u'\\u03be':493,u'\\u03bf':549,u'\\u03c0':549,u'\\u03c1':549,u'\\u03c2':439,u'\\u03c3':603,u'\\u03c4':439,u'\\u03c5':576,u'\\u03c6':521,u'\\u03c7':549,u'\\u03c8':686,u'\\u03c9':686,u'\\u03d1':631,u'\\u03d2':620,u'\\u03d5':603,u'\\u03d6':713,u'\\u2022':460,u'\\u2026':1000,u'\\u2032':247,u'\\u2033':411,u'\\u2044':167,u'\\u20ac':750,u'\\u2111':686,u'\\u2118':987,u'\\u211c':795,u'\\u2126':768,u'\\u2135':823,u'\\u2190':987,u'\\u2191':603,u'\\u2192':987,u'\\u2193':603,u'\\u2194':1042,u'\\u21b5':658,u'\\u21d0':987,u'\\u21d1':603,u'\\u21d2':987,u'\\u21d3':603,u'\\u21d4':1042,u'\\u2200':713,u'\\u2202':494,u'\\u2203':549,u'\\u2205':823,u'\\u2206':612,u'\\u2207':713,u'\\u2208':713,u'\\u2209':713,u'\\u220b':439,u'\\u220f':823,u'\\u2211':713,u'\\u2212':549,u'\\u2217':500,u'\\u221a':549,u'\\u221d':713,u'\\u221e':713,u'\\u2220':768,u'\\u2227':603,u'\\u2228':603,u'\\u2229':768,u'\\u222a':768,u'\\u222b':274,u'\\u2234':863,u'\\u223c':549,u'\\u2245':549,u'\\u2248':549,u'\\u2260':549,u'\\u2261':549,u'\\u2264':549,u'\\u2265':549,u'\\u2282':713,u'\\u2283':713,u'\\u2284':713,u'\\u2286':713,u'\\u2287':713,u'\\u2295':768,u'\\u2297':768,u'\\u22a5':658,u'\\u22c5':250,u'\\u2320':686,u'\\u2321':686,u'\\u2329':329,u'\\u232a':329,u'\\u25ca':494,u'\\u2660':753,u'\\u2663':753,u'\\u2665':753,u'\\u2666':753,u'\\uf6d9':790,u'\\uf6da':790,u'\\uf6db':890,u'\\uf8e5':500,u'\\uf8e6':603,u'\\uf8e7':1000,u'\\uf8e8':790,u'\\uf8e9':790,u'\\uf8ea':786,u'\\uf8eb':384,u'\\uf8ec':384,u'\\uf8ed':384,u'\\uf8ee':384,u'\\uf8ef':384,u'\\uf8f0':384,u'\\uf8f1':494,u'\\uf8f2':494,u'\\uf8f3':494,u'\\uf8f4':494,u'\\uf8f5':686,u'\\uf8f6':384,u'\\uf8f7':384,u'\\uf8f8':384,u'\\uf8f9':384,u'\\uf8fa':384,u'\\uf8fb':384,u'\\uf8fc':494,u'\\uf8fd':494,u'\\uf8fe':494,u'\\uf8ff':790}),\n'Times-Bold':({'FontName':'Times-Bold','Descent':-217.0,'FontBBox':(-168.0,-218.0,1000.0,935.0),'FontWeight':'Bold','CapHeight':676.0,'FontFamily':'Times','Flags':0,'XHeight':461.0,'ItalicAngle':0.0,'Ascent':683.0},{u' ':250,u'!':333,u'\"':555,u'#':500,u'$':500,u'%':1000,u'&':833,u\"'\":278,u'(':333,u')':333,u'*':500,u'+':570,u',':250,u'-':333,u'.':250,u'/':278,u'0':500,u'1':500,u'2':500,u'3':500,u'4':500,u'5':500,u'6':500,u'7':500,u'8':500,u'9':500,u':':333,u';':333,u'<':570,u'=':570,u'>':570,u'?':500,u'@':930,u'A':722,u'B':667,u'C':722,u'D':722,u'E':667,u'F':611,u'G':778,u'H':778,u'I':389,u'J':500,u'K':778,u'L':667,u'M':944,u'N':722,u'O':778,u'P':611,u'Q':778,u'R':722,u'S':556,u'T':667,u'U':722,u'V':722,u'W':1000,u'X':722,u'Y':722,u'Z':667,u'[':333,u'\\\\':278,u']':333,u'^':581,u'_':500,u'`':333,u'a':500,u'b':556,u'c':444,u'd':556,u'e':444,u'f':333,u'g':500,u'h':556,u'i':278,u'j':333,u'k':556,u'l':278,u'm':833,u'n':556,u'o':500,u'p':556,u'q':556,u'r':444,u's':389,u't':333,u'u':556,u'v':500,u'w':722,u'x':500,u'y':500,u'z':444,u'{':394,u'|':220,u'}':394,u'~':520,u'\\xa1':333,u'\\xa2':500,u'\\xa3':500,u'\\xa4':500,u'\\xa5':500,u'\\xa6':220,u'\\xa7':500,u'\\xa8':333,u'\\xa9':747,u'\\xaa':300,u'\\xab':500,u'\\xac':570,u'\\xae':747,u'\\xaf':333,u'\\xb0':400,u'\\xb1':570,u'\\xb2':300,u'\\xb3':300,u'\\xb4':333,u'\\xb5':556,u'\\xb6':540,u'\\xb7':250,u'\\xb8':333,u'\\xb9':300,u'\\xba':330,u'\\xbb':500,u'\\xbc':750,u'\\xbd':750,u'\\xbe':750,u'\\xbf':500,u'\\xc0':722,u'\\xc1':722,u'\\xc2':722,u'\\xc3':722,u'\\xc4':722,u'\\xc5':722,u'\\xc6':1000,u'\\xc7':722,u'\\xc8':667,u'\\xc9':667,u'\\xca':667,u'\\xcb':667,u'\\xcc':389,u'\\xcd':389,u'\\xce':389,u'\\xcf':389,u'\\xd0':722,u'\\xd1':722,u'\\xd2':778,u'\\xd3':778,u'\\xd4':778,u'\\xd5':778,u'\\xd6':778,u'\\xd7':570,u'\\xd8':778,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':722,u'\\xde':611,u'\\xdf':556,u'\\xe0':500,u'\\xe1':500,u'\\xe2':500,u'\\xe3':500,u'\\xe4':500,u'\\xe5':500,u'\\xe6':722,u'\\xe7':444,u'\\xe8':444,u'\\xe9':444,u'\\xea':444,u'\\xeb':444,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':500,u'\\xf1':556,u'\\xf2':500,u'\\xf3':500,u'\\xf4':500,u'\\xf5':500,u'\\xf6':500,u'\\xf7':570,u'\\xf8':500,u'\\xf9':556,u'\\xfa':556,u'\\xfb':556,u'\\xfc':556,u'\\xfd':500,u'\\xfe':556,u'\\xff':500,u'\\u0100':722,u'\\u0101':500,u'\\u0102':722,u'\\u0103':500,u'\\u0104':722,u'\\u0105':500,u'\\u0106':722,u'\\u0107':444,u'\\u010c':722,u'\\u010d':444,u'\\u010e':722,u'\\u010f':672,u'\\u0110':722,u'\\u0111':556,u'\\u0112':667,u'\\u0113':444,u'\\u0116':667,u'\\u0117':444,u'\\u0118':667,u'\\u0119':444,u'\\u011a':667,u'\\u011b':444,u'\\u011e':778,u'\\u011f':500,u'\\u0122':778,u'\\u0123':500,u'\\u012a':389,u'\\u012b':278,u'\\u012e':389,u'\\u012f':278,u'\\u0130':389,u'\\u0131':278,u'\\u0136':778,u'\\u0137':556,u'\\u0139':667,u'\\u013a':278,u'\\u013b':667,u'\\u013c':278,u'\\u013d':667,u'\\u013e':394,u'\\u0141':667,u'\\u0142':278,u'\\u0143':722,u'\\u0144':556,u'\\u0145':722,u'\\u0146':556,u'\\u0147':722,u'\\u0148':556,u'\\u014c':778,u'\\u014d':500,u'\\u0150':778,u'\\u0151':500,u'\\u0152':1000,u'\\u0153':722,u'\\u0154':722,u'\\u0155':444,u'\\u0156':722,u'\\u0157':444,u'\\u0158':722,u'\\u0159':444,u'\\u015a':556,u'\\u015b':389,u'\\u015e':556,u'\\u015f':389,u'\\u0160':556,u'\\u0161':389,u'\\u0162':667,u'\\u0163':333,u'\\u0164':667,u'\\u0165':416,u'\\u016a':722,u'\\u016b':556,u'\\u016e':722,u'\\u016f':556,u'\\u0170':722,u'\\u0171':556,u'\\u0172':722,u'\\u0173':556,u'\\u0178':722,u'\\u0179':667,u'\\u017a':444,u'\\u017b':667,u'\\u017c':444,u'\\u017d':667,u'\\u017e':444,u'\\u0192':500,u'\\u0218':556,u'\\u0219':389,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':500,u'\\u2014':1000,u'\\u2018':333,u'\\u2019':333,u'\\u201a':333,u'\\u201c':500,u'\\u201d':500,u'\\u201e':500,u'\\u2020':500,u'\\u2021':500,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':1000,u'\\u2202':494,u'\\u2206':612,u'\\u2211':600,u'\\u2212':570,u'\\u221a':549,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':494,u'\\uf6c3':250,u'\\ufb01':556,u'\\ufb02':556}),\n'Times-BoldItalic':({'FontName':'Times-BoldItalic','Descent':-217.0,'FontBBox':(-200.0,-218.0,996.0,921.0),'FontWeight':'Bold','CapHeight':669.0,'FontFamily':'Times','Flags':0,'XHeight':462.0,'ItalicAngle':-15.0,'Ascent':683.0},{u' ':250,u'!':389,u'\"':555,u'#':500,u'$':500,u'%':833,u'&':778,u\"'\":278,u'(':333,u')':333,u'*':500,u'+':570,u',':250,u'-':333,u'.':250,u'/':278,u'0':500,u'1':500,u'2':500,u'3':500,u'4':500,u'5':500,u'6':500,u'7':500,u'8':500,u'9':500,u':':333,u';':333,u'<':570,u'=':570,u'>':570,u'?':500,u'@':832,u'A':667,u'B':667,u'C':667,u'D':722,u'E':667,u'F':667,u'G':722,u'H':778,u'I':389,u'J':500,u'K':667,u'L':611,u'M':889,u'N':722,u'O':722,u'P':611,u'Q':722,u'R':667,u'S':556,u'T':611,u'U':722,u'V':667,u'W':889,u'X':667,u'Y':611,u'Z':611,u'[':333,u'\\\\':278,u']':333,u'^':570,u'_':500,u'`':333,u'a':500,u'b':500,u'c':444,u'd':500,u'e':444,u'f':333,u'g':500,u'h':556,u'i':278,u'j':278,u'k':500,u'l':278,u'm':778,u'n':556,u'o':500,u'p':500,u'q':500,u'r':389,u's':389,u't':278,u'u':556,u'v':444,u'w':667,u'x':500,u'y':444,u'z':389,u'{':348,u'|':220,u'}':348,u'~':570,u'\\xa1':389,u'\\xa2':500,u'\\xa3':500,u'\\xa4':500,u'\\xa5':500,u'\\xa6':220,u'\\xa7':500,u'\\xa8':333,u'\\xa9':747,u'\\xaa':266,u'\\xab':500,u'\\xac':606,u'\\xae':747,u'\\xaf':333,u'\\xb0':400,u'\\xb1':570,u'\\xb2':300,u'\\xb3':300,u'\\xb4':333,u'\\xb5':576,u'\\xb6':500,u'\\xb7':250,u'\\xb8':333,u'\\xb9':300,u'\\xba':300,u'\\xbb':500,u'\\xbc':750,u'\\xbd':750,u'\\xbe':750,u'\\xbf':500,u'\\xc0':667,u'\\xc1':667,u'\\xc2':667,u'\\xc3':667,u'\\xc4':667,u'\\xc5':667,u'\\xc6':944,u'\\xc7':667,u'\\xc8':667,u'\\xc9':667,u'\\xca':667,u'\\xcb':667,u'\\xcc':389,u'\\xcd':389,u'\\xce':389,u'\\xcf':389,u'\\xd0':722,u'\\xd1':722,u'\\xd2':722,u'\\xd3':722,u'\\xd4':722,u'\\xd5':722,u'\\xd6':722,u'\\xd7':570,u'\\xd8':722,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':611,u'\\xde':611,u'\\xdf':500,u'\\xe0':500,u'\\xe1':500,u'\\xe2':500,u'\\xe3':500,u'\\xe4':500,u'\\xe5':500,u'\\xe6':722,u'\\xe7':444,u'\\xe8':444,u'\\xe9':444,u'\\xea':444,u'\\xeb':444,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':500,u'\\xf1':556,u'\\xf2':500,u'\\xf3':500,u'\\xf4':500,u'\\xf5':500,u'\\xf6':500,u'\\xf7':570,u'\\xf8':500,u'\\xf9':556,u'\\xfa':556,u'\\xfb':556,u'\\xfc':556,u'\\xfd':444,u'\\xfe':500,u'\\xff':444,u'\\u0100':667,u'\\u0101':500,u'\\u0102':667,u'\\u0103':500,u'\\u0104':667,u'\\u0105':500,u'\\u0106':667,u'\\u0107':444,u'\\u010c':667,u'\\u010d':444,u'\\u010e':722,u'\\u010f':608,u'\\u0110':722,u'\\u0111':500,u'\\u0112':667,u'\\u0113':444,u'\\u0116':667,u'\\u0117':444,u'\\u0118':667,u'\\u0119':444,u'\\u011a':667,u'\\u011b':444,u'\\u011e':722,u'\\u011f':500,u'\\u0122':722,u'\\u0123':500,u'\\u012a':389,u'\\u012b':278,u'\\u012e':389,u'\\u012f':278,u'\\u0130':389,u'\\u0131':278,u'\\u0136':667,u'\\u0137':500,u'\\u0139':611,u'\\u013a':278,u'\\u013b':611,u'\\u013c':278,u'\\u013d':611,u'\\u013e':382,u'\\u0141':611,u'\\u0142':278,u'\\u0143':722,u'\\u0144':556,u'\\u0145':722,u'\\u0146':556,u'\\u0147':722,u'\\u0148':556,u'\\u014c':722,u'\\u014d':500,u'\\u0150':722,u'\\u0151':500,u'\\u0152':944,u'\\u0153':722,u'\\u0154':667,u'\\u0155':389,u'\\u0156':667,u'\\u0157':389,u'\\u0158':667,u'\\u0159':389,u'\\u015a':556,u'\\u015b':389,u'\\u015e':556,u'\\u015f':389,u'\\u0160':556,u'\\u0161':389,u'\\u0162':611,u'\\u0163':278,u'\\u0164':611,u'\\u0165':366,u'\\u016a':722,u'\\u016b':556,u'\\u016e':722,u'\\u016f':556,u'\\u0170':722,u'\\u0171':556,u'\\u0172':722,u'\\u0173':556,u'\\u0178':611,u'\\u0179':611,u'\\u017a':389,u'\\u017b':611,u'\\u017c':389,u'\\u017d':611,u'\\u017e':389,u'\\u0192':500,u'\\u0218':556,u'\\u0219':389,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':500,u'\\u2014':1000,u'\\u2018':333,u'\\u2019':333,u'\\u201a':333,u'\\u201c':500,u'\\u201d':500,u'\\u201e':500,u'\\u2020':500,u'\\u2021':500,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':1000,u'\\u2202':494,u'\\u2206':612,u'\\u2211':600,u'\\u2212':606,u'\\u221a':549,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':494,u'\\uf6c3':250,u'\\ufb01':556,u'\\ufb02':556}),\n'Times-Italic':({'FontName':'Times-Italic','Descent':-217.0,'FontBBox':(-169.0,-217.0,1010.0,883.0),'FontWeight':'Medium','CapHeight':653.0,'FontFamily':'Times','Flags':0,'XHeight':441.0,'ItalicAngle':-15.5,'Ascent':683.0},{u' ':250,u'!':333,u'\"':420,u'#':500,u'$':500,u'%':833,u'&':778,u\"'\":214,u'(':333,u')':333,u'*':500,u'+':675,u',':250,u'-':333,u'.':250,u'/':278,u'0':500,u'1':500,u'2':500,u'3':500,u'4':500,u'5':500,u'6':500,u'7':500,u'8':500,u'9':500,u':':333,u';':333,u'<':675,u'=':675,u'>':675,u'?':500,u'@':920,u'A':611,u'B':611,u'C':667,u'D':722,u'E':611,u'F':611,u'G':722,u'H':722,u'I':333,u'J':444,u'K':667,u'L':556,u'M':833,u'N':667,u'O':722,u'P':611,u'Q':722,u'R':611,u'S':500,u'T':556,u'U':722,u'V':611,u'W':833,u'X':611,u'Y':556,u'Z':556,u'[':389,u'\\\\':278,u']':389,u'^':422,u'_':500,u'`':333,u'a':500,u'b':500,u'c':444,u'd':500,u'e':444,u'f':278,u'g':500,u'h':500,u'i':278,u'j':278,u'k':444,u'l':278,u'm':722,u'n':500,u'o':500,u'p':500,u'q':500,u'r':389,u's':389,u't':278,u'u':500,u'v':444,u'w':667,u'x':444,u'y':444,u'z':389,u'{':400,u'|':275,u'}':400,u'~':541,u'\\xa1':389,u'\\xa2':500,u'\\xa3':500,u'\\xa4':500,u'\\xa5':500,u'\\xa6':275,u'\\xa7':500,u'\\xa8':333,u'\\xa9':760,u'\\xaa':276,u'\\xab':500,u'\\xac':675,u'\\xae':760,u'\\xaf':333,u'\\xb0':400,u'\\xb1':675,u'\\xb2':300,u'\\xb3':300,u'\\xb4':333,u'\\xb5':500,u'\\xb6':523,u'\\xb7':250,u'\\xb8':333,u'\\xb9':300,u'\\xba':310,u'\\xbb':500,u'\\xbc':750,u'\\xbd':750,u'\\xbe':750,u'\\xbf':500,u'\\xc0':611,u'\\xc1':611,u'\\xc2':611,u'\\xc3':611,u'\\xc4':611,u'\\xc5':611,u'\\xc6':889,u'\\xc7':667,u'\\xc8':611,u'\\xc9':611,u'\\xca':611,u'\\xcb':611,u'\\xcc':333,u'\\xcd':333,u'\\xce':333,u'\\xcf':333,u'\\xd0':722,u'\\xd1':667,u'\\xd2':722,u'\\xd3':722,u'\\xd4':722,u'\\xd5':722,u'\\xd6':722,u'\\xd7':675,u'\\xd8':722,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':556,u'\\xde':611,u'\\xdf':500,u'\\xe0':500,u'\\xe1':500,u'\\xe2':500,u'\\xe3':500,u'\\xe4':500,u'\\xe5':500,u'\\xe6':667,u'\\xe7':444,u'\\xe8':444,u'\\xe9':444,u'\\xea':444,u'\\xeb':444,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':500,u'\\xf1':500,u'\\xf2':500,u'\\xf3':500,u'\\xf4':500,u'\\xf5':500,u'\\xf6':500,u'\\xf7':675,u'\\xf8':500,u'\\xf9':500,u'\\xfa':500,u'\\xfb':500,u'\\xfc':500,u'\\xfd':444,u'\\xfe':500,u'\\xff':444,u'\\u0100':611,u'\\u0101':500,u'\\u0102':611,u'\\u0103':500,u'\\u0104':611,u'\\u0105':500,u'\\u0106':667,u'\\u0107':444,u'\\u010c':667,u'\\u010d':444,u'\\u010e':722,u'\\u010f':544,u'\\u0110':722,u'\\u0111':500,u'\\u0112':611,u'\\u0113':444,u'\\u0116':611,u'\\u0117':444,u'\\u0118':611,u'\\u0119':444,u'\\u011a':611,u'\\u011b':444,u'\\u011e':722,u'\\u011f':500,u'\\u0122':722,u'\\u0123':500,u'\\u012a':333,u'\\u012b':278,u'\\u012e':333,u'\\u012f':278,u'\\u0130':333,u'\\u0131':278,u'\\u0136':667,u'\\u0137':444,u'\\u0139':556,u'\\u013a':278,u'\\u013b':556,u'\\u013c':278,u'\\u013d':611,u'\\u013e':300,u'\\u0141':556,u'\\u0142':278,u'\\u0143':667,u'\\u0144':500,u'\\u0145':667,u'\\u0146':500,u'\\u0147':667,u'\\u0148':500,u'\\u014c':722,u'\\u014d':500,u'\\u0150':722,u'\\u0151':500,u'\\u0152':944,u'\\u0153':667,u'\\u0154':611,u'\\u0155':389,u'\\u0156':611,u'\\u0157':389,u'\\u0158':611,u'\\u0159':389,u'\\u015a':500,u'\\u015b':389,u'\\u015e':500,u'\\u015f':389,u'\\u0160':500,u'\\u0161':389,u'\\u0162':556,u'\\u0163':278,u'\\u0164':556,u'\\u0165':300,u'\\u016a':722,u'\\u016b':500,u'\\u016e':722,u'\\u016f':500,u'\\u0170':722,u'\\u0171':500,u'\\u0172':722,u'\\u0173':500,u'\\u0178':556,u'\\u0179':556,u'\\u017a':389,u'\\u017b':556,u'\\u017c':389,u'\\u017d':556,u'\\u017e':389,u'\\u0192':500,u'\\u0218':500,u'\\u0219':389,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':500,u'\\u2014':889,u'\\u2018':333,u'\\u2019':333,u'\\u201a':333,u'\\u201c':556,u'\\u201d':556,u'\\u201e':556,u'\\u2020':500,u'\\u2021':500,u'\\u2022':350,u'\\u2026':889,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':980,u'\\u2202':476,u'\\u2206':612,u'\\u2211':600,u'\\u2212':675,u'\\u221a':453,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':471,u'\\uf6c3':250,u'\\ufb01':500,u'\\ufb02':500}),\n'Times-Roman':({'FontName':'Times-Roman','Descent':-217.0,'FontBBox':(-168.0,-218.0,1000.0,898.0),'FontWeight':'Roman','CapHeight':662.0,'FontFamily':'Times','Flags':0,'XHeight':450.0,'ItalicAngle':0.0,'Ascent':683.0},{u' ':250,u'!':333,u'\"':408,u'#':500,u'$':500,u'%':833,u'&':778,u\"'\":180,u'(':333,u')':333,u'*':500,u'+':564,u',':250,u'-':333,u'.':250,u'/':278,u'0':500,u'1':500,u'2':500,u'3':500,u'4':500,u'5':500,u'6':500,u'7':500,u'8':500,u'9':500,u':':278,u';':278,u'<':564,u'=':564,u'>':564,u'?':444,u'@':921,u'A':722,u'B':667,u'C':667,u'D':722,u'E':611,u'F':556,u'G':722,u'H':722,u'I':333,u'J':389,u'K':722,u'L':611,u'M':889,u'N':722,u'O':722,u'P':556,u'Q':722,u'R':667,u'S':556,u'T':611,u'U':722,u'V':722,u'W':944,u'X':722,u'Y':722,u'Z':611,u'[':333,u'\\\\':278,u']':333,u'^':469,u'_':500,u'`':333,u'a':444,u'b':500,u'c':444,u'd':500,u'e':444,u'f':333,u'g':500,u'h':500,u'i':278,u'j':278,u'k':500,u'l':278,u'm':778,u'n':500,u'o':500,u'p':500,u'q':500,u'r':333,u's':389,u't':278,u'u':500,u'v':500,u'w':722,u'x':500,u'y':500,u'z':444,u'{':480,u'|':200,u'}':480,u'~':541,u'\\xa1':333,u'\\xa2':500,u'\\xa3':500,u'\\xa4':500,u'\\xa5':500,u'\\xa6':200,u'\\xa7':500,u'\\xa8':333,u'\\xa9':760,u'\\xaa':276,u'\\xab':500,u'\\xac':564,u'\\xae':760,u'\\xaf':333,u'\\xb0':400,u'\\xb1':564,u'\\xb2':300,u'\\xb3':300,u'\\xb4':333,u'\\xb5':500,u'\\xb6':453,u'\\xb7':250,u'\\xb8':333,u'\\xb9':300,u'\\xba':310,u'\\xbb':500,u'\\xbc':750,u'\\xbd':750,u'\\xbe':750,u'\\xbf':444,u'\\xc0':722,u'\\xc1':722,u'\\xc2':722,u'\\xc3':722,u'\\xc4':722,u'\\xc5':722,u'\\xc6':889,u'\\xc7':667,u'\\xc8':611,u'\\xc9':611,u'\\xca':611,u'\\xcb':611,u'\\xcc':333,u'\\xcd':333,u'\\xce':333,u'\\xcf':333,u'\\xd0':722,u'\\xd1':722,u'\\xd2':722,u'\\xd3':722,u'\\xd4':722,u'\\xd5':722,u'\\xd6':722,u'\\xd7':564,u'\\xd8':722,u'\\xd9':722,u'\\xda':722,u'\\xdb':722,u'\\xdc':722,u'\\xdd':722,u'\\xde':556,u'\\xdf':500,u'\\xe0':444,u'\\xe1':444,u'\\xe2':444,u'\\xe3':444,u'\\xe4':444,u'\\xe5':444,u'\\xe6':667,u'\\xe7':444,u'\\xe8':444,u'\\xe9':444,u'\\xea':444,u'\\xeb':444,u'\\xec':278,u'\\xed':278,u'\\xee':278,u'\\xef':278,u'\\xf0':500,u'\\xf1':500,u'\\xf2':500,u'\\xf3':500,u'\\xf4':500,u'\\xf5':500,u'\\xf6':500,u'\\xf7':564,u'\\xf8':500,u'\\xf9':500,u'\\xfa':500,u'\\xfb':500,u'\\xfc':500,u'\\xfd':500,u'\\xfe':500,u'\\xff':500,u'\\u0100':722,u'\\u0101':444,u'\\u0102':722,u'\\u0103':444,u'\\u0104':722,u'\\u0105':444,u'\\u0106':667,u'\\u0107':444,u'\\u010c':667,u'\\u010d':444,u'\\u010e':722,u'\\u010f':588,u'\\u0110':722,u'\\u0111':500,u'\\u0112':611,u'\\u0113':444,u'\\u0116':611,u'\\u0117':444,u'\\u0118':611,u'\\u0119':444,u'\\u011a':611,u'\\u011b':444,u'\\u011e':722,u'\\u011f':500,u'\\u0122':722,u'\\u0123':500,u'\\u012a':333,u'\\u012b':278,u'\\u012e':333,u'\\u012f':278,u'\\u0130':333,u'\\u0131':278,u'\\u0136':722,u'\\u0137':500,u'\\u0139':611,u'\\u013a':278,u'\\u013b':611,u'\\u013c':278,u'\\u013d':611,u'\\u013e':344,u'\\u0141':611,u'\\u0142':278,u'\\u0143':722,u'\\u0144':500,u'\\u0145':722,u'\\u0146':500,u'\\u0147':722,u'\\u0148':500,u'\\u014c':722,u'\\u014d':500,u'\\u0150':722,u'\\u0151':500,u'\\u0152':889,u'\\u0153':722,u'\\u0154':667,u'\\u0155':333,u'\\u0156':667,u'\\u0157':333,u'\\u0158':667,u'\\u0159':333,u'\\u015a':556,u'\\u015b':389,u'\\u015e':556,u'\\u015f':389,u'\\u0160':556,u'\\u0161':389,u'\\u0162':611,u'\\u0163':278,u'\\u0164':611,u'\\u0165':326,u'\\u016a':722,u'\\u016b':500,u'\\u016e':722,u'\\u016f':500,u'\\u0170':722,u'\\u0171':500,u'\\u0172':722,u'\\u0173':500,u'\\u0178':722,u'\\u0179':611,u'\\u017a':444,u'\\u017b':611,u'\\u017c':444,u'\\u017d':611,u'\\u017e':444,u'\\u0192':500,u'\\u0218':556,u'\\u0219':389,u'\\u02c6':333,u'\\u02c7':333,u'\\u02d8':333,u'\\u02d9':333,u'\\u02da':333,u'\\u02db':333,u'\\u02dc':333,u'\\u02dd':333,u'\\u2013':500,u'\\u2014':1000,u'\\u2018':333,u'\\u2019':333,u'\\u201a':333,u'\\u201c':444,u'\\u201d':444,u'\\u201e':444,u'\\u2020':500,u'\\u2021':500,u'\\u2022':350,u'\\u2026':1000,u'\\u2030':1000,u'\\u2039':333,u'\\u203a':333,u'\\u2044':167,u'\\u2122':980,u'\\u2202':476,u'\\u2206':612,u'\\u2211':600,u'\\u2212':564,u'\\u221a':453,u'\\u2260':549,u'\\u2264':549,u'\\u2265':549,u'\\u25ca':471,u'\\uf6c3':250,u'\\ufb01':556,u'\\ufb02':556}),\n'ZapfDingbats':({'FontName':'ZapfDingbats','FontBBox':(-1.0,-143.0,981.0,820.0),'FontWeight':'Medium','FontFamily':'ITC','Flags':0,'ItalicAngle':0.0},{u'\\x01':974,u'\\x02':961,u'\\x03':980,u'\\x04':719,u'\\x05':789,u'\\x06':494,u'\\x07':552,u'\\x08':537,u'\\t':577,u'\\n':692,u'\\x0b':960,u'\\x0c':939,u'\\r':549,u'\\x0e':855,u'\\x0f':911,u'\\x10':933,u'\\x11':945,u'\\x12':974,u'\\x13':755,u'\\x14':846,u'\\x15':762,u'\\x16':761,u'\\x17':571,u'\\x18':677,u'\\x19':763,u'\\x1a':760,u'\\x1b':759,u'\\x1c':754,u'\\x1d':786,u'\\x1e':788,u'\\x1f':788,u' ':790,u'!':793,u'\"':794,u'#':816,u'$':823,u'%':789,u'&':841,u\"'\":823,u'(':833,u')':816,u'*':831,u'+':923,u',':744,u'-':723,u'.':749,u'/':790,u'0':792,u'1':695,u'2':776,u'3':768,u'4':792,u'5':759,u'6':707,u'7':708,u'8':682,u'9':701,u':':826,u';':815,u'<':789,u'=':789,u'>':707,u'?':687,u'@':696,u'A':689,u'B':786,u'C':787,u'D':713,u'E':791,u'F':785,u'G':791,u'H':873,u'I':761,u'J':762,u'K':759,u'L':892,u'M':892,u'N':788,u'O':784,u'Q':438,u'R':138,u'S':277,u'T':415,u'U':509,u'V':410,u'W':234,u'X':234,u'Y':390,u'Z':390,u'[':276,u'\\\\':276,u']':317,u'^':317,u'_':334,u'`':334,u'a':392,u'b':392,u'c':668,u'd':668,u'e':732,u'f':544,u'g':544,u'h':910,u'i':911,u'j':667,u'k':760,u'l':760,u'm':626,u'n':694,u'o':595,u'p':776,u'u':690,u'v':791,u'w':790,u'x':788,u'y':788,u'z':788,u'{':788,u'|':788,u'}':788,u'~':788,u'\\x7f':788,u'\\x80':788,u'\\x81':788,u'\\x82':788,u'\\x83':788,u'\\x84':788,u'\\x85':788,u'\\x86':788,u'\\x87':788,u'\\x88':788,u'\\x89':788,u'\\x8a':788,u'\\x8b':788,u'\\x8c':788,u'\\x8d':788,u'\\x8e':788,u'\\x8f':788,u'\\x90':788,u'\\x91':788,u'\\x92':788,u'\\x93':788,u'\\x94':788,u'\\x95':788,u'\\x96':788,u'\\x97':788,u'\\x98':788,u'\\x99':788,u'\\x9a':788,u'\\x9b':788,u'\\x9c':788,u'\\x9d':788,u'\\x9e':788,u'\\x9f':788,u'\\xa0':894,u'\\xa1':838,u'\\xa2':924,u'\\xa3':1016,u'\\xa4':458,u'\\xa5':924,u'\\xa6':918,u'\\xa7':927,u'\\xa8':928,u'\\xa9':928,u'\\xaa':834,u'\\xab':873,u'\\xac':828,u'\\xad':924,u'\\xae':917,u'\\xaf':930,u'\\xb0':931,u'\\xb1':463,u'\\xb2':883,u'\\xb3':836,u'\\xb4':867,u'\\xb5':696,u'\\xb6':874,u'\\xb7':760,u'\\xb8':946,u'\\xb9':865,u'\\xba':967,u'\\xbb':831,u'\\xbc':873,u'\\xbd':927,u'\\xbe':970,u'\\xbf':918,u'\\xc0':748,u'\\xc1':836,u'\\xc2':771,u'\\xc3':888,u'\\xc4':748,u'\\xc5':771,u'\\xc6':888,u'\\xc7':867,u'\\xc8':696,u'\\xc9':874,u'\\xca':974,u'\\xcb':762,u'\\xcc':759,u'\\xcd':509,u'\\xce':410}),\n}\n", []], "Lib.site-packages.pdfminer.pdfdocument": [".py", "#!/usr/bin/env python\nimport re\nimport struct\nimport logging\ntry :\n import hashlib as md5\nexcept ImportError:\n import md5\ntry :\n from Crypto.Cipher import ARC4\n from Crypto.Cipher import AES\n from Crypto.Hash import SHA256\nexcept ImportError:\n AES=SHA256=None\n from . import arcfour as ARC4\nfrom .psparser import PSEOF\nfrom .psparser import literal_name\nfrom .psparser import LIT\nfrom .psparser import KWD\nfrom .psparser import STRICT\nfrom .pdftypes import PDFException\nfrom .pdftypes import PDFTypeError\nfrom .pdftypes import PDFStream\nfrom .pdftypes import PDFObjectNotFound\nfrom .pdftypes import decipher_all\nfrom .pdftypes import int_value\nfrom .pdftypes import bytes_value\nfrom .pdftypes import list_value\nfrom .pdftypes import dict_value\nfrom .pdftypes import stream_value\nfrom .pdfparser import PDFSyntaxError\nfrom .pdfparser import PDFStreamParser\nfrom .utils import choplist\nfrom .utils import nunpack\nfrom .utils import decode_text\n\n\n\n\nclass PDFNoValidXRef(PDFSyntaxError):\n pass\n \nclass PDFNoOutlines(PDFException):\n pass\n \nclass PDFDestinationNotFound(PDFException):\n pass\n \nclass PDFEncryptionError(PDFException):\n pass\n \nclass PDFPasswordIncorrect(PDFEncryptionError):\n pass\n \nclass PDFTextExtractionNotAllowed(PDFEncryptionError):\n pass\n \n \nLITERAL_OBJSTM=LIT('ObjStm')\nLITERAL_XREF=LIT('XRef')\nLITERAL_CATALOG=LIT('Catalog')\n\n\n\n\nclass PDFBaseXRef:\n\n debug=False\n \n def get_trailer(self):\n  raise NotImplementedError\n  \n def get_objids(self):\n  return []\n  \n  \n  \n  \n def get_pos(self,objid):\n  raise KeyError(objid)\n  \n  \n  \n  \nclass PDFXRef(PDFBaseXRef):\n\n def __init__(self):\n  self.offsets={}\n  self.trailer={}\n  return\n  \n def __repr__(self):\n  return '<PDFXRef: offsets=%r>'%(self.offsets.keys())\n  \n def load(self,parser):\n  while 1:\n   try :\n    (pos,line)=parser.nextline()\n    if not line.strip():\n     continue\n   except PSEOF:\n    raise PDFNoValidXRef('Unexpected EOF - file corrupted?')\n   if not line:\n    raise PDFNoValidXRef('Premature eof: %r'%parser)\n   if line.startswith(b'trailer'):\n    parser.seek(pos)\n    break\n   f=line.strip().split(b' ')\n   if len(f)!=2:\n    raise PDFNoValidXRef('Trailer not found: %r: line=%r'%(parser,line))\n   try :\n    (start,nobjs)=map(int,f)\n   except ValueError:\n    raise PDFNoValidXRef('Invalid line: %r: line=%r'%(parser,line))\n   for objid in range(start,start+nobjs):\n    try :\n     (_,line)=parser.nextline()\n    except PSEOF:\n     raise PDFNoValidXRef('Unexpected EOF - file corrupted?')\n    f=line.strip().split(b' ')\n    if len(f)!=3:\n     raise PDFNoValidXRef('Invalid XRef format: %r, line=%r'%(parser,line))\n    (pos,genno,use)=f\n    if use !=b'n':\n     continue\n    self.offsets[objid]=(None ,int(pos),int(genno))\n  if self.debug:logging.info('xref objects: %r'%self.offsets)\n  self.load_trailer(parser)\n  return\n  \n KEYWORD_TRAILER=KWD(b'trailer')\n \n def load_trailer(self,parser):\n  try :\n   (_,kwd)=parser.nexttoken()\n   assert kwd is self.KEYWORD_TRAILER\n   (_,dic)=parser.nextobject()\n  except PSEOF:\n   x=parser.pop(1)\n   if not x:\n    raise PDFNoValidXRef('Unexpected EOF - file corrupted')\n   (_,dic)=x[0]\n  self.trailer.update(dict_value(dic))\n  return\n  \n def get_trailer(self):\n  return self.trailer\n  \n def get_objids(self):\n  return self.offsets.keys()\n  \n def get_pos(self,objid):\n  try :\n   return self.offsets[objid]\n  except KeyError:\n   raise\n   \n   \n   \n   \nclass PDFXRefFallback(PDFXRef):\n\n def __repr__(self):\n  return '<PDFXRefFallback: offsets=%r>'%(self.offsets.keys())\n  \n PDFOBJ_CUE=re.compile(br'^(\\d+)\\s+(\\d+)\\s+obj\\b')\n \n def load(self,parser):\n  parser.seek(0)\n  while 1:\n   try :\n    (pos,line)=parser.nextline()\n   except PSEOF:\n    break\n   if line.startswith(b'trailer'):\n    parser.seek(pos)\n    self.load_trailer(parser)\n    if self.debug:logging.info('trailer: %r'%self.get_trailer())\n    break\n   m=self.PDFOBJ_CUE.match(line)\n   if not m:\n    continue\n   (objid,genno)=m.groups()\n   objid=int(objid)\n   genno=int(genno)\n   self.offsets[objid]=(None ,pos,genno)\n   \n   parser.seek(pos)\n   (_,obj)=parser.nextobject()\n   if isinstance(obj,PDFStream)and obj.get('Type')is LITERAL_OBJSTM:\n    stream=stream_value(obj)\n    try :\n     n=stream['N']\n    except KeyError:\n     if STRICT:\n      raise PDFSyntaxError('N is not defined: %r'%stream)\n     n=0\n    parser1=PDFStreamParser(stream.get_data())\n    objs=[]\n    try :\n     while 1:\n      (_,obj)=parser1.nextobject()\n      objs.append(obj)\n    except PSEOF:\n     pass\n    n=min(n,len(objs)//2)\n    for index in range(n):\n     objid1=objs[index *2]\n     self.offsets[objid1]=(objid,index,0)\n  return\n  \n  \n  \n  \nclass PDFXRefStream(PDFBaseXRef):\n\n debug=False\n \n def __init__(self):\n  self.data=None\n  self.entlen=None\n  self.fl1=self.fl2=self.fl3=None\n  self.ranges=[]\n  return\n  \n def __repr__(self):\n  return '<PDFXRefStream: ranges=%r>'%(self.ranges)\n  \n def load(self,parser):\n  (_,objid)=parser.nexttoken()\n  (_,genno)=parser.nexttoken()\n  (_,kwd)=parser.nexttoken()\n  (_,stream)=parser.nextobject()\n  if not isinstance(stream,PDFStream)or stream['Type']is not LITERAL_XREF:\n   raise PDFNoValidXRef('Invalid PDF stream spec.')\n  size=stream['Size']\n  index_array=stream.get('Index',(0,size))\n  if len(index_array)%2 !=0:\n   raise PDFSyntaxError('Invalid index number')\n  self.ranges.extend(choplist(2,index_array))\n  (self.fl1,self.fl2,self.fl3)=stream['W']\n  self.data=stream.get_data()\n  self.entlen=self.fl1+self.fl2+self.fl3\n  self.trailer=stream.attrs\n  if self.debug:\n   logging.info('xref stream: objid=%s, fields=%d,%d,%d'%\n   (', '.join(map(repr,self.ranges)),\n   self.fl1,self.fl2,self.fl3))\n  return\n  \n def get_trailer(self):\n  return self.trailer\n  \n def get_objids(self):\n  for (start,nobjs)in self.ranges:\n   for i in range(nobjs):\n    offset=self.entlen *i\n    ent=self.data[offset:offset+self.entlen]\n    f1=nunpack(ent[:self.fl1],1)\n    if f1 ==1 or f1 ==2:\n     yield start+i\n  return\n  \n def get_pos(self,objid):\n  index=0\n  for (start,nobjs)in self.ranges:\n   if start <=objid and objid <start+nobjs:\n    index +=objid -start\n    break\n   else :\n    index +=nobjs\n  else :\n   raise KeyError(objid)\n  offset=self.entlen *index\n  ent=self.data[offset:offset+self.entlen]\n  f1=nunpack(ent[:self.fl1],1)\n  f2=nunpack(ent[self.fl1:self.fl1+self.fl2])\n  f3=nunpack(ent[self.fl1+self.fl2:])\n  if f1 ==1:\n   return (None ,f2,f3)\n  elif f1 ==2:\n   return (f2,f3,0)\n  else :\n  \n   raise KeyError(objid)\n   \n   \n   \n   \nclass PDFStandardSecurityHandler:\n\n PASSWORD_PADDING=(b'(\\xbfN^Nu\\x8aAd\\x00NV\\xff\\xfa\\x01\\x08'\n b'..\\x00\\xb6\\xd0h>\\x80/\\x0c\\xa9\\xfedSiz')\n supported_revisions=(2,3)\n \n def __init__(self,docid,param,password=b''):\n  self.docid=docid\n  self.param=param\n  self.password=password\n  self.init()\n  return\n  \n def init(self):\n  self.init_params()\n  if self.r not in self.supported_revisions:\n   raise PDFEncryptionError('Unsupported revision: param=%r'%self.param)\n  self.init_key()\n  return\n  \n def init_params(self):\n  self.v=int_value(self.param.get('V',0))\n  self.r=int_value(self.param['R'])\n  self.p=int_value(self.param['P'])\n  self.o=bytes_value(self.param['O'])\n  self.u=bytes_value(self.param['U'])\n  self.length=int_value(self.param.get('Length',40))\n  return\n  \n def init_key(self):\n  self.key=self.authenticate(self.password)\n  if self.key is None :\n   raise PDFPasswordIncorrect\n  return\n  \n def is_printable(self):\n  return bool(self.p&4)\n  \n def is_modifiable(self):\n  return bool(self.p&8)\n  \n def is_extractable(self):\n  return bool(self.p&16)\n  \n def compute_u(self,key):\n  if self.r ==2:\n  \n   return ARC4.new(key).encrypt(self.PASSWORD_PADDING)\n  else :\n  \n   hash=md5.md5(self.PASSWORD_PADDING)\n   hash.update(self.docid[0])\n   result=ARC4.new(key).encrypt(hash.digest())\n   for i in range(1,20):\n    k=bytes((c ^i)for c in key)\n    result=ARC4.new(k).encrypt(result)\n   result +=result\n   return result\n   \n def compute_encryption_key(self,password):\n \n  password=(password+self.PASSWORD_PADDING)[:32]\n  hash=md5.md5(password)\n  hash.update(self.o)\n  hash.update(struct.pack('<l',self.p))\n  hash.update(self.docid[0])\n  if self.r >=4:\n   if not self.encrypt_metadata:\n    hash.update(b'\\xff\\xff\\xff\\xff')\n  result=hash.digest()\n  n=5\n  if self.r >=3:\n   n=self.length //8\n   for _ in range(50):\n    result=md5.md5(result[:n]).digest()\n  return result[:n]\n  \n def authenticate(self,password):\n  key=self.authenticate_user_password(password)\n  if key is None :\n   key=self.authenticate_owner_password(password)\n  return key\n  \n def authenticate_user_password(self,password):\n  key=self.compute_encryption_key(password)\n  if self.verify_encryption_key(key):\n   return key\n  else :\n   return None\n   \n def verify_encryption_key(self,key):\n \n  u=self.compute_u(key)\n  if self.r ==2:\n   return u ==self.u\n  return u[:16]==self.u[:16]\n  \n def authenticate_owner_password(self,password):\n \n  password=(password+self.PASSWORD_PADDING)[:32]\n  hash=md5.md5(password)\n  if self.r >=3:\n   for _ in range(50):\n    hash=md5.md5(hash.digest())\n  n=5\n  if self.r >=3:\n   n=self.length //8\n  key=hash.digest()[:n]\n  if self.r ==2:\n   user_password=ARC4.new(key).decrypt(self.o)\n  else :\n   user_password=self.o\n   for i in range(19,-1,-1):\n    k=bytes((c ^i)for c in key)\n    user_password=ARC4.new(k).decrypt(user_password)\n  return self.authenticate_user_password(user_password)\n  \n def decrypt(self,objid,genno,data,attrs=None ):\n  return self.decrypt_rc4(objid,genno,data)\n  \n def decrypt_rc4(self,objid,genno,data):\n  key=self.key+struct.pack('<L',objid)[:3]+struct.pack('<L',genno)[:2]\n  hash=md5.md5(key)\n  key=hash.digest()[:min(len(key),16)]\n  return ARC4.new(key).decrypt(data)\n  \n  \nclass PDFStandardSecurityHandlerV4(PDFStandardSecurityHandler):\n\n supported_revisions=(4,)\n \n def init_params(self):\n  super(PDFStandardSecurityHandlerV4,self).init_params()\n  self.length=128\n  self.cf=dict_value(self.param.get('CF'))\n  self.stmf=literal_name(self.param['StmF'])\n  self.strf=literal_name(self.param['StrF'])\n  self.encrypt_metadata=bool(self.param.get('EncryptMetadata',True ))\n  if self.stmf !=self.strf:\n   raise PDFEncryptionError('Unsupported crypt filter: param=%r'%self.param)\n  self.cfm={}\n  for k,v in self.cf.items():\n   f=self.get_cfm(literal_name(v['CFM']))\n   if f is None :\n    raise PDFEncryptionError('Unknown crypt filter method: param=%r'%self.param)\n   self.cfm[k]=f\n  self.cfm['Identity']=self.decrypt_identity\n  if self.strf not in self.cfm:\n   raise PDFEncryptionError('Undefined crypt filter: param=%r'%self.param)\n  return\n  \n def get_cfm(self,name):\n  if name =='V2':\n   return self.decrypt_rc4\n  elif name =='AESV2':\n   return self.decrypt_aes128\n  else :\n   return None\n   \n def decrypt(self,objid,genno,data,attrs=None ,name=None ):\n  if not self.encrypt_metadata and attrs is not None :\n   t=attrs.get('Type')\n   if t is not None and literal_name(t)=='Metadata':\n    return data\n  if name is None :\n   name=self.strf\n  return self.cfm[name](objid,genno,data)\n  \n def decrypt_identity(self,objid,genno,data):\n  return data\n  \n def decrypt_aes128(self,objid,genno,data):\n  key=self.key+struct.pack('<L',objid)[:3]+struct.pack('<L',genno)[:2]+b'sAlT'\n  hash=md5.md5(key)\n  key=hash.digest()[:min(len(key),16)]\n  return AES.new(key,mode=AES.MODE_CBC,IV=data[:16]).decrypt(data[16:])\n  \n  \nclass PDFStandardSecurityHandlerV5(PDFStandardSecurityHandlerV4):\n\n supported_revisions=(5,)\n \n def init_params(self):\n  super(PDFStandardSecurityHandlerV5,self).init_params()\n  self.length=256\n  self.oe=bytes_value(self.param['OE'])\n  self.ue=bytes_value(self.param['UE'])\n  self.o_hash=self.o[:32]\n  self.o_validation_salt=self.o[32:40]\n  self.o_key_salt=self.o[40:]\n  self.u_hash=self.u[:32]\n  self.u_validation_salt=self.u[32:40]\n  self.u_key_salt=self.u[40:]\n  return\n  \n def get_cfm(self,name):\n  if name =='AESV3':\n   return self.decrypt_aes256\n  else :\n   return None\n   \n def authenticate(self,password):\n  password=password[:127]\n  hash=SHA256.new(password)\n  hash.update(self.o_validation_salt)\n  hash.update(self.u)\n  if hash.digest()==self.o_hash:\n   hash=SHA256.new(password)\n   hash.update(self.o_key_salt)\n   hash.update(self.u)\n   return AES.new(hash.digest(),mode=AES.MODE_CBC,IV=b'\\x00'*16).decrypt(self.oe)\n  hash=SHA256.new(password)\n  hash.update(self.u_validation_salt)\n  if hash.digest()==self.u_hash:\n   hash=SHA256.new(password)\n   hash.update(self.u_key_salt)\n   return AES.new(hash.digest(),mode=AES.MODE_CBC,IV=b'\\x00'*16).decrypt(self.ue)\n  return None\n  \n def decrypt_aes256(self,objid,genno,data):\n  return AES.new(self.key,mode=AES.MODE_CBC,IV=data[:16]).decrypt(data[16:])\n  \n  \n  \n  \nclass PDFDocument:\n\n ''\n\n\n\n\n\n\n\n\n\n \n \n security_handler_registry={\n 1:PDFStandardSecurityHandler,\n 2:PDFStandardSecurityHandler,\n }\n if AES is not None :\n  security_handler_registry[4]=PDFStandardSecurityHandlerV4\n  if SHA256 is not None :\n   security_handler_registry[5]=PDFStandardSecurityHandlerV5\n   \n debug=0\n \n def __init__(self,parser,password=b'',caching=True ,fallback=True ):\n  ''\n  self.caching=caching\n  self.xrefs=[]\n  self.info=[]\n  self.catalog=None\n  self.encryption=None\n  self.decipher=None\n  self._parser=None\n  self._cached_objs={}\n  self._parsed_objs={}\n  self._parser=parser\n  self._parser.set_document(self)\n  self.is_printable=self.is_modifiable=self.is_extractable=True\n  \n  \n  try :\n   pos=self.find_xref(parser)\n   self.read_xref_from(parser,pos,self.xrefs)\n  except PDFNoValidXRef:\n   fallback=True\n  if fallback:\n   parser.fallback=True\n   xref=PDFXRefFallback()\n   xref.load(parser)\n   self.xrefs.append(xref)\n  for xref in self.xrefs:\n   trailer=xref.get_trailer()\n   if not trailer:\n    continue\n    \n   if 'Encrypt'in trailer:\n   \n    self.encryption=(list_value(trailer['ID']),\n    dict_value(trailer['Encrypt']))\n    self._initialize_password(password)\n   if 'Info'in trailer:\n    self.info.append(dict_value(trailer['Info']))\n   if 'Root'in trailer:\n   \n    self.catalog=dict_value(trailer['Root'])\n    break\n  else :\n   raise PDFSyntaxError('No /Root object! - Is this really a PDF?')\n  if self.catalog.get('Type')is not LITERAL_CATALOG:\n   if STRICT:\n    raise PDFSyntaxError('Catalog not found!')\n  return\n  \n  \n  \n def _initialize_password(self,password=b''):\n  (docid,param)=self.encryption\n  if literal_name(param.get('Filter'))!='Standard':\n   raise PDFEncryptionError('Unknown filter: param=%r'%param)\n  v=int_value(param.get('V',0))\n  factory=self.security_handler_registry.get(v)\n  if factory is None :\n   raise PDFEncryptionError('Unknown algorithm: param=%r'%param)\n  handler=factory(docid,param,password)\n  self.decipher=handler.decrypt\n  self.is_printable=handler.is_printable()\n  self.is_modifiable=handler.is_modifiable()\n  self.is_extractable=handler.is_extractable()\n  self._parser.fallback=False\n  return\n  \n def _getobj_objstm(self,stream,index,objid):\n  if stream.objid in self._parsed_objs:\n   (objs,n)=self._parsed_objs[stream.objid]\n  else :\n   (objs,n)=self._get_objects(stream)\n   if self.caching:\n    self._parsed_objs[stream.objid]=(objs,n)\n  i=n *2+index\n  try :\n   obj=objs[i]\n  except IndexError:\n   raise PDFSyntaxError('index too big: %r'%index)\n  return obj\n  \n def _get_objects(self,stream):\n  if stream.get('Type')is not LITERAL_OBJSTM:\n   if STRICT:\n    raise PDFSyntaxError('Not a stream object: %r'%stream)\n  try :\n   n=stream['N']\n  except KeyError:\n   if STRICT:\n    raise PDFSyntaxError('N is not defined: %r'%stream)\n   n=0\n  parser=PDFStreamParser(stream.get_data())\n  parser.set_document(self)\n  objs=[]\n  try :\n   while 1:\n    (_,obj)=parser.nextobject()\n    objs.append(obj)\n  except PSEOF:\n   pass\n  return (objs,n)\n  \n KEYWORD_OBJ=KWD(b'obj')\n \n def _getobj_parse(self,pos,objid):\n  self._parser.seek(pos)\n  (_,objid1)=self._parser.nexttoken()\n  if objid1 !=objid:\n   raise PDFSyntaxError('objid mismatch: %r=%r'%(objid1,objid))\n  (_,genno)=self._parser.nexttoken()\n  (_,kwd)=self._parser.nexttoken()\n  if kwd is not self.KEYWORD_OBJ:\n   raise PDFSyntaxError('Invalid object spec: offset=%r'%pos)\n  (_,obj)=self._parser.nextobject()\n  return obj\n  \n  \n def getobj(self,objid):\n  assert objid !=0\n  if not self.xrefs:\n   raise PDFException('PDFDocument is not initialized')\n  if self.debug:\n   logging.debug('getobj: objid=%r'%objid)\n  if objid in self._cached_objs:\n   (obj,genno)=self._cached_objs[objid]\n  else :\n   for xref in self.xrefs:\n    try :\n     (strmid,index,genno)=xref.get_pos(objid)\n    except KeyError:\n     continue\n    try :\n     if strmid is not None :\n      stream=stream_value(self.getobj(strmid))\n      obj=self._getobj_objstm(stream,index,objid)\n     else :\n      obj=self._getobj_parse(index,objid)\n      if self.decipher:\n       obj=decipher_all(self.decipher,objid,genno,obj)\n       \n     if isinstance(obj,PDFStream):\n      obj.set_objid(objid,genno)\n     break\n    except (PSEOF,PDFSyntaxError):\n     continue\n   else :\n    raise PDFObjectNotFound(objid)\n   if self.debug:\n    logging.debug('register: objid=%r: %r'%(objid,obj))\n   if self.caching:\n    self._cached_objs[objid]=(obj,genno)\n  return obj\n  \n def get_outlines(self):\n  if 'Outlines'not in self.catalog:\n   raise PDFNoOutlines\n   \n  def search(entry,level):\n   entry=dict_value(entry)\n   if 'Title'in entry:\n    if 'A'in entry or 'Dest'in entry:\n     title=decode_text(bytes_value(entry['Title']))\n     dest=entry.get('Dest')\n     action=entry.get('A')\n     se=entry.get('SE')\n     yield (level,title,dest,action,se)\n   if 'First'in entry and 'Last'in entry:\n    for x in search(entry['First'],level+1):\n     yield x\n   if 'Next'in entry:\n    for x in search(entry['Next'],level):\n     yield x\n   return\n  return search(self.catalog['Outlines'],0)\n  \n def lookup_name(self,cat,key):\n  try :\n   names=dict_value(self.catalog['Names'])\n  except (PDFTypeError,KeyError):\n   raise KeyError((cat,key))\n   \n  d0=dict_value(names[cat])\n  \n  def lookup(d):\n   if 'Limits'in d:\n    (k1,k2)=list_value(d['Limits'])\n    if key <k1 or k2 <key:\n     return None\n   if 'Names'in d:\n    objs=list_value(d['Names'])\n    names=dict(choplist(2,objs))\n    return names[key]\n   if 'Kids'in d:\n    for c in list_value(d['Kids']):\n     v=lookup(dict_value(c))\n     if v:\n      return v\n   raise KeyError((cat,key))\n  return lookup(d0)\n  \n def get_dest(self,name):\n  try :\n  \n   obj=self.lookup_name('Dests',name)\n  except KeyError:\n  \n   if 'Dests'not in self.catalog:\n    raise PDFDestinationNotFound(name)\n   d0=dict_value(self.catalog['Dests'])\n   if name not in d0:\n    raise PDFDestinationNotFound(name)\n   obj=d0[name]\n  return obj\n  \n  \n def find_xref(self,parser):\n  ''\n  \n  prev=None\n  for line in parser.revreadlines():\n   line=line.strip()\n   if self.debug:\n    logging.debug('find_xref: %r'%line)\n   if line ==b'startxref':\n    break\n   if line:\n    prev=line\n  else :\n   raise PDFNoValidXRef('Unexpected EOF')\n  if self.debug:\n   logging.info('xref found: pos=%r'%prev)\n  return int(prev)\n  \n  \n def read_xref_from(self,parser,start,xrefs):\n  ''\n  parser.seek(start)\n  parser.reset()\n  try :\n   (pos,token)=parser.nexttoken()\n  except PSEOF:\n   raise PDFNoValidXRef('Unexpected EOF')\n  if self.debug:\n   logging.info('read_xref_from: start=%d, token=%r'%(start,token))\n  if isinstance(token,int):\n  \n   parser.seek(pos)\n   parser.reset()\n   xref=PDFXRefStream()\n   xref.load(parser)\n  else :\n   if token is parser.KEYWORD_XREF:\n    parser.nextline()\n   xref=PDFXRef()\n   xref.load(parser)\n  xrefs.append(xref)\n  trailer=xref.get_trailer()\n  if self.debug:\n   logging.info('trailer: %r'%trailer)\n  if 'XRefStm'in trailer:\n   pos=int_value(trailer['XRefStm'])\n   self.read_xref_from(parser,pos,xrefs)\n  if 'Prev'in trailer:\n  \n   pos=int_value(trailer['Prev'])\n   self.read_xref_from(parser,pos,xrefs)\n  return\n", ["Crypto.Cipher", "Crypto.Hash", "Lib.site-packages.pdfminer", "Lib.site-packages.pdfminer.arcfour", "Lib.site-packages.pdfminer.pdfparser", "Lib.site-packages.pdfminer.pdftypes", "Lib.site-packages.pdfminer.psparser", "Lib.site-packages.pdfminer.utils", "hashlib", "logging", "md5", "re", "struct"]], "Lib.site-packages.pdfminer.utils": [".py", "#!/usr/bin/env python\n''\n\n\nimport struct\nfrom sys import maxsize as INF\n\n\n\n\ndef apply_png_predictor(pred,colors,columns,bitspercomponent,data):\n if bitspercomponent !=8:\n \n  raise ValueError(\"Unsupported `bitspercomponent': %d\"%bitspercomponent)\n nbytes=colors *columns *bitspercomponent //8\n i=0\n buf=b''\n line0=b'\\x00'*columns\n for i in range(0,len(data),nbytes+1):\n  ft=data[i:i+1]\n  i +=1\n  line1=data[i:i+nbytes]\n  line2=b''\n  if ft ==b'\\x00':\n  \n   line2 +=line1\n  elif ft ==b'\\x01':\n  \n   c=0\n   for b in line1:\n    c=(c+b)&255\n    line2 +=bytes([c])\n  elif ft ==b'\\x02':\n  \n   for (a,b)in zip(line0,line1):\n    c=(a+b)&255\n    line2 +=bytes([c])\n  elif ft ==b'\\x03':\n  \n   c=0\n   for (a,b)in zip(line0,line1):\n    c=((c+a+b)//2)&255\n    line2 +=bytes([c])\n  else :\n  \n   raise ValueError(\"Unsupported predictor value: %d\"%ft)\n  buf +=line2\n  line0=line2\n return buf\n \n \n \n \nMATRIX_IDENTITY=(1,0,0,1,0,0)\n\n\ndef mult_matrix(m1,m0):\n (a1,b1,c1,d1,e1,f1)=m1\n (a0,b0,c0,d0,e0,f0)=m0\n '' \n return (a0 *a1+c0 *b1,b0 *a1+d0 *b1,\n a0 *c1+c0 *d1,b0 *c1+d0 *d1,\n a0 *e1+c0 *f1+e0,b0 *e1+d0 *f1+f0)\n \n \ndef translate_matrix(m,v):\n ''\n (a,b,c,d,e,f)=m\n (x,y)=v\n return (a,b,c,d,x *a+y *c+e,x *b+y *d+f)\n \n \ndef apply_matrix_pt(m,v):\n (a,b,c,d,e,f)=m\n (x,y)=v\n '' \n return (a *x+c *y+e,b *x+d *y+f)\n \n \ndef apply_matrix_norm(m,v):\n ''\n (a,b,c,d,e,f)=m\n (p,q)=v\n return (a *p+c *q,b *p+d *q)\n \n \n \n \n \n \ndef isnumber(x):\n return isinstance(x,(int,float))\n \n \ndef uniq(objs):\n ''\n done=set()\n for obj in objs:\n  if obj in done:\n   continue\n  done.add(obj)\n  yield obj\n return\n \n \n \ndef csort(objs,key):\n ''\n idxs={obj:i for (i,obj)in enumerate(objs)}\n return sorted(objs,key=lambda obj:(key(obj),idxs[obj]))\n \n \n \ndef fsplit(pred,objs):\n ''\n t=[]\n f=[]\n for obj in objs:\n  if pred(obj):\n   t.append(obj)\n  else :\n   f.append(obj)\n return (t,f)\n \n \n \ndef drange(v0,v1,d):\n ''\n assert v0 <v1\n return range(int(v0)//d,int(v1+d)//d)\n \n \n \ndef get_bound(pts):\n ''\n (x0,y0,x1,y1)=(INF,INF,-INF,-INF)\n for (x,y)in pts:\n  x0=min(x0,x)\n  y0=min(y0,y)\n  x1=max(x1,x)\n  y1=max(y1,y)\n return (x0,y0,x1,y1)\n \n \n \ndef pick(seq,func,maxobj=None ):\n ''\n maxscore=None\n for obj in seq:\n  score=func(obj)\n  if maxscore is None or maxscore <score:\n   (maxscore,maxobj)=(score,obj)\n return maxobj\n \n \n \ndef choplist(n,seq):\n ''\n r=[]\n for x in seq:\n  r.append(x)\n  if len(r)==n:\n   yield tuple(r)\n   r=[]\n return\n \n \n \ndef nunpack(s,default=0):\n ''\n l=len(s)\n if not l:\n  return default\n elif l ==1:\n  return s[0]\n elif l ==2:\n  return struct.unpack('>H',s)[0]\n elif l ==3:\n  return struct.unpack('>L',b'\\x00'+s)[0]\n elif l ==4:\n  return struct.unpack('>L',s)[0]\n else :\n  raise TypeError('invalid length: %d'%l)\n  \n  \n  \nPDFDocEncoding=''.join(chr(x)for x in (\n0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,\n0x0008,0x0009,0x000a,0x000b,0x000c,0x000d,0x000e,0x000f,\n0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0017,0x0017,\n0x02d8,0x02c7,0x02c6,0x02d9,0x02dd,0x02db,0x02da,0x02dc,\n0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,\n0x0028,0x0029,0x002a,0x002b,0x002c,0x002d,0x002e,0x002f,\n0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,\n0x0038,0x0039,0x003a,0x003b,0x003c,0x003d,0x003e,0x003f,\n0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,\n0x0048,0x0049,0x004a,0x004b,0x004c,0x004d,0x004e,0x004f,\n0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,\n0x0058,0x0059,0x005a,0x005b,0x005c,0x005d,0x005e,0x005f,\n0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,\n0x0068,0x0069,0x006a,0x006b,0x006c,0x006d,0x006e,0x006f,\n0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,\n0x0078,0x0079,0x007a,0x007b,0x007c,0x007d,0x007e,0x0000,\n0x2022,0x2020,0x2021,0x2026,0x2014,0x2013,0x0192,0x2044,\n0x2039,0x203a,0x2212,0x2030,0x201e,0x201c,0x201d,0x2018,\n0x2019,0x201a,0x2122,0xfb01,0xfb02,0x0141,0x0152,0x0160,\n0x0178,0x017d,0x0131,0x0142,0x0153,0x0161,0x017e,0x0000,\n0x20ac,0x00a1,0x00a2,0x00a3,0x00a4,0x00a5,0x00a6,0x00a7,\n0x00a8,0x00a9,0x00aa,0x00ab,0x00ac,0x0000,0x00ae,0x00af,\n0x00b0,0x00b1,0x00b2,0x00b3,0x00b4,0x00b5,0x00b6,0x00b7,\n0x00b8,0x00b9,0x00ba,0x00bb,0x00bc,0x00bd,0x00be,0x00bf,\n0x00c0,0x00c1,0x00c2,0x00c3,0x00c4,0x00c5,0x00c6,0x00c7,\n0x00c8,0x00c9,0x00ca,0x00cb,0x00cc,0x00cd,0x00ce,0x00cf,\n0x00d0,0x00d1,0x00d2,0x00d3,0x00d4,0x00d5,0x00d6,0x00d7,\n0x00d8,0x00d9,0x00da,0x00db,0x00dc,0x00dd,0x00de,0x00df,\n0x00e0,0x00e1,0x00e2,0x00e3,0x00e4,0x00e5,0x00e6,0x00e7,\n0x00e8,0x00e9,0x00ea,0x00eb,0x00ec,0x00ed,0x00ee,0x00ef,\n0x00f0,0x00f1,0x00f2,0x00f3,0x00f4,0x00f5,0x00f6,0x00f7,\n0x00f8,0x00f9,0x00fa,0x00fb,0x00fc,0x00fd,0x00fe,0x00ff,\n))\n\n\ndef decode_text(s):\n ''\n if s.startswith(b'\\xfe\\xff'):\n  return s[2:].decode('utf-16be','ignore')\n else :\n  return ''.join(PDFDocEncoding[c]for c in s)\n  \ndef q(s):\n ''\n return (s.replace('&','&amp;')\n .replace('<','&lt;')\n .replace('>','&gt;')\n .replace('\"','&quot;'))\n \ndef bbox2str(bbox):\n (x0,y0,x1,y1)=bbox\n return '%.3f,%.3f,%.3f,%.3f'%(x0,y0,x1,y1)\n \n \ndef matrix2str(m):\n (a,b,c,d,e,f)=m\n return '[%.2f,%.2f,%.2f,%.2f, (%.2f,%.2f)]'%(a,b,c,d,e,f)\n \n \n \n \n \n \n \n \n \nclass Plane:\n\n def __init__(self,bbox,gridsize=50):\n  self._seq=[]\n  self._objs=set()\n  self._grid={}\n  self.gridsize=gridsize\n  (self.x0,self.y0,self.x1,self.y1)=bbox\n  return\n  \n def __repr__(self):\n  return ('<Plane objs=%r>'%list(self))\n  \n def __iter__(self):\n  return (obj for obj in self._seq if obj in self._objs)\n  \n def __len__(self):\n  return len(self._objs)\n  \n def __contains__(self,obj):\n  return obj in self._objs\n  \n def _getrange(self,bbox):\n  (x0,y0,x1,y1)=bbox\n  if (x1 <=self.x0 or self.x1 <=x0 or\n  y1 <=self.y0 or self.y1 <=y0):return\n  x0=max(self.x0,x0)\n  y0=max(self.y0,y0)\n  x1=min(self.x1,x1)\n  y1=min(self.y1,y1)\n  for y in drange(y0,y1,self.gridsize):\n   for x in drange(x0,x1,self.gridsize):\n    yield (x,y)\n  return\n  \n  \n def extend(self,objs):\n  for obj in objs:\n   self.add(obj)\n  return\n  \n  \n def add(self,obj):\n  for k in self._getrange((obj.x0,obj.y0,obj.x1,obj.y1)):\n   if k not in self._grid:\n    r=[]\n    self._grid[k]=r\n   else :\n    r=self._grid[k]\n   r.append(obj)\n  self._seq.append(obj)\n  self._objs.add(obj)\n  return\n  \n  \n def remove(self,obj):\n  for k in self._getrange((obj.x0,obj.y0,obj.x1,obj.y1)):\n   try :\n    self._grid[k].remove(obj)\n   except (KeyError,ValueError):\n    pass\n  self._objs.remove(obj)\n  return\n  \n  \n def find(self,bbox):\n  (x0,y0,x1,y1)=bbox\n  done=set()\n  for k in self._getrange(bbox):\n   if k not in self._grid:\n    continue\n   for obj in self._grid[k]:\n    if obj in done:\n     continue\n    done.add(obj)\n    if (obj.x1 <=x0 or x1 <=obj.x0 or\n    obj.y1 <=y0 or y1 <=obj.y0):\n     continue\n    yield obj\n  return\n", ["struct", "sys"]], "Lib.site-packages.pdfminer.glyphlist": [".py", "#!/usr/bin/env python\n\n\"\"\" Mappings from Adobe glyph names to Unicode characters.\n\nIn some CMap tables, Adobe glyph names are used for specifying\nUnicode characters instead of using decimal/hex character code.\n\nThe following data was taken by\n\n  $ wget https://partners.adobe.com/public/developer/en/opentype/glyphlist.txt\n  $ python tools/conv_glyphlist.py glyphlist.txt > glyphlist.py\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nglyphname2unicode={\n'A':u'\\u0041',\n'AE':u'\\u00C6',\n'AEacute':u'\\u01FC',\n'AEmacron':u'\\u01E2',\n'AEsmall':u'\\uF7E6',\n'Aacute':u'\\u00C1',\n'Aacutesmall':u'\\uF7E1',\n'Abreve':u'\\u0102',\n'Abreveacute':u'\\u1EAE',\n'Abrevecyrillic':u'\\u04D0',\n'Abrevedotbelow':u'\\u1EB6',\n'Abrevegrave':u'\\u1EB0',\n'Abrevehookabove':u'\\u1EB2',\n'Abrevetilde':u'\\u1EB4',\n'Acaron':u'\\u01CD',\n'Acircle':u'\\u24B6',\n'Acircumflex':u'\\u00C2',\n'Acircumflexacute':u'\\u1EA4',\n'Acircumflexdotbelow':u'\\u1EAC',\n'Acircumflexgrave':u'\\u1EA6',\n'Acircumflexhookabove':u'\\u1EA8',\n'Acircumflexsmall':u'\\uF7E2',\n'Acircumflextilde':u'\\u1EAA',\n'Acute':u'\\uF6C9',\n'Acutesmall':u'\\uF7B4',\n'Acyrillic':u'\\u0410',\n'Adblgrave':u'\\u0200',\n'Adieresis':u'\\u00C4',\n'Adieresiscyrillic':u'\\u04D2',\n'Adieresismacron':u'\\u01DE',\n'Adieresissmall':u'\\uF7E4',\n'Adotbelow':u'\\u1EA0',\n'Adotmacron':u'\\u01E0',\n'Agrave':u'\\u00C0',\n'Agravesmall':u'\\uF7E0',\n'Ahookabove':u'\\u1EA2',\n'Aiecyrillic':u'\\u04D4',\n'Ainvertedbreve':u'\\u0202',\n'Alpha':u'\\u0391',\n'Alphatonos':u'\\u0386',\n'Amacron':u'\\u0100',\n'Amonospace':u'\\uFF21',\n'Aogonek':u'\\u0104',\n'Aring':u'\\u00C5',\n'Aringacute':u'\\u01FA',\n'Aringbelow':u'\\u1E00',\n'Aringsmall':u'\\uF7E5',\n'Asmall':u'\\uF761',\n'Atilde':u'\\u00C3',\n'Atildesmall':u'\\uF7E3',\n'Aybarmenian':u'\\u0531',\n'B':u'\\u0042',\n'Bcircle':u'\\u24B7',\n'Bdotaccent':u'\\u1E02',\n'Bdotbelow':u'\\u1E04',\n'Becyrillic':u'\\u0411',\n'Benarmenian':u'\\u0532',\n'Beta':u'\\u0392',\n'Bhook':u'\\u0181',\n'Blinebelow':u'\\u1E06',\n'Bmonospace':u'\\uFF22',\n'Brevesmall':u'\\uF6F4',\n'Bsmall':u'\\uF762',\n'Btopbar':u'\\u0182',\n'C':u'\\u0043',\n'Caarmenian':u'\\u053E',\n'Cacute':u'\\u0106',\n'Caron':u'\\uF6CA',\n'Caronsmall':u'\\uF6F5',\n'Ccaron':u'\\u010C',\n'Ccedilla':u'\\u00C7',\n'Ccedillaacute':u'\\u1E08',\n'Ccedillasmall':u'\\uF7E7',\n'Ccircle':u'\\u24B8',\n'Ccircumflex':u'\\u0108',\n'Cdot':u'\\u010A',\n'Cdotaccent':u'\\u010A',\n'Cedillasmall':u'\\uF7B8',\n'Chaarmenian':u'\\u0549',\n'Cheabkhasiancyrillic':u'\\u04BC',\n'Checyrillic':u'\\u0427',\n'Chedescenderabkhasiancyrillic':u'\\u04BE',\n'Chedescendercyrillic':u'\\u04B6',\n'Chedieresiscyrillic':u'\\u04F4',\n'Cheharmenian':u'\\u0543',\n'Chekhakassiancyrillic':u'\\u04CB',\n'Cheverticalstrokecyrillic':u'\\u04B8',\n'Chi':u'\\u03A7',\n'Chook':u'\\u0187',\n'Circumflexsmall':u'\\uF6F6',\n'Cmonospace':u'\\uFF23',\n'Coarmenian':u'\\u0551',\n'Csmall':u'\\uF763',\n'D':u'\\u0044',\n'DZ':u'\\u01F1',\n'DZcaron':u'\\u01C4',\n'Daarmenian':u'\\u0534',\n'Dafrican':u'\\u0189',\n'Dcaron':u'\\u010E',\n'Dcedilla':u'\\u1E10',\n'Dcircle':u'\\u24B9',\n'Dcircumflexbelow':u'\\u1E12',\n'Dcroat':u'\\u0110',\n'Ddotaccent':u'\\u1E0A',\n'Ddotbelow':u'\\u1E0C',\n'Decyrillic':u'\\u0414',\n'Deicoptic':u'\\u03EE',\n'Delta':u'\\u2206',\n'Deltagreek':u'\\u0394',\n'Dhook':u'\\u018A',\n'Dieresis':u'\\uF6CB',\n'DieresisAcute':u'\\uF6CC',\n'DieresisGrave':u'\\uF6CD',\n'Dieresissmall':u'\\uF7A8',\n'Digammagreek':u'\\u03DC',\n'Djecyrillic':u'\\u0402',\n'Dlinebelow':u'\\u1E0E',\n'Dmonospace':u'\\uFF24',\n'Dotaccentsmall':u'\\uF6F7',\n'Dslash':u'\\u0110',\n'Dsmall':u'\\uF764',\n'Dtopbar':u'\\u018B',\n'Dz':u'\\u01F2',\n'Dzcaron':u'\\u01C5',\n'Dzeabkhasiancyrillic':u'\\u04E0',\n'Dzecyrillic':u'\\u0405',\n'Dzhecyrillic':u'\\u040F',\n'E':u'\\u0045',\n'Eacute':u'\\u00C9',\n'Eacutesmall':u'\\uF7E9',\n'Ebreve':u'\\u0114',\n'Ecaron':u'\\u011A',\n'Ecedillabreve':u'\\u1E1C',\n'Echarmenian':u'\\u0535',\n'Ecircle':u'\\u24BA',\n'Ecircumflex':u'\\u00CA',\n'Ecircumflexacute':u'\\u1EBE',\n'Ecircumflexbelow':u'\\u1E18',\n'Ecircumflexdotbelow':u'\\u1EC6',\n'Ecircumflexgrave':u'\\u1EC0',\n'Ecircumflexhookabove':u'\\u1EC2',\n'Ecircumflexsmall':u'\\uF7EA',\n'Ecircumflextilde':u'\\u1EC4',\n'Ecyrillic':u'\\u0404',\n'Edblgrave':u'\\u0204',\n'Edieresis':u'\\u00CB',\n'Edieresissmall':u'\\uF7EB',\n'Edot':u'\\u0116',\n'Edotaccent':u'\\u0116',\n'Edotbelow':u'\\u1EB8',\n'Efcyrillic':u'\\u0424',\n'Egrave':u'\\u00C8',\n'Egravesmall':u'\\uF7E8',\n'Eharmenian':u'\\u0537',\n'Ehookabove':u'\\u1EBA',\n'Eightroman':u'\\u2167',\n'Einvertedbreve':u'\\u0206',\n'Eiotifiedcyrillic':u'\\u0464',\n'Elcyrillic':u'\\u041B',\n'Elevenroman':u'\\u216A',\n'Emacron':u'\\u0112',\n'Emacronacute':u'\\u1E16',\n'Emacrongrave':u'\\u1E14',\n'Emcyrillic':u'\\u041C',\n'Emonospace':u'\\uFF25',\n'Encyrillic':u'\\u041D',\n'Endescendercyrillic':u'\\u04A2',\n'Eng':u'\\u014A',\n'Enghecyrillic':u'\\u04A4',\n'Enhookcyrillic':u'\\u04C7',\n'Eogonek':u'\\u0118',\n'Eopen':u'\\u0190',\n'Epsilon':u'\\u0395',\n'Epsilontonos':u'\\u0388',\n'Ercyrillic':u'\\u0420',\n'Ereversed':u'\\u018E',\n'Ereversedcyrillic':u'\\u042D',\n'Escyrillic':u'\\u0421',\n'Esdescendercyrillic':u'\\u04AA',\n'Esh':u'\\u01A9',\n'Esmall':u'\\uF765',\n'Eta':u'\\u0397',\n'Etarmenian':u'\\u0538',\n'Etatonos':u'\\u0389',\n'Eth':u'\\u00D0',\n'Ethsmall':u'\\uF7F0',\n'Etilde':u'\\u1EBC',\n'Etildebelow':u'\\u1E1A',\n'Euro':u'\\u20AC',\n'Ezh':u'\\u01B7',\n'Ezhcaron':u'\\u01EE',\n'Ezhreversed':u'\\u01B8',\n'F':u'\\u0046',\n'Fcircle':u'\\u24BB',\n'Fdotaccent':u'\\u1E1E',\n'Feharmenian':u'\\u0556',\n'Feicoptic':u'\\u03E4',\n'Fhook':u'\\u0191',\n'Fitacyrillic':u'\\u0472',\n'Fiveroman':u'\\u2164',\n'Fmonospace':u'\\uFF26',\n'Fourroman':u'\\u2163',\n'Fsmall':u'\\uF766',\n'G':u'\\u0047',\n'GBsquare':u'\\u3387',\n'Gacute':u'\\u01F4',\n'Gamma':u'\\u0393',\n'Gammaafrican':u'\\u0194',\n'Gangiacoptic':u'\\u03EA',\n'Gbreve':u'\\u011E',\n'Gcaron':u'\\u01E6',\n'Gcedilla':u'\\u0122',\n'Gcircle':u'\\u24BC',\n'Gcircumflex':u'\\u011C',\n'Gcommaaccent':u'\\u0122',\n'Gdot':u'\\u0120',\n'Gdotaccent':u'\\u0120',\n'Gecyrillic':u'\\u0413',\n'Ghadarmenian':u'\\u0542',\n'Ghemiddlehookcyrillic':u'\\u0494',\n'Ghestrokecyrillic':u'\\u0492',\n'Gheupturncyrillic':u'\\u0490',\n'Ghook':u'\\u0193',\n'Gimarmenian':u'\\u0533',\n'Gjecyrillic':u'\\u0403',\n'Gmacron':u'\\u1E20',\n'Gmonospace':u'\\uFF27',\n'Grave':u'\\uF6CE',\n'Gravesmall':u'\\uF760',\n'Gsmall':u'\\uF767',\n'Gsmallhook':u'\\u029B',\n'Gstroke':u'\\u01E4',\n'H':u'\\u0048',\n'H18533':u'\\u25CF',\n'H18543':u'\\u25AA',\n'H18551':u'\\u25AB',\n'H22073':u'\\u25A1',\n'HPsquare':u'\\u33CB',\n'Haabkhasiancyrillic':u'\\u04A8',\n'Hadescendercyrillic':u'\\u04B2',\n'Hardsigncyrillic':u'\\u042A',\n'Hbar':u'\\u0126',\n'Hbrevebelow':u'\\u1E2A',\n'Hcedilla':u'\\u1E28',\n'Hcircle':u'\\u24BD',\n'Hcircumflex':u'\\u0124',\n'Hdieresis':u'\\u1E26',\n'Hdotaccent':u'\\u1E22',\n'Hdotbelow':u'\\u1E24',\n'Hmonospace':u'\\uFF28',\n'Hoarmenian':u'\\u0540',\n'Horicoptic':u'\\u03E8',\n'Hsmall':u'\\uF768',\n'Hungarumlaut':u'\\uF6CF',\n'Hungarumlautsmall':u'\\uF6F8',\n'Hzsquare':u'\\u3390',\n'I':u'\\u0049',\n'IAcyrillic':u'\\u042F',\n'IJ':u'\\u0132',\n'IUcyrillic':u'\\u042E',\n'Iacute':u'\\u00CD',\n'Iacutesmall':u'\\uF7ED',\n'Ibreve':u'\\u012C',\n'Icaron':u'\\u01CF',\n'Icircle':u'\\u24BE',\n'Icircumflex':u'\\u00CE',\n'Icircumflexsmall':u'\\uF7EE',\n'Icyrillic':u'\\u0406',\n'Idblgrave':u'\\u0208',\n'Idieresis':u'\\u00CF',\n'Idieresisacute':u'\\u1E2E',\n'Idieresiscyrillic':u'\\u04E4',\n'Idieresissmall':u'\\uF7EF',\n'Idot':u'\\u0130',\n'Idotaccent':u'\\u0130',\n'Idotbelow':u'\\u1ECA',\n'Iebrevecyrillic':u'\\u04D6',\n'Iecyrillic':u'\\u0415',\n'Ifraktur':u'\\u2111',\n'Igrave':u'\\u00CC',\n'Igravesmall':u'\\uF7EC',\n'Ihookabove':u'\\u1EC8',\n'Iicyrillic':u'\\u0418',\n'Iinvertedbreve':u'\\u020A',\n'Iishortcyrillic':u'\\u0419',\n'Imacron':u'\\u012A',\n'Imacroncyrillic':u'\\u04E2',\n'Imonospace':u'\\uFF29',\n'Iniarmenian':u'\\u053B',\n'Iocyrillic':u'\\u0401',\n'Iogonek':u'\\u012E',\n'Iota':u'\\u0399',\n'Iotaafrican':u'\\u0196',\n'Iotadieresis':u'\\u03AA',\n'Iotatonos':u'\\u038A',\n'Ismall':u'\\uF769',\n'Istroke':u'\\u0197',\n'Itilde':u'\\u0128',\n'Itildebelow':u'\\u1E2C',\n'Izhitsacyrillic':u'\\u0474',\n'Izhitsadblgravecyrillic':u'\\u0476',\n'J':u'\\u004A',\n'Jaarmenian':u'\\u0541',\n'Jcircle':u'\\u24BF',\n'Jcircumflex':u'\\u0134',\n'Jecyrillic':u'\\u0408',\n'Jheharmenian':u'\\u054B',\n'Jmonospace':u'\\uFF2A',\n'Jsmall':u'\\uF76A',\n'K':u'\\u004B',\n'KBsquare':u'\\u3385',\n'KKsquare':u'\\u33CD',\n'Kabashkircyrillic':u'\\u04A0',\n'Kacute':u'\\u1E30',\n'Kacyrillic':u'\\u041A',\n'Kadescendercyrillic':u'\\u049A',\n'Kahookcyrillic':u'\\u04C3',\n'Kappa':u'\\u039A',\n'Kastrokecyrillic':u'\\u049E',\n'Kaverticalstrokecyrillic':u'\\u049C',\n'Kcaron':u'\\u01E8',\n'Kcedilla':u'\\u0136',\n'Kcircle':u'\\u24C0',\n'Kcommaaccent':u'\\u0136',\n'Kdotbelow':u'\\u1E32',\n'Keharmenian':u'\\u0554',\n'Kenarmenian':u'\\u053F',\n'Khacyrillic':u'\\u0425',\n'Kheicoptic':u'\\u03E6',\n'Khook':u'\\u0198',\n'Kjecyrillic':u'\\u040C',\n'Klinebelow':u'\\u1E34',\n'Kmonospace':u'\\uFF2B',\n'Koppacyrillic':u'\\u0480',\n'Koppagreek':u'\\u03DE',\n'Ksicyrillic':u'\\u046E',\n'Ksmall':u'\\uF76B',\n'L':u'\\u004C',\n'LJ':u'\\u01C7',\n'LL':u'\\uF6BF',\n'Lacute':u'\\u0139',\n'Lambda':u'\\u039B',\n'Lcaron':u'\\u013D',\n'Lcedilla':u'\\u013B',\n'Lcircle':u'\\u24C1',\n'Lcircumflexbelow':u'\\u1E3C',\n'Lcommaaccent':u'\\u013B',\n'Ldot':u'\\u013F',\n'Ldotaccent':u'\\u013F',\n'Ldotbelow':u'\\u1E36',\n'Ldotbelowmacron':u'\\u1E38',\n'Liwnarmenian':u'\\u053C',\n'Lj':u'\\u01C8',\n'Ljecyrillic':u'\\u0409',\n'Llinebelow':u'\\u1E3A',\n'Lmonospace':u'\\uFF2C',\n'Lslash':u'\\u0141',\n'Lslashsmall':u'\\uF6F9',\n'Lsmall':u'\\uF76C',\n'M':u'\\u004D',\n'MBsquare':u'\\u3386',\n'Macron':u'\\uF6D0',\n'Macronsmall':u'\\uF7AF',\n'Macute':u'\\u1E3E',\n'Mcircle':u'\\u24C2',\n'Mdotaccent':u'\\u1E40',\n'Mdotbelow':u'\\u1E42',\n'Menarmenian':u'\\u0544',\n'Mmonospace':u'\\uFF2D',\n'Msmall':u'\\uF76D',\n'Mturned':u'\\u019C',\n'Mu':u'\\u039C',\n'N':u'\\u004E',\n'NJ':u'\\u01CA',\n'Nacute':u'\\u0143',\n'Ncaron':u'\\u0147',\n'Ncedilla':u'\\u0145',\n'Ncircle':u'\\u24C3',\n'Ncircumflexbelow':u'\\u1E4A',\n'Ncommaaccent':u'\\u0145',\n'Ndotaccent':u'\\u1E44',\n'Ndotbelow':u'\\u1E46',\n'Nhookleft':u'\\u019D',\n'Nineroman':u'\\u2168',\n'Nj':u'\\u01CB',\n'Njecyrillic':u'\\u040A',\n'Nlinebelow':u'\\u1E48',\n'Nmonospace':u'\\uFF2E',\n'Nowarmenian':u'\\u0546',\n'Nsmall':u'\\uF76E',\n'Ntilde':u'\\u00D1',\n'Ntildesmall':u'\\uF7F1',\n'Nu':u'\\u039D',\n'O':u'\\u004F',\n'OE':u'\\u0152',\n'OEsmall':u'\\uF6FA',\n'Oacute':u'\\u00D3',\n'Oacutesmall':u'\\uF7F3',\n'Obarredcyrillic':u'\\u04E8',\n'Obarreddieresiscyrillic':u'\\u04EA',\n'Obreve':u'\\u014E',\n'Ocaron':u'\\u01D1',\n'Ocenteredtilde':u'\\u019F',\n'Ocircle':u'\\u24C4',\n'Ocircumflex':u'\\u00D4',\n'Ocircumflexacute':u'\\u1ED0',\n'Ocircumflexdotbelow':u'\\u1ED8',\n'Ocircumflexgrave':u'\\u1ED2',\n'Ocircumflexhookabove':u'\\u1ED4',\n'Ocircumflexsmall':u'\\uF7F4',\n'Ocircumflextilde':u'\\u1ED6',\n'Ocyrillic':u'\\u041E',\n'Odblacute':u'\\u0150',\n'Odblgrave':u'\\u020C',\n'Odieresis':u'\\u00D6',\n'Odieresiscyrillic':u'\\u04E6',\n'Odieresissmall':u'\\uF7F6',\n'Odotbelow':u'\\u1ECC',\n'Ogoneksmall':u'\\uF6FB',\n'Ograve':u'\\u00D2',\n'Ogravesmall':u'\\uF7F2',\n'Oharmenian':u'\\u0555',\n'Ohm':u'\\u2126',\n'Ohookabove':u'\\u1ECE',\n'Ohorn':u'\\u01A0',\n'Ohornacute':u'\\u1EDA',\n'Ohorndotbelow':u'\\u1EE2',\n'Ohorngrave':u'\\u1EDC',\n'Ohornhookabove':u'\\u1EDE',\n'Ohorntilde':u'\\u1EE0',\n'Ohungarumlaut':u'\\u0150',\n'Oi':u'\\u01A2',\n'Oinvertedbreve':u'\\u020E',\n'Omacron':u'\\u014C',\n'Omacronacute':u'\\u1E52',\n'Omacrongrave':u'\\u1E50',\n'Omega':u'\\u2126',\n'Omegacyrillic':u'\\u0460',\n'Omegagreek':u'\\u03A9',\n'Omegaroundcyrillic':u'\\u047A',\n'Omegatitlocyrillic':u'\\u047C',\n'Omegatonos':u'\\u038F',\n'Omicron':u'\\u039F',\n'Omicrontonos':u'\\u038C',\n'Omonospace':u'\\uFF2F',\n'Oneroman':u'\\u2160',\n'Oogonek':u'\\u01EA',\n'Oogonekmacron':u'\\u01EC',\n'Oopen':u'\\u0186',\n'Oslash':u'\\u00D8',\n'Oslashacute':u'\\u01FE',\n'Oslashsmall':u'\\uF7F8',\n'Osmall':u'\\uF76F',\n'Ostrokeacute':u'\\u01FE',\n'Otcyrillic':u'\\u047E',\n'Otilde':u'\\u00D5',\n'Otildeacute':u'\\u1E4C',\n'Otildedieresis':u'\\u1E4E',\n'Otildesmall':u'\\uF7F5',\n'P':u'\\u0050',\n'Pacute':u'\\u1E54',\n'Pcircle':u'\\u24C5',\n'Pdotaccent':u'\\u1E56',\n'Pecyrillic':u'\\u041F',\n'Peharmenian':u'\\u054A',\n'Pemiddlehookcyrillic':u'\\u04A6',\n'Phi':u'\\u03A6',\n'Phook':u'\\u01A4',\n'Pi':u'\\u03A0',\n'Piwrarmenian':u'\\u0553',\n'Pmonospace':u'\\uFF30',\n'Psi':u'\\u03A8',\n'Psicyrillic':u'\\u0470',\n'Psmall':u'\\uF770',\n'Q':u'\\u0051',\n'Qcircle':u'\\u24C6',\n'Qmonospace':u'\\uFF31',\n'Qsmall':u'\\uF771',\n'R':u'\\u0052',\n'Raarmenian':u'\\u054C',\n'Racute':u'\\u0154',\n'Rcaron':u'\\u0158',\n'Rcedilla':u'\\u0156',\n'Rcircle':u'\\u24C7',\n'Rcommaaccent':u'\\u0156',\n'Rdblgrave':u'\\u0210',\n'Rdotaccent':u'\\u1E58',\n'Rdotbelow':u'\\u1E5A',\n'Rdotbelowmacron':u'\\u1E5C',\n'Reharmenian':u'\\u0550',\n'Rfraktur':u'\\u211C',\n'Rho':u'\\u03A1',\n'Ringsmall':u'\\uF6FC',\n'Rinvertedbreve':u'\\u0212',\n'Rlinebelow':u'\\u1E5E',\n'Rmonospace':u'\\uFF32',\n'Rsmall':u'\\uF772',\n'Rsmallinverted':u'\\u0281',\n'Rsmallinvertedsuperior':u'\\u02B6',\n'S':u'\\u0053',\n'SF010000':u'\\u250C',\n'SF020000':u'\\u2514',\n'SF030000':u'\\u2510',\n'SF040000':u'\\u2518',\n'SF050000':u'\\u253C',\n'SF060000':u'\\u252C',\n'SF070000':u'\\u2534',\n'SF080000':u'\\u251C',\n'SF090000':u'\\u2524',\n'SF100000':u'\\u2500',\n'SF110000':u'\\u2502',\n'SF190000':u'\\u2561',\n'SF200000':u'\\u2562',\n'SF210000':u'\\u2556',\n'SF220000':u'\\u2555',\n'SF230000':u'\\u2563',\n'SF240000':u'\\u2551',\n'SF250000':u'\\u2557',\n'SF260000':u'\\u255D',\n'SF270000':u'\\u255C',\n'SF280000':u'\\u255B',\n'SF360000':u'\\u255E',\n'SF370000':u'\\u255F',\n'SF380000':u'\\u255A',\n'SF390000':u'\\u2554',\n'SF400000':u'\\u2569',\n'SF410000':u'\\u2566',\n'SF420000':u'\\u2560',\n'SF430000':u'\\u2550',\n'SF440000':u'\\u256C',\n'SF450000':u'\\u2567',\n'SF460000':u'\\u2568',\n'SF470000':u'\\u2564',\n'SF480000':u'\\u2565',\n'SF490000':u'\\u2559',\n'SF500000':u'\\u2558',\n'SF510000':u'\\u2552',\n'SF520000':u'\\u2553',\n'SF530000':u'\\u256B',\n'SF540000':u'\\u256A',\n'Sacute':u'\\u015A',\n'Sacutedotaccent':u'\\u1E64',\n'Sampigreek':u'\\u03E0',\n'Scaron':u'\\u0160',\n'Scarondotaccent':u'\\u1E66',\n'Scaronsmall':u'\\uF6FD',\n'Scedilla':u'\\u015E',\n'Schwa':u'\\u018F',\n'Schwacyrillic':u'\\u04D8',\n'Schwadieresiscyrillic':u'\\u04DA',\n'Scircle':u'\\u24C8',\n'Scircumflex':u'\\u015C',\n'Scommaaccent':u'\\u0218',\n'Sdotaccent':u'\\u1E60',\n'Sdotbelow':u'\\u1E62',\n'Sdotbelowdotaccent':u'\\u1E68',\n'Seharmenian':u'\\u054D',\n'Sevenroman':u'\\u2166',\n'Shaarmenian':u'\\u0547',\n'Shacyrillic':u'\\u0428',\n'Shchacyrillic':u'\\u0429',\n'Sheicoptic':u'\\u03E2',\n'Shhacyrillic':u'\\u04BA',\n'Shimacoptic':u'\\u03EC',\n'Sigma':u'\\u03A3',\n'Sixroman':u'\\u2165',\n'Smonospace':u'\\uFF33',\n'Softsigncyrillic':u'\\u042C',\n'Ssmall':u'\\uF773',\n'Stigmagreek':u'\\u03DA',\n'T':u'\\u0054',\n'Tau':u'\\u03A4',\n'Tbar':u'\\u0166',\n'Tcaron':u'\\u0164',\n'Tcedilla':u'\\u0162',\n'Tcircle':u'\\u24C9',\n'Tcircumflexbelow':u'\\u1E70',\n'Tcommaaccent':u'\\u0162',\n'Tdotaccent':u'\\u1E6A',\n'Tdotbelow':u'\\u1E6C',\n'Tecyrillic':u'\\u0422',\n'Tedescendercyrillic':u'\\u04AC',\n'Tenroman':u'\\u2169',\n'Tetsecyrillic':u'\\u04B4',\n'Theta':u'\\u0398',\n'Thook':u'\\u01AC',\n'Thorn':u'\\u00DE',\n'Thornsmall':u'\\uF7FE',\n'Threeroman':u'\\u2162',\n'Tildesmall':u'\\uF6FE',\n'Tiwnarmenian':u'\\u054F',\n'Tlinebelow':u'\\u1E6E',\n'Tmonospace':u'\\uFF34',\n'Toarmenian':u'\\u0539',\n'Tonefive':u'\\u01BC',\n'Tonesix':u'\\u0184',\n'Tonetwo':u'\\u01A7',\n'Tretroflexhook':u'\\u01AE',\n'Tsecyrillic':u'\\u0426',\n'Tshecyrillic':u'\\u040B',\n'Tsmall':u'\\uF774',\n'Twelveroman':u'\\u216B',\n'Tworoman':u'\\u2161',\n'U':u'\\u0055',\n'Uacute':u'\\u00DA',\n'Uacutesmall':u'\\uF7FA',\n'Ubreve':u'\\u016C',\n'Ucaron':u'\\u01D3',\n'Ucircle':u'\\u24CA',\n'Ucircumflex':u'\\u00DB',\n'Ucircumflexbelow':u'\\u1E76',\n'Ucircumflexsmall':u'\\uF7FB',\n'Ucyrillic':u'\\u0423',\n'Udblacute':u'\\u0170',\n'Udblgrave':u'\\u0214',\n'Udieresis':u'\\u00DC',\n'Udieresisacute':u'\\u01D7',\n'Udieresisbelow':u'\\u1E72',\n'Udieresiscaron':u'\\u01D9',\n'Udieresiscyrillic':u'\\u04F0',\n'Udieresisgrave':u'\\u01DB',\n'Udieresismacron':u'\\u01D5',\n'Udieresissmall':u'\\uF7FC',\n'Udotbelow':u'\\u1EE4',\n'Ugrave':u'\\u00D9',\n'Ugravesmall':u'\\uF7F9',\n'Uhookabove':u'\\u1EE6',\n'Uhorn':u'\\u01AF',\n'Uhornacute':u'\\u1EE8',\n'Uhorndotbelow':u'\\u1EF0',\n'Uhorngrave':u'\\u1EEA',\n'Uhornhookabove':u'\\u1EEC',\n'Uhorntilde':u'\\u1EEE',\n'Uhungarumlaut':u'\\u0170',\n'Uhungarumlautcyrillic':u'\\u04F2',\n'Uinvertedbreve':u'\\u0216',\n'Ukcyrillic':u'\\u0478',\n'Umacron':u'\\u016A',\n'Umacroncyrillic':u'\\u04EE',\n'Umacrondieresis':u'\\u1E7A',\n'Umonospace':u'\\uFF35',\n'Uogonek':u'\\u0172',\n'Upsilon':u'\\u03A5',\n'Upsilon1':u'\\u03D2',\n'Upsilonacutehooksymbolgreek':u'\\u03D3',\n'Upsilonafrican':u'\\u01B1',\n'Upsilondieresis':u'\\u03AB',\n'Upsilondieresishooksymbolgreek':u'\\u03D4',\n'Upsilonhooksymbol':u'\\u03D2',\n'Upsilontonos':u'\\u038E',\n'Uring':u'\\u016E',\n'Ushortcyrillic':u'\\u040E',\n'Usmall':u'\\uF775',\n'Ustraightcyrillic':u'\\u04AE',\n'Ustraightstrokecyrillic':u'\\u04B0',\n'Utilde':u'\\u0168',\n'Utildeacute':u'\\u1E78',\n'Utildebelow':u'\\u1E74',\n'V':u'\\u0056',\n'Vcircle':u'\\u24CB',\n'Vdotbelow':u'\\u1E7E',\n'Vecyrillic':u'\\u0412',\n'Vewarmenian':u'\\u054E',\n'Vhook':u'\\u01B2',\n'Vmonospace':u'\\uFF36',\n'Voarmenian':u'\\u0548',\n'Vsmall':u'\\uF776',\n'Vtilde':u'\\u1E7C',\n'W':u'\\u0057',\n'Wacute':u'\\u1E82',\n'Wcircle':u'\\u24CC',\n'Wcircumflex':u'\\u0174',\n'Wdieresis':u'\\u1E84',\n'Wdotaccent':u'\\u1E86',\n'Wdotbelow':u'\\u1E88',\n'Wgrave':u'\\u1E80',\n'Wmonospace':u'\\uFF37',\n'Wsmall':u'\\uF777',\n'X':u'\\u0058',\n'Xcircle':u'\\u24CD',\n'Xdieresis':u'\\u1E8C',\n'Xdotaccent':u'\\u1E8A',\n'Xeharmenian':u'\\u053D',\n'Xi':u'\\u039E',\n'Xmonospace':u'\\uFF38',\n'Xsmall':u'\\uF778',\n'Y':u'\\u0059',\n'Yacute':u'\\u00DD',\n'Yacutesmall':u'\\uF7FD',\n'Yatcyrillic':u'\\u0462',\n'Ycircle':u'\\u24CE',\n'Ycircumflex':u'\\u0176',\n'Ydieresis':u'\\u0178',\n'Ydieresissmall':u'\\uF7FF',\n'Ydotaccent':u'\\u1E8E',\n'Ydotbelow':u'\\u1EF4',\n'Yericyrillic':u'\\u042B',\n'Yerudieresiscyrillic':u'\\u04F8',\n'Ygrave':u'\\u1EF2',\n'Yhook':u'\\u01B3',\n'Yhookabove':u'\\u1EF6',\n'Yiarmenian':u'\\u0545',\n'Yicyrillic':u'\\u0407',\n'Yiwnarmenian':u'\\u0552',\n'Ymonospace':u'\\uFF39',\n'Ysmall':u'\\uF779',\n'Ytilde':u'\\u1EF8',\n'Yusbigcyrillic':u'\\u046A',\n'Yusbigiotifiedcyrillic':u'\\u046C',\n'Yuslittlecyrillic':u'\\u0466',\n'Yuslittleiotifiedcyrillic':u'\\u0468',\n'Z':u'\\u005A',\n'Zaarmenian':u'\\u0536',\n'Zacute':u'\\u0179',\n'Zcaron':u'\\u017D',\n'Zcaronsmall':u'\\uF6FF',\n'Zcircle':u'\\u24CF',\n'Zcircumflex':u'\\u1E90',\n'Zdot':u'\\u017B',\n'Zdotaccent':u'\\u017B',\n'Zdotbelow':u'\\u1E92',\n'Zecyrillic':u'\\u0417',\n'Zedescendercyrillic':u'\\u0498',\n'Zedieresiscyrillic':u'\\u04DE',\n'Zeta':u'\\u0396',\n'Zhearmenian':u'\\u053A',\n'Zhebrevecyrillic':u'\\u04C1',\n'Zhecyrillic':u'\\u0416',\n'Zhedescendercyrillic':u'\\u0496',\n'Zhedieresiscyrillic':u'\\u04DC',\n'Zlinebelow':u'\\u1E94',\n'Zmonospace':u'\\uFF3A',\n'Zsmall':u'\\uF77A',\n'Zstroke':u'\\u01B5',\n'a':u'\\u0061',\n'aabengali':u'\\u0986',\n'aacute':u'\\u00E1',\n'aadeva':u'\\u0906',\n'aagujarati':u'\\u0A86',\n'aagurmukhi':u'\\u0A06',\n'aamatragurmukhi':u'\\u0A3E',\n'aarusquare':u'\\u3303',\n'aavowelsignbengali':u'\\u09BE',\n'aavowelsigndeva':u'\\u093E',\n'aavowelsigngujarati':u'\\u0ABE',\n'abbreviationmarkarmenian':u'\\u055F',\n'abbreviationsigndeva':u'\\u0970',\n'abengali':u'\\u0985',\n'abopomofo':u'\\u311A',\n'abreve':u'\\u0103',\n'abreveacute':u'\\u1EAF',\n'abrevecyrillic':u'\\u04D1',\n'abrevedotbelow':u'\\u1EB7',\n'abrevegrave':u'\\u1EB1',\n'abrevehookabove':u'\\u1EB3',\n'abrevetilde':u'\\u1EB5',\n'acaron':u'\\u01CE',\n'acircle':u'\\u24D0',\n'acircumflex':u'\\u00E2',\n'acircumflexacute':u'\\u1EA5',\n'acircumflexdotbelow':u'\\u1EAD',\n'acircumflexgrave':u'\\u1EA7',\n'acircumflexhookabove':u'\\u1EA9',\n'acircumflextilde':u'\\u1EAB',\n'acute':u'\\u00B4',\n'acutebelowcmb':u'\\u0317',\n'acutecmb':u'\\u0301',\n'acutecomb':u'\\u0301',\n'acutedeva':u'\\u0954',\n'acutelowmod':u'\\u02CF',\n'acutetonecmb':u'\\u0341',\n'acyrillic':u'\\u0430',\n'adblgrave':u'\\u0201',\n'addakgurmukhi':u'\\u0A71',\n'adeva':u'\\u0905',\n'adieresis':u'\\u00E4',\n'adieresiscyrillic':u'\\u04D3',\n'adieresismacron':u'\\u01DF',\n'adotbelow':u'\\u1EA1',\n'adotmacron':u'\\u01E1',\n'ae':u'\\u00E6',\n'aeacute':u'\\u01FD',\n'aekorean':u'\\u3150',\n'aemacron':u'\\u01E3',\n'afii00208':u'\\u2015',\n'afii08941':u'\\u20A4',\n'afii10017':u'\\u0410',\n'afii10018':u'\\u0411',\n'afii10019':u'\\u0412',\n'afii10020':u'\\u0413',\n'afii10021':u'\\u0414',\n'afii10022':u'\\u0415',\n'afii10023':u'\\u0401',\n'afii10024':u'\\u0416',\n'afii10025':u'\\u0417',\n'afii10026':u'\\u0418',\n'afii10027':u'\\u0419',\n'afii10028':u'\\u041A',\n'afii10029':u'\\u041B',\n'afii10030':u'\\u041C',\n'afii10031':u'\\u041D',\n'afii10032':u'\\u041E',\n'afii10033':u'\\u041F',\n'afii10034':u'\\u0420',\n'afii10035':u'\\u0421',\n'afii10036':u'\\u0422',\n'afii10037':u'\\u0423',\n'afii10038':u'\\u0424',\n'afii10039':u'\\u0425',\n'afii10040':u'\\u0426',\n'afii10041':u'\\u0427',\n'afii10042':u'\\u0428',\n'afii10043':u'\\u0429',\n'afii10044':u'\\u042A',\n'afii10045':u'\\u042B',\n'afii10046':u'\\u042C',\n'afii10047':u'\\u042D',\n'afii10048':u'\\u042E',\n'afii10049':u'\\u042F',\n'afii10050':u'\\u0490',\n'afii10051':u'\\u0402',\n'afii10052':u'\\u0403',\n'afii10053':u'\\u0404',\n'afii10054':u'\\u0405',\n'afii10055':u'\\u0406',\n'afii10056':u'\\u0407',\n'afii10057':u'\\u0408',\n'afii10058':u'\\u0409',\n'afii10059':u'\\u040A',\n'afii10060':u'\\u040B',\n'afii10061':u'\\u040C',\n'afii10062':u'\\u040E',\n'afii10063':u'\\uF6C4',\n'afii10064':u'\\uF6C5',\n'afii10065':u'\\u0430',\n'afii10066':u'\\u0431',\n'afii10067':u'\\u0432',\n'afii10068':u'\\u0433',\n'afii10069':u'\\u0434',\n'afii10070':u'\\u0435',\n'afii10071':u'\\u0451',\n'afii10072':u'\\u0436',\n'afii10073':u'\\u0437',\n'afii10074':u'\\u0438',\n'afii10075':u'\\u0439',\n'afii10076':u'\\u043A',\n'afii10077':u'\\u043B',\n'afii10078':u'\\u043C',\n'afii10079':u'\\u043D',\n'afii10080':u'\\u043E',\n'afii10081':u'\\u043F',\n'afii10082':u'\\u0440',\n'afii10083':u'\\u0441',\n'afii10084':u'\\u0442',\n'afii10085':u'\\u0443',\n'afii10086':u'\\u0444',\n'afii10087':u'\\u0445',\n'afii10088':u'\\u0446',\n'afii10089':u'\\u0447',\n'afii10090':u'\\u0448',\n'afii10091':u'\\u0449',\n'afii10092':u'\\u044A',\n'afii10093':u'\\u044B',\n'afii10094':u'\\u044C',\n'afii10095':u'\\u044D',\n'afii10096':u'\\u044E',\n'afii10097':u'\\u044F',\n'afii10098':u'\\u0491',\n'afii10099':u'\\u0452',\n'afii10100':u'\\u0453',\n'afii10101':u'\\u0454',\n'afii10102':u'\\u0455',\n'afii10103':u'\\u0456',\n'afii10104':u'\\u0457',\n'afii10105':u'\\u0458',\n'afii10106':u'\\u0459',\n'afii10107':u'\\u045A',\n'afii10108':u'\\u045B',\n'afii10109':u'\\u045C',\n'afii10110':u'\\u045E',\n'afii10145':u'\\u040F',\n'afii10146':u'\\u0462',\n'afii10147':u'\\u0472',\n'afii10148':u'\\u0474',\n'afii10192':u'\\uF6C6',\n'afii10193':u'\\u045F',\n'afii10194':u'\\u0463',\n'afii10195':u'\\u0473',\n'afii10196':u'\\u0475',\n'afii10831':u'\\uF6C7',\n'afii10832':u'\\uF6C8',\n'afii10846':u'\\u04D9',\n'afii299':u'\\u200E',\n'afii300':u'\\u200F',\n'afii301':u'\\u200D',\n'afii57381':u'\\u066A',\n'afii57388':u'\\u060C',\n'afii57392':u'\\u0660',\n'afii57393':u'\\u0661',\n'afii57394':u'\\u0662',\n'afii57395':u'\\u0663',\n'afii57396':u'\\u0664',\n'afii57397':u'\\u0665',\n'afii57398':u'\\u0666',\n'afii57399':u'\\u0667',\n'afii57400':u'\\u0668',\n'afii57401':u'\\u0669',\n'afii57403':u'\\u061B',\n'afii57407':u'\\u061F',\n'afii57409':u'\\u0621',\n'afii57410':u'\\u0622',\n'afii57411':u'\\u0623',\n'afii57412':u'\\u0624',\n'afii57413':u'\\u0625',\n'afii57414':u'\\u0626',\n'afii57415':u'\\u0627',\n'afii57416':u'\\u0628',\n'afii57417':u'\\u0629',\n'afii57418':u'\\u062A',\n'afii57419':u'\\u062B',\n'afii57420':u'\\u062C',\n'afii57421':u'\\u062D',\n'afii57422':u'\\u062E',\n'afii57423':u'\\u062F',\n'afii57424':u'\\u0630',\n'afii57425':u'\\u0631',\n'afii57426':u'\\u0632',\n'afii57427':u'\\u0633',\n'afii57428':u'\\u0634',\n'afii57429':u'\\u0635',\n'afii57430':u'\\u0636',\n'afii57431':u'\\u0637',\n'afii57432':u'\\u0638',\n'afii57433':u'\\u0639',\n'afii57434':u'\\u063A',\n'afii57440':u'\\u0640',\n'afii57441':u'\\u0641',\n'afii57442':u'\\u0642',\n'afii57443':u'\\u0643',\n'afii57444':u'\\u0644',\n'afii57445':u'\\u0645',\n'afii57446':u'\\u0646',\n'afii57448':u'\\u0648',\n'afii57449':u'\\u0649',\n'afii57450':u'\\u064A',\n'afii57451':u'\\u064B',\n'afii57452':u'\\u064C',\n'afii57453':u'\\u064D',\n'afii57454':u'\\u064E',\n'afii57455':u'\\u064F',\n'afii57456':u'\\u0650',\n'afii57457':u'\\u0651',\n'afii57458':u'\\u0652',\n'afii57470':u'\\u0647',\n'afii57505':u'\\u06A4',\n'afii57506':u'\\u067E',\n'afii57507':u'\\u0686',\n'afii57508':u'\\u0698',\n'afii57509':u'\\u06AF',\n'afii57511':u'\\u0679',\n'afii57512':u'\\u0688',\n'afii57513':u'\\u0691',\n'afii57514':u'\\u06BA',\n'afii57519':u'\\u06D2',\n'afii57534':u'\\u06D5',\n'afii57636':u'\\u20AA',\n'afii57645':u'\\u05BE',\n'afii57658':u'\\u05C3',\n'afii57664':u'\\u05D0',\n'afii57665':u'\\u05D1',\n'afii57666':u'\\u05D2',\n'afii57667':u'\\u05D3',\n'afii57668':u'\\u05D4',\n'afii57669':u'\\u05D5',\n'afii57670':u'\\u05D6',\n'afii57671':u'\\u05D7',\n'afii57672':u'\\u05D8',\n'afii57673':u'\\u05D9',\n'afii57674':u'\\u05DA',\n'afii57675':u'\\u05DB',\n'afii57676':u'\\u05DC',\n'afii57677':u'\\u05DD',\n'afii57678':u'\\u05DE',\n'afii57679':u'\\u05DF',\n'afii57680':u'\\u05E0',\n'afii57681':u'\\u05E1',\n'afii57682':u'\\u05E2',\n'afii57683':u'\\u05E3',\n'afii57684':u'\\u05E4',\n'afii57685':u'\\u05E5',\n'afii57686':u'\\u05E6',\n'afii57687':u'\\u05E7',\n'afii57688':u'\\u05E8',\n'afii57689':u'\\u05E9',\n'afii57690':u'\\u05EA',\n'afii57694':u'\\uFB2A',\n'afii57695':u'\\uFB2B',\n'afii57700':u'\\uFB4B',\n'afii57705':u'\\uFB1F',\n'afii57716':u'\\u05F0',\n'afii57717':u'\\u05F1',\n'afii57718':u'\\u05F2',\n'afii57723':u'\\uFB35',\n'afii57793':u'\\u05B4',\n'afii57794':u'\\u05B5',\n'afii57795':u'\\u05B6',\n'afii57796':u'\\u05BB',\n'afii57797':u'\\u05B8',\n'afii57798':u'\\u05B7',\n'afii57799':u'\\u05B0',\n'afii57800':u'\\u05B2',\n'afii57801':u'\\u05B1',\n'afii57802':u'\\u05B3',\n'afii57803':u'\\u05C2',\n'afii57804':u'\\u05C1',\n'afii57806':u'\\u05B9',\n'afii57807':u'\\u05BC',\n'afii57839':u'\\u05BD',\n'afii57841':u'\\u05BF',\n'afii57842':u'\\u05C0',\n'afii57929':u'\\u02BC',\n'afii61248':u'\\u2105',\n'afii61289':u'\\u2113',\n'afii61352':u'\\u2116',\n'afii61573':u'\\u202C',\n'afii61574':u'\\u202D',\n'afii61575':u'\\u202E',\n'afii61664':u'\\u200C',\n'afii63167':u'\\u066D',\n'afii64937':u'\\u02BD',\n'agrave':u'\\u00E0',\n'agujarati':u'\\u0A85',\n'agurmukhi':u'\\u0A05',\n'ahiragana':u'\\u3042',\n'ahookabove':u'\\u1EA3',\n'aibengali':u'\\u0990',\n'aibopomofo':u'\\u311E',\n'aideva':u'\\u0910',\n'aiecyrillic':u'\\u04D5',\n'aigujarati':u'\\u0A90',\n'aigurmukhi':u'\\u0A10',\n'aimatragurmukhi':u'\\u0A48',\n'ainarabic':u'\\u0639',\n'ainfinalarabic':u'\\uFECA',\n'aininitialarabic':u'\\uFECB',\n'ainmedialarabic':u'\\uFECC',\n'ainvertedbreve':u'\\u0203',\n'aivowelsignbengali':u'\\u09C8',\n'aivowelsigndeva':u'\\u0948',\n'aivowelsigngujarati':u'\\u0AC8',\n'akatakana':u'\\u30A2',\n'akatakanahalfwidth':u'\\uFF71',\n'akorean':u'\\u314F',\n'alef':u'\\u05D0',\n'alefarabic':u'\\u0627',\n'alefdageshhebrew':u'\\uFB30',\n'aleffinalarabic':u'\\uFE8E',\n'alefhamzaabovearabic':u'\\u0623',\n'alefhamzaabovefinalarabic':u'\\uFE84',\n'alefhamzabelowarabic':u'\\u0625',\n'alefhamzabelowfinalarabic':u'\\uFE88',\n'alefhebrew':u'\\u05D0',\n'aleflamedhebrew':u'\\uFB4F',\n'alefmaddaabovearabic':u'\\u0622',\n'alefmaddaabovefinalarabic':u'\\uFE82',\n'alefmaksuraarabic':u'\\u0649',\n'alefmaksurafinalarabic':u'\\uFEF0',\n'alefmaksurainitialarabic':u'\\uFEF3',\n'alefmaksuramedialarabic':u'\\uFEF4',\n'alefpatahhebrew':u'\\uFB2E',\n'alefqamatshebrew':u'\\uFB2F',\n'aleph':u'\\u2135',\n'allequal':u'\\u224C',\n'alpha':u'\\u03B1',\n'alphatonos':u'\\u03AC',\n'amacron':u'\\u0101',\n'amonospace':u'\\uFF41',\n'ampersand':u'\\u0026',\n'ampersandmonospace':u'\\uFF06',\n'ampersandsmall':u'\\uF726',\n'amsquare':u'\\u33C2',\n'anbopomofo':u'\\u3122',\n'angbopomofo':u'\\u3124',\n'angkhankhuthai':u'\\u0E5A',\n'angle':u'\\u2220',\n'anglebracketleft':u'\\u3008',\n'anglebracketleftvertical':u'\\uFE3F',\n'anglebracketright':u'\\u3009',\n'anglebracketrightvertical':u'\\uFE40',\n'angleleft':u'\\u2329',\n'angleright':u'\\u232A',\n'angstrom':u'\\u212B',\n'anoteleia':u'\\u0387',\n'anudattadeva':u'\\u0952',\n'anusvarabengali':u'\\u0982',\n'anusvaradeva':u'\\u0902',\n'anusvaragujarati':u'\\u0A82',\n'aogonek':u'\\u0105',\n'apaatosquare':u'\\u3300',\n'aparen':u'\\u249C',\n'apostrophearmenian':u'\\u055A',\n'apostrophemod':u'\\u02BC',\n'apple':u'\\uF8FF',\n'approaches':u'\\u2250',\n'approxequal':u'\\u2248',\n'approxequalorimage':u'\\u2252',\n'approximatelyequal':u'\\u2245',\n'araeaekorean':u'\\u318E',\n'araeakorean':u'\\u318D',\n'arc':u'\\u2312',\n'arighthalfring':u'\\u1E9A',\n'aring':u'\\u00E5',\n'aringacute':u'\\u01FB',\n'aringbelow':u'\\u1E01',\n'arrowboth':u'\\u2194',\n'arrowdashdown':u'\\u21E3',\n'arrowdashleft':u'\\u21E0',\n'arrowdashright':u'\\u21E2',\n'arrowdashup':u'\\u21E1',\n'arrowdblboth':u'\\u21D4',\n'arrowdbldown':u'\\u21D3',\n'arrowdblleft':u'\\u21D0',\n'arrowdblright':u'\\u21D2',\n'arrowdblup':u'\\u21D1',\n'arrowdown':u'\\u2193',\n'arrowdownleft':u'\\u2199',\n'arrowdownright':u'\\u2198',\n'arrowdownwhite':u'\\u21E9',\n'arrowheaddownmod':u'\\u02C5',\n'arrowheadleftmod':u'\\u02C2',\n'arrowheadrightmod':u'\\u02C3',\n'arrowheadupmod':u'\\u02C4',\n'arrowhorizex':u'\\uF8E7',\n'arrowleft':u'\\u2190',\n'arrowleftdbl':u'\\u21D0',\n'arrowleftdblstroke':u'\\u21CD',\n'arrowleftoverright':u'\\u21C6',\n'arrowleftwhite':u'\\u21E6',\n'arrowright':u'\\u2192',\n'arrowrightdblstroke':u'\\u21CF',\n'arrowrightheavy':u'\\u279E',\n'arrowrightoverleft':u'\\u21C4',\n'arrowrightwhite':u'\\u21E8',\n'arrowtableft':u'\\u21E4',\n'arrowtabright':u'\\u21E5',\n'arrowup':u'\\u2191',\n'arrowupdn':u'\\u2195',\n'arrowupdnbse':u'\\u21A8',\n'arrowupdownbase':u'\\u21A8',\n'arrowupleft':u'\\u2196',\n'arrowupleftofdown':u'\\u21C5',\n'arrowupright':u'\\u2197',\n'arrowupwhite':u'\\u21E7',\n'arrowvertex':u'\\uF8E6',\n'asciicircum':u'\\u005E',\n'asciicircummonospace':u'\\uFF3E',\n'asciitilde':u'\\u007E',\n'asciitildemonospace':u'\\uFF5E',\n'ascript':u'\\u0251',\n'ascriptturned':u'\\u0252',\n'asmallhiragana':u'\\u3041',\n'asmallkatakana':u'\\u30A1',\n'asmallkatakanahalfwidth':u'\\uFF67',\n'asterisk':u'\\u002A',\n'asteriskaltonearabic':u'\\u066D',\n'asteriskarabic':u'\\u066D',\n'asteriskmath':u'\\u2217',\n'asteriskmonospace':u'\\uFF0A',\n'asterisksmall':u'\\uFE61',\n'asterism':u'\\u2042',\n'asuperior':u'\\uF6E9',\n'asymptoticallyequal':u'\\u2243',\n'at':u'\\u0040',\n'atilde':u'\\u00E3',\n'atmonospace':u'\\uFF20',\n'atsmall':u'\\uFE6B',\n'aturned':u'\\u0250',\n'aubengali':u'\\u0994',\n'aubopomofo':u'\\u3120',\n'audeva':u'\\u0914',\n'augujarati':u'\\u0A94',\n'augurmukhi':u'\\u0A14',\n'aulengthmarkbengali':u'\\u09D7',\n'aumatragurmukhi':u'\\u0A4C',\n'auvowelsignbengali':u'\\u09CC',\n'auvowelsigndeva':u'\\u094C',\n'auvowelsigngujarati':u'\\u0ACC',\n'avagrahadeva':u'\\u093D',\n'aybarmenian':u'\\u0561',\n'ayin':u'\\u05E2',\n'ayinaltonehebrew':u'\\uFB20',\n'ayinhebrew':u'\\u05E2',\n'b':u'\\u0062',\n'babengali':u'\\u09AC',\n'backslash':u'\\u005C',\n'backslashmonospace':u'\\uFF3C',\n'badeva':u'\\u092C',\n'bagujarati':u'\\u0AAC',\n'bagurmukhi':u'\\u0A2C',\n'bahiragana':u'\\u3070',\n'bahtthai':u'\\u0E3F',\n'bakatakana':u'\\u30D0',\n'bar':u'\\u007C',\n'barmonospace':u'\\uFF5C',\n'bbopomofo':u'\\u3105',\n'bcircle':u'\\u24D1',\n'bdotaccent':u'\\u1E03',\n'bdotbelow':u'\\u1E05',\n'beamedsixteenthnotes':u'\\u266C',\n'because':u'\\u2235',\n'becyrillic':u'\\u0431',\n'beharabic':u'\\u0628',\n'behfinalarabic':u'\\uFE90',\n'behinitialarabic':u'\\uFE91',\n'behiragana':u'\\u3079',\n'behmedialarabic':u'\\uFE92',\n'behmeeminitialarabic':u'\\uFC9F',\n'behmeemisolatedarabic':u'\\uFC08',\n'behnoonfinalarabic':u'\\uFC6D',\n'bekatakana':u'\\u30D9',\n'benarmenian':u'\\u0562',\n'bet':u'\\u05D1',\n'beta':u'\\u03B2',\n'betasymbolgreek':u'\\u03D0',\n'betdagesh':u'\\uFB31',\n'betdageshhebrew':u'\\uFB31',\n'bethebrew':u'\\u05D1',\n'betrafehebrew':u'\\uFB4C',\n'bhabengali':u'\\u09AD',\n'bhadeva':u'\\u092D',\n'bhagujarati':u'\\u0AAD',\n'bhagurmukhi':u'\\u0A2D',\n'bhook':u'\\u0253',\n'bihiragana':u'\\u3073',\n'bikatakana':u'\\u30D3',\n'bilabialclick':u'\\u0298',\n'bindigurmukhi':u'\\u0A02',\n'birusquare':u'\\u3331',\n'blackcircle':u'\\u25CF',\n'blackdiamond':u'\\u25C6',\n'blackdownpointingtriangle':u'\\u25BC',\n'blackleftpointingpointer':u'\\u25C4',\n'blackleftpointingtriangle':u'\\u25C0',\n'blacklenticularbracketleft':u'\\u3010',\n'blacklenticularbracketleftvertical':u'\\uFE3B',\n'blacklenticularbracketright':u'\\u3011',\n'blacklenticularbracketrightvertical':u'\\uFE3C',\n'blacklowerlefttriangle':u'\\u25E3',\n'blacklowerrighttriangle':u'\\u25E2',\n'blackrectangle':u'\\u25AC',\n'blackrightpointingpointer':u'\\u25BA',\n'blackrightpointingtriangle':u'\\u25B6',\n'blacksmallsquare':u'\\u25AA',\n'blacksmilingface':u'\\u263B',\n'blacksquare':u'\\u25A0',\n'blackstar':u'\\u2605',\n'blackupperlefttriangle':u'\\u25E4',\n'blackupperrighttriangle':u'\\u25E5',\n'blackuppointingsmalltriangle':u'\\u25B4',\n'blackuppointingtriangle':u'\\u25B2',\n'blank':u'\\u2423',\n'blinebelow':u'\\u1E07',\n'block':u'\\u2588',\n'bmonospace':u'\\uFF42',\n'bobaimaithai':u'\\u0E1A',\n'bohiragana':u'\\u307C',\n'bokatakana':u'\\u30DC',\n'bparen':u'\\u249D',\n'bqsquare':u'\\u33C3',\n'braceex':u'\\uF8F4',\n'braceleft':u'\\u007B',\n'braceleftbt':u'\\uF8F3',\n'braceleftmid':u'\\uF8F2',\n'braceleftmonospace':u'\\uFF5B',\n'braceleftsmall':u'\\uFE5B',\n'bracelefttp':u'\\uF8F1',\n'braceleftvertical':u'\\uFE37',\n'braceright':u'\\u007D',\n'bracerightbt':u'\\uF8FE',\n'bracerightmid':u'\\uF8FD',\n'bracerightmonospace':u'\\uFF5D',\n'bracerightsmall':u'\\uFE5C',\n'bracerighttp':u'\\uF8FC',\n'bracerightvertical':u'\\uFE38',\n'bracketleft':u'\\u005B',\n'bracketleftbt':u'\\uF8F0',\n'bracketleftex':u'\\uF8EF',\n'bracketleftmonospace':u'\\uFF3B',\n'bracketlefttp':u'\\uF8EE',\n'bracketright':u'\\u005D',\n'bracketrightbt':u'\\uF8FB',\n'bracketrightex':u'\\uF8FA',\n'bracketrightmonospace':u'\\uFF3D',\n'bracketrighttp':u'\\uF8F9',\n'breve':u'\\u02D8',\n'brevebelowcmb':u'\\u032E',\n'brevecmb':u'\\u0306',\n'breveinvertedbelowcmb':u'\\u032F',\n'breveinvertedcmb':u'\\u0311',\n'breveinverteddoublecmb':u'\\u0361',\n'bridgebelowcmb':u'\\u032A',\n'bridgeinvertedbelowcmb':u'\\u033A',\n'brokenbar':u'\\u00A6',\n'bstroke':u'\\u0180',\n'bsuperior':u'\\uF6EA',\n'btopbar':u'\\u0183',\n'buhiragana':u'\\u3076',\n'bukatakana':u'\\u30D6',\n'bullet':u'\\u2022',\n'bulletinverse':u'\\u25D8',\n'bulletoperator':u'\\u2219',\n'bullseye':u'\\u25CE',\n'c':u'\\u0063',\n'caarmenian':u'\\u056E',\n'cabengali':u'\\u099A',\n'cacute':u'\\u0107',\n'cadeva':u'\\u091A',\n'cagujarati':u'\\u0A9A',\n'cagurmukhi':u'\\u0A1A',\n'calsquare':u'\\u3388',\n'candrabindubengali':u'\\u0981',\n'candrabinducmb':u'\\u0310',\n'candrabindudeva':u'\\u0901',\n'candrabindugujarati':u'\\u0A81',\n'capslock':u'\\u21EA',\n'careof':u'\\u2105',\n'caron':u'\\u02C7',\n'caronbelowcmb':u'\\u032C',\n'caroncmb':u'\\u030C',\n'carriagereturn':u'\\u21B5',\n'cbopomofo':u'\\u3118',\n'ccaron':u'\\u010D',\n'ccedilla':u'\\u00E7',\n'ccedillaacute':u'\\u1E09',\n'ccircle':u'\\u24D2',\n'ccircumflex':u'\\u0109',\n'ccurl':u'\\u0255',\n'cdot':u'\\u010B',\n'cdotaccent':u'\\u010B',\n'cdsquare':u'\\u33C5',\n'cedilla':u'\\u00B8',\n'cedillacmb':u'\\u0327',\n'cent':u'\\u00A2',\n'centigrade':u'\\u2103',\n'centinferior':u'\\uF6DF',\n'centmonospace':u'\\uFFE0',\n'centoldstyle':u'\\uF7A2',\n'centsuperior':u'\\uF6E0',\n'chaarmenian':u'\\u0579',\n'chabengali':u'\\u099B',\n'chadeva':u'\\u091B',\n'chagujarati':u'\\u0A9B',\n'chagurmukhi':u'\\u0A1B',\n'chbopomofo':u'\\u3114',\n'cheabkhasiancyrillic':u'\\u04BD',\n'checkmark':u'\\u2713',\n'checyrillic':u'\\u0447',\n'chedescenderabkhasiancyrillic':u'\\u04BF',\n'chedescendercyrillic':u'\\u04B7',\n'chedieresiscyrillic':u'\\u04F5',\n'cheharmenian':u'\\u0573',\n'chekhakassiancyrillic':u'\\u04CC',\n'cheverticalstrokecyrillic':u'\\u04B9',\n'chi':u'\\u03C7',\n'chieuchacirclekorean':u'\\u3277',\n'chieuchaparenkorean':u'\\u3217',\n'chieuchcirclekorean':u'\\u3269',\n'chieuchkorean':u'\\u314A',\n'chieuchparenkorean':u'\\u3209',\n'chochangthai':u'\\u0E0A',\n'chochanthai':u'\\u0E08',\n'chochingthai':u'\\u0E09',\n'chochoethai':u'\\u0E0C',\n'chook':u'\\u0188',\n'cieucacirclekorean':u'\\u3276',\n'cieucaparenkorean':u'\\u3216',\n'cieuccirclekorean':u'\\u3268',\n'cieuckorean':u'\\u3148',\n'cieucparenkorean':u'\\u3208',\n'cieucuparenkorean':u'\\u321C',\n'circle':u'\\u25CB',\n'circlemultiply':u'\\u2297',\n'circleot':u'\\u2299',\n'circleplus':u'\\u2295',\n'circlepostalmark':u'\\u3036',\n'circlewithlefthalfblack':u'\\u25D0',\n'circlewithrighthalfblack':u'\\u25D1',\n'circumflex':u'\\u02C6',\n'circumflexbelowcmb':u'\\u032D',\n'circumflexcmb':u'\\u0302',\n'clear':u'\\u2327',\n'clickalveolar':u'\\u01C2',\n'clickdental':u'\\u01C0',\n'clicklateral':u'\\u01C1',\n'clickretroflex':u'\\u01C3',\n'club':u'\\u2663',\n'clubsuitblack':u'\\u2663',\n'clubsuitwhite':u'\\u2667',\n'cmcubedsquare':u'\\u33A4',\n'cmonospace':u'\\uFF43',\n'cmsquaredsquare':u'\\u33A0',\n'coarmenian':u'\\u0581',\n'colon':u'\\u003A',\n'colonmonetary':u'\\u20A1',\n'colonmonospace':u'\\uFF1A',\n'colonsign':u'\\u20A1',\n'colonsmall':u'\\uFE55',\n'colontriangularhalfmod':u'\\u02D1',\n'colontriangularmod':u'\\u02D0',\n'comma':u'\\u002C',\n'commaabovecmb':u'\\u0313',\n'commaaboverightcmb':u'\\u0315',\n'commaaccent':u'\\uF6C3',\n'commaarabic':u'\\u060C',\n'commaarmenian':u'\\u055D',\n'commainferior':u'\\uF6E1',\n'commamonospace':u'\\uFF0C',\n'commareversedabovecmb':u'\\u0314',\n'commareversedmod':u'\\u02BD',\n'commasmall':u'\\uFE50',\n'commasuperior':u'\\uF6E2',\n'commaturnedabovecmb':u'\\u0312',\n'commaturnedmod':u'\\u02BB',\n'compass':u'\\u263C',\n'congruent':u'\\u2245',\n'contourintegral':u'\\u222E',\n'control':u'\\u2303',\n'controlACK':u'\\u0006',\n'controlBEL':u'\\u0007',\n'controlBS':u'\\u0008',\n'controlCAN':u'\\u0018',\n'controlCR':u'\\u000D',\n'controlDC1':u'\\u0011',\n'controlDC2':u'\\u0012',\n'controlDC3':u'\\u0013',\n'controlDC4':u'\\u0014',\n'controlDEL':u'\\u007F',\n'controlDLE':u'\\u0010',\n'controlEM':u'\\u0019',\n'controlENQ':u'\\u0005',\n'controlEOT':u'\\u0004',\n'controlESC':u'\\u001B',\n'controlETB':u'\\u0017',\n'controlETX':u'\\u0003',\n'controlFF':u'\\u000C',\n'controlFS':u'\\u001C',\n'controlGS':u'\\u001D',\n'controlHT':u'\\u0009',\n'controlLF':u'\\u000A',\n'controlNAK':u'\\u0015',\n'controlRS':u'\\u001E',\n'controlSI':u'\\u000F',\n'controlSO':u'\\u000E',\n'controlSOT':u'\\u0002',\n'controlSTX':u'\\u0001',\n'controlSUB':u'\\u001A',\n'controlSYN':u'\\u0016',\n'controlUS':u'\\u001F',\n'controlVT':u'\\u000B',\n'copyright':u'\\u00A9',\n'copyrightsans':u'\\uF8E9',\n'copyrightserif':u'\\uF6D9',\n'cornerbracketleft':u'\\u300C',\n'cornerbracketlefthalfwidth':u'\\uFF62',\n'cornerbracketleftvertical':u'\\uFE41',\n'cornerbracketright':u'\\u300D',\n'cornerbracketrighthalfwidth':u'\\uFF63',\n'cornerbracketrightvertical':u'\\uFE42',\n'corporationsquare':u'\\u337F',\n'cosquare':u'\\u33C7',\n'coverkgsquare':u'\\u33C6',\n'cparen':u'\\u249E',\n'cruzeiro':u'\\u20A2',\n'cstretched':u'\\u0297',\n'curlyand':u'\\u22CF',\n'curlyor':u'\\u22CE',\n'currency':u'\\u00A4',\n'cyrBreve':u'\\uF6D1',\n'cyrFlex':u'\\uF6D2',\n'cyrbreve':u'\\uF6D4',\n'cyrflex':u'\\uF6D5',\n'd':u'\\u0064',\n'daarmenian':u'\\u0564',\n'dabengali':u'\\u09A6',\n'dadarabic':u'\\u0636',\n'dadeva':u'\\u0926',\n'dadfinalarabic':u'\\uFEBE',\n'dadinitialarabic':u'\\uFEBF',\n'dadmedialarabic':u'\\uFEC0',\n'dagesh':u'\\u05BC',\n'dageshhebrew':u'\\u05BC',\n'dagger':u'\\u2020',\n'daggerdbl':u'\\u2021',\n'dagujarati':u'\\u0AA6',\n'dagurmukhi':u'\\u0A26',\n'dahiragana':u'\\u3060',\n'dakatakana':u'\\u30C0',\n'dalarabic':u'\\u062F',\n'dalet':u'\\u05D3',\n'daletdagesh':u'\\uFB33',\n'daletdageshhebrew':u'\\uFB33',\n'dalethatafpatah':u'\\u05D3\\u05B2',\n'dalethatafpatahhebrew':u'\\u05D3\\u05B2',\n'dalethatafsegol':u'\\u05D3\\u05B1',\n'dalethatafsegolhebrew':u'\\u05D3\\u05B1',\n'dalethebrew':u'\\u05D3',\n'dalethiriq':u'\\u05D3\\u05B4',\n'dalethiriqhebrew':u'\\u05D3\\u05B4',\n'daletholam':u'\\u05D3\\u05B9',\n'daletholamhebrew':u'\\u05D3\\u05B9',\n'daletpatah':u'\\u05D3\\u05B7',\n'daletpatahhebrew':u'\\u05D3\\u05B7',\n'daletqamats':u'\\u05D3\\u05B8',\n'daletqamatshebrew':u'\\u05D3\\u05B8',\n'daletqubuts':u'\\u05D3\\u05BB',\n'daletqubutshebrew':u'\\u05D3\\u05BB',\n'daletsegol':u'\\u05D3\\u05B6',\n'daletsegolhebrew':u'\\u05D3\\u05B6',\n'daletsheva':u'\\u05D3\\u05B0',\n'daletshevahebrew':u'\\u05D3\\u05B0',\n'dalettsere':u'\\u05D3\\u05B5',\n'dalettserehebrew':u'\\u05D3\\u05B5',\n'dalfinalarabic':u'\\uFEAA',\n'dammaarabic':u'\\u064F',\n'dammalowarabic':u'\\u064F',\n'dammatanaltonearabic':u'\\u064C',\n'dammatanarabic':u'\\u064C',\n'danda':u'\\u0964',\n'dargahebrew':u'\\u05A7',\n'dargalefthebrew':u'\\u05A7',\n'dasiapneumatacyrilliccmb':u'\\u0485',\n'dblGrave':u'\\uF6D3',\n'dblanglebracketleft':u'\\u300A',\n'dblanglebracketleftvertical':u'\\uFE3D',\n'dblanglebracketright':u'\\u300B',\n'dblanglebracketrightvertical':u'\\uFE3E',\n'dblarchinvertedbelowcmb':u'\\u032B',\n'dblarrowleft':u'\\u21D4',\n'dblarrowright':u'\\u21D2',\n'dbldanda':u'\\u0965',\n'dblgrave':u'\\uF6D6',\n'dblgravecmb':u'\\u030F',\n'dblintegral':u'\\u222C',\n'dbllowline':u'\\u2017',\n'dbllowlinecmb':u'\\u0333',\n'dbloverlinecmb':u'\\u033F',\n'dblprimemod':u'\\u02BA',\n'dblverticalbar':u'\\u2016',\n'dblverticallineabovecmb':u'\\u030E',\n'dbopomofo':u'\\u3109',\n'dbsquare':u'\\u33C8',\n'dcaron':u'\\u010F',\n'dcedilla':u'\\u1E11',\n'dcircle':u'\\u24D3',\n'dcircumflexbelow':u'\\u1E13',\n'dcroat':u'\\u0111',\n'ddabengali':u'\\u09A1',\n'ddadeva':u'\\u0921',\n'ddagujarati':u'\\u0AA1',\n'ddagurmukhi':u'\\u0A21',\n'ddalarabic':u'\\u0688',\n'ddalfinalarabic':u'\\uFB89',\n'dddhadeva':u'\\u095C',\n'ddhabengali':u'\\u09A2',\n'ddhadeva':u'\\u0922',\n'ddhagujarati':u'\\u0AA2',\n'ddhagurmukhi':u'\\u0A22',\n'ddotaccent':u'\\u1E0B',\n'ddotbelow':u'\\u1E0D',\n'decimalseparatorarabic':u'\\u066B',\n'decimalseparatorpersian':u'\\u066B',\n'decyrillic':u'\\u0434',\n'degree':u'\\u00B0',\n'dehihebrew':u'\\u05AD',\n'dehiragana':u'\\u3067',\n'deicoptic':u'\\u03EF',\n'dekatakana':u'\\u30C7',\n'deleteleft':u'\\u232B',\n'deleteright':u'\\u2326',\n'delta':u'\\u03B4',\n'deltaturned':u'\\u018D',\n'denominatorminusonenumeratorbengali':u'\\u09F8',\n'dezh':u'\\u02A4',\n'dhabengali':u'\\u09A7',\n'dhadeva':u'\\u0927',\n'dhagujarati':u'\\u0AA7',\n'dhagurmukhi':u'\\u0A27',\n'dhook':u'\\u0257',\n'dialytikatonos':u'\\u0385',\n'dialytikatonoscmb':u'\\u0344',\n'diamond':u'\\u2666',\n'diamondsuitwhite':u'\\u2662',\n'dieresis':u'\\u00A8',\n'dieresisacute':u'\\uF6D7',\n'dieresisbelowcmb':u'\\u0324',\n'dieresiscmb':u'\\u0308',\n'dieresisgrave':u'\\uF6D8',\n'dieresistonos':u'\\u0385',\n'dihiragana':u'\\u3062',\n'dikatakana':u'\\u30C2',\n'dittomark':u'\\u3003',\n'divide':u'\\u00F7',\n'divides':u'\\u2223',\n'divisionslash':u'\\u2215',\n'djecyrillic':u'\\u0452',\n'dkshade':u'\\u2593',\n'dlinebelow':u'\\u1E0F',\n'dlsquare':u'\\u3397',\n'dmacron':u'\\u0111',\n'dmonospace':u'\\uFF44',\n'dnblock':u'\\u2584',\n'dochadathai':u'\\u0E0E',\n'dodekthai':u'\\u0E14',\n'dohiragana':u'\\u3069',\n'dokatakana':u'\\u30C9',\n'dollar':u'\\u0024',\n'dollarinferior':u'\\uF6E3',\n'dollarmonospace':u'\\uFF04',\n'dollaroldstyle':u'\\uF724',\n'dollarsmall':u'\\uFE69',\n'dollarsuperior':u'\\uF6E4',\n'dong':u'\\u20AB',\n'dorusquare':u'\\u3326',\n'dotaccent':u'\\u02D9',\n'dotaccentcmb':u'\\u0307',\n'dotbelowcmb':u'\\u0323',\n'dotbelowcomb':u'\\u0323',\n'dotkatakana':u'\\u30FB',\n'dotlessi':u'\\u0131',\n'dotlessj':u'\\uF6BE',\n'dotlessjstrokehook':u'\\u0284',\n'dotmath':u'\\u22C5',\n'dottedcircle':u'\\u25CC',\n'doubleyodpatah':u'\\uFB1F',\n'doubleyodpatahhebrew':u'\\uFB1F',\n'downtackbelowcmb':u'\\u031E',\n'downtackmod':u'\\u02D5',\n'dparen':u'\\u249F',\n'dsuperior':u'\\uF6EB',\n'dtail':u'\\u0256',\n'dtopbar':u'\\u018C',\n'duhiragana':u'\\u3065',\n'dukatakana':u'\\u30C5',\n'dz':u'\\u01F3',\n'dzaltone':u'\\u02A3',\n'dzcaron':u'\\u01C6',\n'dzcurl':u'\\u02A5',\n'dzeabkhasiancyrillic':u'\\u04E1',\n'dzecyrillic':u'\\u0455',\n'dzhecyrillic':u'\\u045F',\n'e':u'\\u0065',\n'eacute':u'\\u00E9',\n'earth':u'\\u2641',\n'ebengali':u'\\u098F',\n'ebopomofo':u'\\u311C',\n'ebreve':u'\\u0115',\n'ecandradeva':u'\\u090D',\n'ecandragujarati':u'\\u0A8D',\n'ecandravowelsigndeva':u'\\u0945',\n'ecandravowelsigngujarati':u'\\u0AC5',\n'ecaron':u'\\u011B',\n'ecedillabreve':u'\\u1E1D',\n'echarmenian':u'\\u0565',\n'echyiwnarmenian':u'\\u0587',\n'ecircle':u'\\u24D4',\n'ecircumflex':u'\\u00EA',\n'ecircumflexacute':u'\\u1EBF',\n'ecircumflexbelow':u'\\u1E19',\n'ecircumflexdotbelow':u'\\u1EC7',\n'ecircumflexgrave':u'\\u1EC1',\n'ecircumflexhookabove':u'\\u1EC3',\n'ecircumflextilde':u'\\u1EC5',\n'ecyrillic':u'\\u0454',\n'edblgrave':u'\\u0205',\n'edeva':u'\\u090F',\n'edieresis':u'\\u00EB',\n'edot':u'\\u0117',\n'edotaccent':u'\\u0117',\n'edotbelow':u'\\u1EB9',\n'eegurmukhi':u'\\u0A0F',\n'eematragurmukhi':u'\\u0A47',\n'efcyrillic':u'\\u0444',\n'egrave':u'\\u00E8',\n'egujarati':u'\\u0A8F',\n'eharmenian':u'\\u0567',\n'ehbopomofo':u'\\u311D',\n'ehiragana':u'\\u3048',\n'ehookabove':u'\\u1EBB',\n'eibopomofo':u'\\u311F',\n'eight':u'\\u0038',\n'eightarabic':u'\\u0668',\n'eightbengali':u'\\u09EE',\n'eightcircle':u'\\u2467',\n'eightcircleinversesansserif':u'\\u2791',\n'eightdeva':u'\\u096E',\n'eighteencircle':u'\\u2471',\n'eighteenparen':u'\\u2485',\n'eighteenperiod':u'\\u2499',\n'eightgujarati':u'\\u0AEE',\n'eightgurmukhi':u'\\u0A6E',\n'eighthackarabic':u'\\u0668',\n'eighthangzhou':u'\\u3028',\n'eighthnotebeamed':u'\\u266B',\n'eightideographicparen':u'\\u3227',\n'eightinferior':u'\\u2088',\n'eightmonospace':u'\\uFF18',\n'eightoldstyle':u'\\uF738',\n'eightparen':u'\\u247B',\n'eightperiod':u'\\u248F',\n'eightpersian':u'\\u06F8',\n'eightroman':u'\\u2177',\n'eightsuperior':u'\\u2078',\n'eightthai':u'\\u0E58',\n'einvertedbreve':u'\\u0207',\n'eiotifiedcyrillic':u'\\u0465',\n'ekatakana':u'\\u30A8',\n'ekatakanahalfwidth':u'\\uFF74',\n'ekonkargurmukhi':u'\\u0A74',\n'ekorean':u'\\u3154',\n'elcyrillic':u'\\u043B',\n'element':u'\\u2208',\n'elevencircle':u'\\u246A',\n'elevenparen':u'\\u247E',\n'elevenperiod':u'\\u2492',\n'elevenroman':u'\\u217A',\n'ellipsis':u'\\u2026',\n'ellipsisvertical':u'\\u22EE',\n'emacron':u'\\u0113',\n'emacronacute':u'\\u1E17',\n'emacrongrave':u'\\u1E15',\n'emcyrillic':u'\\u043C',\n'emdash':u'\\u2014',\n'emdashvertical':u'\\uFE31',\n'emonospace':u'\\uFF45',\n'emphasismarkarmenian':u'\\u055B',\n'emptyset':u'\\u2205',\n'enbopomofo':u'\\u3123',\n'encyrillic':u'\\u043D',\n'endash':u'\\u2013',\n'endashvertical':u'\\uFE32',\n'endescendercyrillic':u'\\u04A3',\n'eng':u'\\u014B',\n'engbopomofo':u'\\u3125',\n'enghecyrillic':u'\\u04A5',\n'enhookcyrillic':u'\\u04C8',\n'enspace':u'\\u2002',\n'eogonek':u'\\u0119',\n'eokorean':u'\\u3153',\n'eopen':u'\\u025B',\n'eopenclosed':u'\\u029A',\n'eopenreversed':u'\\u025C',\n'eopenreversedclosed':u'\\u025E',\n'eopenreversedhook':u'\\u025D',\n'eparen':u'\\u24A0',\n'epsilon':u'\\u03B5',\n'epsilontonos':u'\\u03AD',\n'equal':u'\\u003D',\n'equalmonospace':u'\\uFF1D',\n'equalsmall':u'\\uFE66',\n'equalsuperior':u'\\u207C',\n'equivalence':u'\\u2261',\n'erbopomofo':u'\\u3126',\n'ercyrillic':u'\\u0440',\n'ereversed':u'\\u0258',\n'ereversedcyrillic':u'\\u044D',\n'escyrillic':u'\\u0441',\n'esdescendercyrillic':u'\\u04AB',\n'esh':u'\\u0283',\n'eshcurl':u'\\u0286',\n'eshortdeva':u'\\u090E',\n'eshortvowelsigndeva':u'\\u0946',\n'eshreversedloop':u'\\u01AA',\n'eshsquatreversed':u'\\u0285',\n'esmallhiragana':u'\\u3047',\n'esmallkatakana':u'\\u30A7',\n'esmallkatakanahalfwidth':u'\\uFF6A',\n'estimated':u'\\u212E',\n'esuperior':u'\\uF6EC',\n'eta':u'\\u03B7',\n'etarmenian':u'\\u0568',\n'etatonos':u'\\u03AE',\n'eth':u'\\u00F0',\n'etilde':u'\\u1EBD',\n'etildebelow':u'\\u1E1B',\n'etnahtafoukhhebrew':u'\\u0591',\n'etnahtafoukhlefthebrew':u'\\u0591',\n'etnahtahebrew':u'\\u0591',\n'etnahtalefthebrew':u'\\u0591',\n'eturned':u'\\u01DD',\n'eukorean':u'\\u3161',\n'euro':u'\\u20AC',\n'evowelsignbengali':u'\\u09C7',\n'evowelsigndeva':u'\\u0947',\n'evowelsigngujarati':u'\\u0AC7',\n'exclam':u'\\u0021',\n'exclamarmenian':u'\\u055C',\n'exclamdbl':u'\\u203C',\n'exclamdown':u'\\u00A1',\n'exclamdownsmall':u'\\uF7A1',\n'exclammonospace':u'\\uFF01',\n'exclamsmall':u'\\uF721',\n'existential':u'\\u2203',\n'ezh':u'\\u0292',\n'ezhcaron':u'\\u01EF',\n'ezhcurl':u'\\u0293',\n'ezhreversed':u'\\u01B9',\n'ezhtail':u'\\u01BA',\n'f':u'\\u0066',\n'fadeva':u'\\u095E',\n'fagurmukhi':u'\\u0A5E',\n'fahrenheit':u'\\u2109',\n'fathaarabic':u'\\u064E',\n'fathalowarabic':u'\\u064E',\n'fathatanarabic':u'\\u064B',\n'fbopomofo':u'\\u3108',\n'fcircle':u'\\u24D5',\n'fdotaccent':u'\\u1E1F',\n'feharabic':u'\\u0641',\n'feharmenian':u'\\u0586',\n'fehfinalarabic':u'\\uFED2',\n'fehinitialarabic':u'\\uFED3',\n'fehmedialarabic':u'\\uFED4',\n'feicoptic':u'\\u03E5',\n'female':u'\\u2640',\n'ff':u'\\uFB00',\n'ffi':u'\\uFB03',\n'ffl':u'\\uFB04',\n'fi':u'\\uFB01',\n'fifteencircle':u'\\u246E',\n'fifteenparen':u'\\u2482',\n'fifteenperiod':u'\\u2496',\n'figuredash':u'\\u2012',\n'filledbox':u'\\u25A0',\n'filledrect':u'\\u25AC',\n'finalkaf':u'\\u05DA',\n'finalkafdagesh':u'\\uFB3A',\n'finalkafdageshhebrew':u'\\uFB3A',\n'finalkafhebrew':u'\\u05DA',\n'finalkafqamats':u'\\u05DA\\u05B8',\n'finalkafqamatshebrew':u'\\u05DA\\u05B8',\n'finalkafsheva':u'\\u05DA\\u05B0',\n'finalkafshevahebrew':u'\\u05DA\\u05B0',\n'finalmem':u'\\u05DD',\n'finalmemhebrew':u'\\u05DD',\n'finalnun':u'\\u05DF',\n'finalnunhebrew':u'\\u05DF',\n'finalpe':u'\\u05E3',\n'finalpehebrew':u'\\u05E3',\n'finaltsadi':u'\\u05E5',\n'finaltsadihebrew':u'\\u05E5',\n'firsttonechinese':u'\\u02C9',\n'fisheye':u'\\u25C9',\n'fitacyrillic':u'\\u0473',\n'five':u'\\u0035',\n'fivearabic':u'\\u0665',\n'fivebengali':u'\\u09EB',\n'fivecircle':u'\\u2464',\n'fivecircleinversesansserif':u'\\u278E',\n'fivedeva':u'\\u096B',\n'fiveeighths':u'\\u215D',\n'fivegujarati':u'\\u0AEB',\n'fivegurmukhi':u'\\u0A6B',\n'fivehackarabic':u'\\u0665',\n'fivehangzhou':u'\\u3025',\n'fiveideographicparen':u'\\u3224',\n'fiveinferior':u'\\u2085',\n'fivemonospace':u'\\uFF15',\n'fiveoldstyle':u'\\uF735',\n'fiveparen':u'\\u2478',\n'fiveperiod':u'\\u248C',\n'fivepersian':u'\\u06F5',\n'fiveroman':u'\\u2174',\n'fivesuperior':u'\\u2075',\n'fivethai':u'\\u0E55',\n'fl':u'\\uFB02',\n'florin':u'\\u0192',\n'fmonospace':u'\\uFF46',\n'fmsquare':u'\\u3399',\n'fofanthai':u'\\u0E1F',\n'fofathai':u'\\u0E1D',\n'fongmanthai':u'\\u0E4F',\n'forall':u'\\u2200',\n'four':u'\\u0034',\n'fourarabic':u'\\u0664',\n'fourbengali':u'\\u09EA',\n'fourcircle':u'\\u2463',\n'fourcircleinversesansserif':u'\\u278D',\n'fourdeva':u'\\u096A',\n'fourgujarati':u'\\u0AEA',\n'fourgurmukhi':u'\\u0A6A',\n'fourhackarabic':u'\\u0664',\n'fourhangzhou':u'\\u3024',\n'fourideographicparen':u'\\u3223',\n'fourinferior':u'\\u2084',\n'fourmonospace':u'\\uFF14',\n'fournumeratorbengali':u'\\u09F7',\n'fouroldstyle':u'\\uF734',\n'fourparen':u'\\u2477',\n'fourperiod':u'\\u248B',\n'fourpersian':u'\\u06F4',\n'fourroman':u'\\u2173',\n'foursuperior':u'\\u2074',\n'fourteencircle':u'\\u246D',\n'fourteenparen':u'\\u2481',\n'fourteenperiod':u'\\u2495',\n'fourthai':u'\\u0E54',\n'fourthtonechinese':u'\\u02CB',\n'fparen':u'\\u24A1',\n'fraction':u'\\u2044',\n'franc':u'\\u20A3',\n'g':u'\\u0067',\n'gabengali':u'\\u0997',\n'gacute':u'\\u01F5',\n'gadeva':u'\\u0917',\n'gafarabic':u'\\u06AF',\n'gaffinalarabic':u'\\uFB93',\n'gafinitialarabic':u'\\uFB94',\n'gafmedialarabic':u'\\uFB95',\n'gagujarati':u'\\u0A97',\n'gagurmukhi':u'\\u0A17',\n'gahiragana':u'\\u304C',\n'gakatakana':u'\\u30AC',\n'gamma':u'\\u03B3',\n'gammalatinsmall':u'\\u0263',\n'gammasuperior':u'\\u02E0',\n'gangiacoptic':u'\\u03EB',\n'gbopomofo':u'\\u310D',\n'gbreve':u'\\u011F',\n'gcaron':u'\\u01E7',\n'gcedilla':u'\\u0123',\n'gcircle':u'\\u24D6',\n'gcircumflex':u'\\u011D',\n'gcommaaccent':u'\\u0123',\n'gdot':u'\\u0121',\n'gdotaccent':u'\\u0121',\n'gecyrillic':u'\\u0433',\n'gehiragana':u'\\u3052',\n'gekatakana':u'\\u30B2',\n'geometricallyequal':u'\\u2251',\n'gereshaccenthebrew':u'\\u059C',\n'gereshhebrew':u'\\u05F3',\n'gereshmuqdamhebrew':u'\\u059D',\n'germandbls':u'\\u00DF',\n'gershayimaccenthebrew':u'\\u059E',\n'gershayimhebrew':u'\\u05F4',\n'getamark':u'\\u3013',\n'ghabengali':u'\\u0998',\n'ghadarmenian':u'\\u0572',\n'ghadeva':u'\\u0918',\n'ghagujarati':u'\\u0A98',\n'ghagurmukhi':u'\\u0A18',\n'ghainarabic':u'\\u063A',\n'ghainfinalarabic':u'\\uFECE',\n'ghaininitialarabic':u'\\uFECF',\n'ghainmedialarabic':u'\\uFED0',\n'ghemiddlehookcyrillic':u'\\u0495',\n'ghestrokecyrillic':u'\\u0493',\n'gheupturncyrillic':u'\\u0491',\n'ghhadeva':u'\\u095A',\n'ghhagurmukhi':u'\\u0A5A',\n'ghook':u'\\u0260',\n'ghzsquare':u'\\u3393',\n'gihiragana':u'\\u304E',\n'gikatakana':u'\\u30AE',\n'gimarmenian':u'\\u0563',\n'gimel':u'\\u05D2',\n'gimeldagesh':u'\\uFB32',\n'gimeldageshhebrew':u'\\uFB32',\n'gimelhebrew':u'\\u05D2',\n'gjecyrillic':u'\\u0453',\n'glottalinvertedstroke':u'\\u01BE',\n'glottalstop':u'\\u0294',\n'glottalstopinverted':u'\\u0296',\n'glottalstopmod':u'\\u02C0',\n'glottalstopreversed':u'\\u0295',\n'glottalstopreversedmod':u'\\u02C1',\n'glottalstopreversedsuperior':u'\\u02E4',\n'glottalstopstroke':u'\\u02A1',\n'glottalstopstrokereversed':u'\\u02A2',\n'gmacron':u'\\u1E21',\n'gmonospace':u'\\uFF47',\n'gohiragana':u'\\u3054',\n'gokatakana':u'\\u30B4',\n'gparen':u'\\u24A2',\n'gpasquare':u'\\u33AC',\n'gradient':u'\\u2207',\n'grave':u'\\u0060',\n'gravebelowcmb':u'\\u0316',\n'gravecmb':u'\\u0300',\n'gravecomb':u'\\u0300',\n'gravedeva':u'\\u0953',\n'gravelowmod':u'\\u02CE',\n'gravemonospace':u'\\uFF40',\n'gravetonecmb':u'\\u0340',\n'greater':u'\\u003E',\n'greaterequal':u'\\u2265',\n'greaterequalorless':u'\\u22DB',\n'greatermonospace':u'\\uFF1E',\n'greaterorequivalent':u'\\u2273',\n'greaterorless':u'\\u2277',\n'greateroverequal':u'\\u2267',\n'greatersmall':u'\\uFE65',\n'gscript':u'\\u0261',\n'gstroke':u'\\u01E5',\n'guhiragana':u'\\u3050',\n'guillemotleft':u'\\u00AB',\n'guillemotright':u'\\u00BB',\n'guilsinglleft':u'\\u2039',\n'guilsinglright':u'\\u203A',\n'gukatakana':u'\\u30B0',\n'guramusquare':u'\\u3318',\n'gysquare':u'\\u33C9',\n'h':u'\\u0068',\n'haabkhasiancyrillic':u'\\u04A9',\n'haaltonearabic':u'\\u06C1',\n'habengali':u'\\u09B9',\n'hadescendercyrillic':u'\\u04B3',\n'hadeva':u'\\u0939',\n'hagujarati':u'\\u0AB9',\n'hagurmukhi':u'\\u0A39',\n'haharabic':u'\\u062D',\n'hahfinalarabic':u'\\uFEA2',\n'hahinitialarabic':u'\\uFEA3',\n'hahiragana':u'\\u306F',\n'hahmedialarabic':u'\\uFEA4',\n'haitusquare':u'\\u332A',\n'hakatakana':u'\\u30CF',\n'hakatakanahalfwidth':u'\\uFF8A',\n'halantgurmukhi':u'\\u0A4D',\n'hamzaarabic':u'\\u0621',\n'hamzadammaarabic':u'\\u0621\\u064F',\n'hamzadammatanarabic':u'\\u0621\\u064C',\n'hamzafathaarabic':u'\\u0621\\u064E',\n'hamzafathatanarabic':u'\\u0621\\u064B',\n'hamzalowarabic':u'\\u0621',\n'hamzalowkasraarabic':u'\\u0621\\u0650',\n'hamzalowkasratanarabic':u'\\u0621\\u064D',\n'hamzasukunarabic':u'\\u0621\\u0652',\n'hangulfiller':u'\\u3164',\n'hardsigncyrillic':u'\\u044A',\n'harpoonleftbarbup':u'\\u21BC',\n'harpoonrightbarbup':u'\\u21C0',\n'hasquare':u'\\u33CA',\n'hatafpatah':u'\\u05B2',\n'hatafpatah16':u'\\u05B2',\n'hatafpatah23':u'\\u05B2',\n'hatafpatah2f':u'\\u05B2',\n'hatafpatahhebrew':u'\\u05B2',\n'hatafpatahnarrowhebrew':u'\\u05B2',\n'hatafpatahquarterhebrew':u'\\u05B2',\n'hatafpatahwidehebrew':u'\\u05B2',\n'hatafqamats':u'\\u05B3',\n'hatafqamats1b':u'\\u05B3',\n'hatafqamats28':u'\\u05B3',\n'hatafqamats34':u'\\u05B3',\n'hatafqamatshebrew':u'\\u05B3',\n'hatafqamatsnarrowhebrew':u'\\u05B3',\n'hatafqamatsquarterhebrew':u'\\u05B3',\n'hatafqamatswidehebrew':u'\\u05B3',\n'hatafsegol':u'\\u05B1',\n'hatafsegol17':u'\\u05B1',\n'hatafsegol24':u'\\u05B1',\n'hatafsegol30':u'\\u05B1',\n'hatafsegolhebrew':u'\\u05B1',\n'hatafsegolnarrowhebrew':u'\\u05B1',\n'hatafsegolquarterhebrew':u'\\u05B1',\n'hatafsegolwidehebrew':u'\\u05B1',\n'hbar':u'\\u0127',\n'hbopomofo':u'\\u310F',\n'hbrevebelow':u'\\u1E2B',\n'hcedilla':u'\\u1E29',\n'hcircle':u'\\u24D7',\n'hcircumflex':u'\\u0125',\n'hdieresis':u'\\u1E27',\n'hdotaccent':u'\\u1E23',\n'hdotbelow':u'\\u1E25',\n'he':u'\\u05D4',\n'heart':u'\\u2665',\n'heartsuitblack':u'\\u2665',\n'heartsuitwhite':u'\\u2661',\n'hedagesh':u'\\uFB34',\n'hedageshhebrew':u'\\uFB34',\n'hehaltonearabic':u'\\u06C1',\n'heharabic':u'\\u0647',\n'hehebrew':u'\\u05D4',\n'hehfinalaltonearabic':u'\\uFBA7',\n'hehfinalalttwoarabic':u'\\uFEEA',\n'hehfinalarabic':u'\\uFEEA',\n'hehhamzaabovefinalarabic':u'\\uFBA5',\n'hehhamzaaboveisolatedarabic':u'\\uFBA4',\n'hehinitialaltonearabic':u'\\uFBA8',\n'hehinitialarabic':u'\\uFEEB',\n'hehiragana':u'\\u3078',\n'hehmedialaltonearabic':u'\\uFBA9',\n'hehmedialarabic':u'\\uFEEC',\n'heiseierasquare':u'\\u337B',\n'hekatakana':u'\\u30D8',\n'hekatakanahalfwidth':u'\\uFF8D',\n'hekutaarusquare':u'\\u3336',\n'henghook':u'\\u0267',\n'herutusquare':u'\\u3339',\n'het':u'\\u05D7',\n'hethebrew':u'\\u05D7',\n'hhook':u'\\u0266',\n'hhooksuperior':u'\\u02B1',\n'hieuhacirclekorean':u'\\u327B',\n'hieuhaparenkorean':u'\\u321B',\n'hieuhcirclekorean':u'\\u326D',\n'hieuhkorean':u'\\u314E',\n'hieuhparenkorean':u'\\u320D',\n'hihiragana':u'\\u3072',\n'hikatakana':u'\\u30D2',\n'hikatakanahalfwidth':u'\\uFF8B',\n'hiriq':u'\\u05B4',\n'hiriq14':u'\\u05B4',\n'hiriq21':u'\\u05B4',\n'hiriq2d':u'\\u05B4',\n'hiriqhebrew':u'\\u05B4',\n'hiriqnarrowhebrew':u'\\u05B4',\n'hiriqquarterhebrew':u'\\u05B4',\n'hiriqwidehebrew':u'\\u05B4',\n'hlinebelow':u'\\u1E96',\n'hmonospace':u'\\uFF48',\n'hoarmenian':u'\\u0570',\n'hohipthai':u'\\u0E2B',\n'hohiragana':u'\\u307B',\n'hokatakana':u'\\u30DB',\n'hokatakanahalfwidth':u'\\uFF8E',\n'holam':u'\\u05B9',\n'holam19':u'\\u05B9',\n'holam26':u'\\u05B9',\n'holam32':u'\\u05B9',\n'holamhebrew':u'\\u05B9',\n'holamnarrowhebrew':u'\\u05B9',\n'holamquarterhebrew':u'\\u05B9',\n'holamwidehebrew':u'\\u05B9',\n'honokhukthai':u'\\u0E2E',\n'hookabovecomb':u'\\u0309',\n'hookcmb':u'\\u0309',\n'hookpalatalizedbelowcmb':u'\\u0321',\n'hookretroflexbelowcmb':u'\\u0322',\n'hoonsquare':u'\\u3342',\n'horicoptic':u'\\u03E9',\n'horizontalbar':u'\\u2015',\n'horncmb':u'\\u031B',\n'hotsprings':u'\\u2668',\n'house':u'\\u2302',\n'hparen':u'\\u24A3',\n'hsuperior':u'\\u02B0',\n'hturned':u'\\u0265',\n'huhiragana':u'\\u3075',\n'huiitosquare':u'\\u3333',\n'hukatakana':u'\\u30D5',\n'hukatakanahalfwidth':u'\\uFF8C',\n'hungarumlaut':u'\\u02DD',\n'hungarumlautcmb':u'\\u030B',\n'hv':u'\\u0195',\n'hyphen':u'\\u002D',\n'hypheninferior':u'\\uF6E5',\n'hyphenmonospace':u'\\uFF0D',\n'hyphensmall':u'\\uFE63',\n'hyphensuperior':u'\\uF6E6',\n'hyphentwo':u'\\u2010',\n'i':u'\\u0069',\n'iacute':u'\\u00ED',\n'iacyrillic':u'\\u044F',\n'ibengali':u'\\u0987',\n'ibopomofo':u'\\u3127',\n'ibreve':u'\\u012D',\n'icaron':u'\\u01D0',\n'icircle':u'\\u24D8',\n'icircumflex':u'\\u00EE',\n'icyrillic':u'\\u0456',\n'idblgrave':u'\\u0209',\n'ideographearthcircle':u'\\u328F',\n'ideographfirecircle':u'\\u328B',\n'ideographicallianceparen':u'\\u323F',\n'ideographiccallparen':u'\\u323A',\n'ideographiccentrecircle':u'\\u32A5',\n'ideographicclose':u'\\u3006',\n'ideographiccomma':u'\\u3001',\n'ideographiccommaleft':u'\\uFF64',\n'ideographiccongratulationparen':u'\\u3237',\n'ideographiccorrectcircle':u'\\u32A3',\n'ideographicearthparen':u'\\u322F',\n'ideographicenterpriseparen':u'\\u323D',\n'ideographicexcellentcircle':u'\\u329D',\n'ideographicfestivalparen':u'\\u3240',\n'ideographicfinancialcircle':u'\\u3296',\n'ideographicfinancialparen':u'\\u3236',\n'ideographicfireparen':u'\\u322B',\n'ideographichaveparen':u'\\u3232',\n'ideographichighcircle':u'\\u32A4',\n'ideographiciterationmark':u'\\u3005',\n'ideographiclaborcircle':u'\\u3298',\n'ideographiclaborparen':u'\\u3238',\n'ideographicleftcircle':u'\\u32A7',\n'ideographiclowcircle':u'\\u32A6',\n'ideographicmedicinecircle':u'\\u32A9',\n'ideographicmetalparen':u'\\u322E',\n'ideographicmoonparen':u'\\u322A',\n'ideographicnameparen':u'\\u3234',\n'ideographicperiod':u'\\u3002',\n'ideographicprintcircle':u'\\u329E',\n'ideographicreachparen':u'\\u3243',\n'ideographicrepresentparen':u'\\u3239',\n'ideographicresourceparen':u'\\u323E',\n'ideographicrightcircle':u'\\u32A8',\n'ideographicsecretcircle':u'\\u3299',\n'ideographicselfparen':u'\\u3242',\n'ideographicsocietyparen':u'\\u3233',\n'ideographicspace':u'\\u3000',\n'ideographicspecialparen':u'\\u3235',\n'ideographicstockparen':u'\\u3231',\n'ideographicstudyparen':u'\\u323B',\n'ideographicsunparen':u'\\u3230',\n'ideographicsuperviseparen':u'\\u323C',\n'ideographicwaterparen':u'\\u322C',\n'ideographicwoodparen':u'\\u322D',\n'ideographiczero':u'\\u3007',\n'ideographmetalcircle':u'\\u328E',\n'ideographmooncircle':u'\\u328A',\n'ideographnamecircle':u'\\u3294',\n'ideographsuncircle':u'\\u3290',\n'ideographwatercircle':u'\\u328C',\n'ideographwoodcircle':u'\\u328D',\n'ideva':u'\\u0907',\n'idieresis':u'\\u00EF',\n'idieresisacute':u'\\u1E2F',\n'idieresiscyrillic':u'\\u04E5',\n'idotbelow':u'\\u1ECB',\n'iebrevecyrillic':u'\\u04D7',\n'iecyrillic':u'\\u0435',\n'ieungacirclekorean':u'\\u3275',\n'ieungaparenkorean':u'\\u3215',\n'ieungcirclekorean':u'\\u3267',\n'ieungkorean':u'\\u3147',\n'ieungparenkorean':u'\\u3207',\n'igrave':u'\\u00EC',\n'igujarati':u'\\u0A87',\n'igurmukhi':u'\\u0A07',\n'ihiragana':u'\\u3044',\n'ihookabove':u'\\u1EC9',\n'iibengali':u'\\u0988',\n'iicyrillic':u'\\u0438',\n'iideva':u'\\u0908',\n'iigujarati':u'\\u0A88',\n'iigurmukhi':u'\\u0A08',\n'iimatragurmukhi':u'\\u0A40',\n'iinvertedbreve':u'\\u020B',\n'iishortcyrillic':u'\\u0439',\n'iivowelsignbengali':u'\\u09C0',\n'iivowelsigndeva':u'\\u0940',\n'iivowelsigngujarati':u'\\u0AC0',\n'ij':u'\\u0133',\n'ikatakana':u'\\u30A4',\n'ikatakanahalfwidth':u'\\uFF72',\n'ikorean':u'\\u3163',\n'ilde':u'\\u02DC',\n'iluyhebrew':u'\\u05AC',\n'imacron':u'\\u012B',\n'imacroncyrillic':u'\\u04E3',\n'imageorapproximatelyequal':u'\\u2253',\n'imatragurmukhi':u'\\u0A3F',\n'imonospace':u'\\uFF49',\n'increment':u'\\u2206',\n'infinity':u'\\u221E',\n'iniarmenian':u'\\u056B',\n'integral':u'\\u222B',\n'integralbottom':u'\\u2321',\n'integralbt':u'\\u2321',\n'integralex':u'\\uF8F5',\n'integraltop':u'\\u2320',\n'integraltp':u'\\u2320',\n'intersection':u'\\u2229',\n'intisquare':u'\\u3305',\n'invbullet':u'\\u25D8',\n'invcircle':u'\\u25D9',\n'invsmileface':u'\\u263B',\n'iocyrillic':u'\\u0451',\n'iogonek':u'\\u012F',\n'iota':u'\\u03B9',\n'iotadieresis':u'\\u03CA',\n'iotadieresistonos':u'\\u0390',\n'iotalatin':u'\\u0269',\n'iotatonos':u'\\u03AF',\n'iparen':u'\\u24A4',\n'irigurmukhi':u'\\u0A72',\n'ismallhiragana':u'\\u3043',\n'ismallkatakana':u'\\u30A3',\n'ismallkatakanahalfwidth':u'\\uFF68',\n'issharbengali':u'\\u09FA',\n'istroke':u'\\u0268',\n'isuperior':u'\\uF6ED',\n'iterationhiragana':u'\\u309D',\n'iterationkatakana':u'\\u30FD',\n'itilde':u'\\u0129',\n'itildebelow':u'\\u1E2D',\n'iubopomofo':u'\\u3129',\n'iucyrillic':u'\\u044E',\n'ivowelsignbengali':u'\\u09BF',\n'ivowelsigndeva':u'\\u093F',\n'ivowelsigngujarati':u'\\u0ABF',\n'izhitsacyrillic':u'\\u0475',\n'izhitsadblgravecyrillic':u'\\u0477',\n'j':u'\\u006A',\n'jaarmenian':u'\\u0571',\n'jabengali':u'\\u099C',\n'jadeva':u'\\u091C',\n'jagujarati':u'\\u0A9C',\n'jagurmukhi':u'\\u0A1C',\n'jbopomofo':u'\\u3110',\n'jcaron':u'\\u01F0',\n'jcircle':u'\\u24D9',\n'jcircumflex':u'\\u0135',\n'jcrossedtail':u'\\u029D',\n'jdotlessstroke':u'\\u025F',\n'jecyrillic':u'\\u0458',\n'jeemarabic':u'\\u062C',\n'jeemfinalarabic':u'\\uFE9E',\n'jeeminitialarabic':u'\\uFE9F',\n'jeemmedialarabic':u'\\uFEA0',\n'jeharabic':u'\\u0698',\n'jehfinalarabic':u'\\uFB8B',\n'jhabengali':u'\\u099D',\n'jhadeva':u'\\u091D',\n'jhagujarati':u'\\u0A9D',\n'jhagurmukhi':u'\\u0A1D',\n'jheharmenian':u'\\u057B',\n'jis':u'\\u3004',\n'jmonospace':u'\\uFF4A',\n'jparen':u'\\u24A5',\n'jsuperior':u'\\u02B2',\n'k':u'\\u006B',\n'kabashkircyrillic':u'\\u04A1',\n'kabengali':u'\\u0995',\n'kacute':u'\\u1E31',\n'kacyrillic':u'\\u043A',\n'kadescendercyrillic':u'\\u049B',\n'kadeva':u'\\u0915',\n'kaf':u'\\u05DB',\n'kafarabic':u'\\u0643',\n'kafdagesh':u'\\uFB3B',\n'kafdageshhebrew':u'\\uFB3B',\n'kaffinalarabic':u'\\uFEDA',\n'kafhebrew':u'\\u05DB',\n'kafinitialarabic':u'\\uFEDB',\n'kafmedialarabic':u'\\uFEDC',\n'kafrafehebrew':u'\\uFB4D',\n'kagujarati':u'\\u0A95',\n'kagurmukhi':u'\\u0A15',\n'kahiragana':u'\\u304B',\n'kahookcyrillic':u'\\u04C4',\n'kakatakana':u'\\u30AB',\n'kakatakanahalfwidth':u'\\uFF76',\n'kappa':u'\\u03BA',\n'kappasymbolgreek':u'\\u03F0',\n'kapyeounmieumkorean':u'\\u3171',\n'kapyeounphieuphkorean':u'\\u3184',\n'kapyeounpieupkorean':u'\\u3178',\n'kapyeounssangpieupkorean':u'\\u3179',\n'karoriisquare':u'\\u330D',\n'kashidaautoarabic':u'\\u0640',\n'kashidaautonosidebearingarabic':u'\\u0640',\n'kasmallkatakana':u'\\u30F5',\n'kasquare':u'\\u3384',\n'kasraarabic':u'\\u0650',\n'kasratanarabic':u'\\u064D',\n'kastrokecyrillic':u'\\u049F',\n'katahiraprolongmarkhalfwidth':u'\\uFF70',\n'kaverticalstrokecyrillic':u'\\u049D',\n'kbopomofo':u'\\u310E',\n'kcalsquare':u'\\u3389',\n'kcaron':u'\\u01E9',\n'kcedilla':u'\\u0137',\n'kcircle':u'\\u24DA',\n'kcommaaccent':u'\\u0137',\n'kdotbelow':u'\\u1E33',\n'keharmenian':u'\\u0584',\n'kehiragana':u'\\u3051',\n'kekatakana':u'\\u30B1',\n'kekatakanahalfwidth':u'\\uFF79',\n'kenarmenian':u'\\u056F',\n'kesmallkatakana':u'\\u30F6',\n'kgreenlandic':u'\\u0138',\n'khabengali':u'\\u0996',\n'khacyrillic':u'\\u0445',\n'khadeva':u'\\u0916',\n'khagujarati':u'\\u0A96',\n'khagurmukhi':u'\\u0A16',\n'khaharabic':u'\\u062E',\n'khahfinalarabic':u'\\uFEA6',\n'khahinitialarabic':u'\\uFEA7',\n'khahmedialarabic':u'\\uFEA8',\n'kheicoptic':u'\\u03E7',\n'khhadeva':u'\\u0959',\n'khhagurmukhi':u'\\u0A59',\n'khieukhacirclekorean':u'\\u3278',\n'khieukhaparenkorean':u'\\u3218',\n'khieukhcirclekorean':u'\\u326A',\n'khieukhkorean':u'\\u314B',\n'khieukhparenkorean':u'\\u320A',\n'khokhaithai':u'\\u0E02',\n'khokhonthai':u'\\u0E05',\n'khokhuatthai':u'\\u0E03',\n'khokhwaithai':u'\\u0E04',\n'khomutthai':u'\\u0E5B',\n'khook':u'\\u0199',\n'khorakhangthai':u'\\u0E06',\n'khzsquare':u'\\u3391',\n'kihiragana':u'\\u304D',\n'kikatakana':u'\\u30AD',\n'kikatakanahalfwidth':u'\\uFF77',\n'kiroguramusquare':u'\\u3315',\n'kiromeetorusquare':u'\\u3316',\n'kirosquare':u'\\u3314',\n'kiyeokacirclekorean':u'\\u326E',\n'kiyeokaparenkorean':u'\\u320E',\n'kiyeokcirclekorean':u'\\u3260',\n'kiyeokkorean':u'\\u3131',\n'kiyeokparenkorean':u'\\u3200',\n'kiyeoksioskorean':u'\\u3133',\n'kjecyrillic':u'\\u045C',\n'klinebelow':u'\\u1E35',\n'klsquare':u'\\u3398',\n'kmcubedsquare':u'\\u33A6',\n'kmonospace':u'\\uFF4B',\n'kmsquaredsquare':u'\\u33A2',\n'kohiragana':u'\\u3053',\n'kohmsquare':u'\\u33C0',\n'kokaithai':u'\\u0E01',\n'kokatakana':u'\\u30B3',\n'kokatakanahalfwidth':u'\\uFF7A',\n'kooposquare':u'\\u331E',\n'koppacyrillic':u'\\u0481',\n'koreanstandardsymbol':u'\\u327F',\n'koroniscmb':u'\\u0343',\n'kparen':u'\\u24A6',\n'kpasquare':u'\\u33AA',\n'ksicyrillic':u'\\u046F',\n'ktsquare':u'\\u33CF',\n'kturned':u'\\u029E',\n'kuhiragana':u'\\u304F',\n'kukatakana':u'\\u30AF',\n'kukatakanahalfwidth':u'\\uFF78',\n'kvsquare':u'\\u33B8',\n'kwsquare':u'\\u33BE',\n'l':u'\\u006C',\n'labengali':u'\\u09B2',\n'lacute':u'\\u013A',\n'ladeva':u'\\u0932',\n'lagujarati':u'\\u0AB2',\n'lagurmukhi':u'\\u0A32',\n'lakkhangyaothai':u'\\u0E45',\n'lamaleffinalarabic':u'\\uFEFC',\n'lamalefhamzaabovefinalarabic':u'\\uFEF8',\n'lamalefhamzaaboveisolatedarabic':u'\\uFEF7',\n'lamalefhamzabelowfinalarabic':u'\\uFEFA',\n'lamalefhamzabelowisolatedarabic':u'\\uFEF9',\n'lamalefisolatedarabic':u'\\uFEFB',\n'lamalefmaddaabovefinalarabic':u'\\uFEF6',\n'lamalefmaddaaboveisolatedarabic':u'\\uFEF5',\n'lamarabic':u'\\u0644',\n'lambda':u'\\u03BB',\n'lambdastroke':u'\\u019B',\n'lamed':u'\\u05DC',\n'lameddagesh':u'\\uFB3C',\n'lameddageshhebrew':u'\\uFB3C',\n'lamedhebrew':u'\\u05DC',\n'lamedholam':u'\\u05DC\\u05B9',\n'lamedholamdagesh':u'\\u05DC\\u05B9\\u05BC',\n'lamedholamdageshhebrew':u'\\u05DC\\u05B9\\u05BC',\n'lamedholamhebrew':u'\\u05DC\\u05B9',\n'lamfinalarabic':u'\\uFEDE',\n'lamhahinitialarabic':u'\\uFCCA',\n'laminitialarabic':u'\\uFEDF',\n'lamjeeminitialarabic':u'\\uFCC9',\n'lamkhahinitialarabic':u'\\uFCCB',\n'lamlamhehisolatedarabic':u'\\uFDF2',\n'lammedialarabic':u'\\uFEE0',\n'lammeemhahinitialarabic':u'\\uFD88',\n'lammeeminitialarabic':u'\\uFCCC',\n'lammeemjeeminitialarabic':u'\\uFEDF\\uFEE4\\uFEA0',\n'lammeemkhahinitialarabic':u'\\uFEDF\\uFEE4\\uFEA8',\n'largecircle':u'\\u25EF',\n'lbar':u'\\u019A',\n'lbelt':u'\\u026C',\n'lbopomofo':u'\\u310C',\n'lcaron':u'\\u013E',\n'lcedilla':u'\\u013C',\n'lcircle':u'\\u24DB',\n'lcircumflexbelow':u'\\u1E3D',\n'lcommaaccent':u'\\u013C',\n'ldot':u'\\u0140',\n'ldotaccent':u'\\u0140',\n'ldotbelow':u'\\u1E37',\n'ldotbelowmacron':u'\\u1E39',\n'leftangleabovecmb':u'\\u031A',\n'lefttackbelowcmb':u'\\u0318',\n'less':u'\\u003C',\n'lessequal':u'\\u2264',\n'lessequalorgreater':u'\\u22DA',\n'lessmonospace':u'\\uFF1C',\n'lessorequivalent':u'\\u2272',\n'lessorgreater':u'\\u2276',\n'lessoverequal':u'\\u2266',\n'lesssmall':u'\\uFE64',\n'lezh':u'\\u026E',\n'lfblock':u'\\u258C',\n'lhookretroflex':u'\\u026D',\n'lira':u'\\u20A4',\n'liwnarmenian':u'\\u056C',\n'lj':u'\\u01C9',\n'ljecyrillic':u'\\u0459',\n'll':u'\\uF6C0',\n'lladeva':u'\\u0933',\n'llagujarati':u'\\u0AB3',\n'llinebelow':u'\\u1E3B',\n'llladeva':u'\\u0934',\n'llvocalicbengali':u'\\u09E1',\n'llvocalicdeva':u'\\u0961',\n'llvocalicvowelsignbengali':u'\\u09E3',\n'llvocalicvowelsigndeva':u'\\u0963',\n'lmiddletilde':u'\\u026B',\n'lmonospace':u'\\uFF4C',\n'lmsquare':u'\\u33D0',\n'lochulathai':u'\\u0E2C',\n'logicaland':u'\\u2227',\n'logicalnot':u'\\u00AC',\n'logicalnotreversed':u'\\u2310',\n'logicalor':u'\\u2228',\n'lolingthai':u'\\u0E25',\n'longs':u'\\u017F',\n'lowlinecenterline':u'\\uFE4E',\n'lowlinecmb':u'\\u0332',\n'lowlinedashed':u'\\uFE4D',\n'lozenge':u'\\u25CA',\n'lparen':u'\\u24A7',\n'lslash':u'\\u0142',\n'lsquare':u'\\u2113',\n'lsuperior':u'\\uF6EE',\n'ltshade':u'\\u2591',\n'luthai':u'\\u0E26',\n'lvocalicbengali':u'\\u098C',\n'lvocalicdeva':u'\\u090C',\n'lvocalicvowelsignbengali':u'\\u09E2',\n'lvocalicvowelsigndeva':u'\\u0962',\n'lxsquare':u'\\u33D3',\n'm':u'\\u006D',\n'mabengali':u'\\u09AE',\n'macron':u'\\u00AF',\n'macronbelowcmb':u'\\u0331',\n'macroncmb':u'\\u0304',\n'macronlowmod':u'\\u02CD',\n'macronmonospace':u'\\uFFE3',\n'macute':u'\\u1E3F',\n'madeva':u'\\u092E',\n'magujarati':u'\\u0AAE',\n'magurmukhi':u'\\u0A2E',\n'mahapakhhebrew':u'\\u05A4',\n'mahapakhlefthebrew':u'\\u05A4',\n'mahiragana':u'\\u307E',\n'maichattawalowleftthai':u'\\uF895',\n'maichattawalowrightthai':u'\\uF894',\n'maichattawathai':u'\\u0E4B',\n'maichattawaupperleftthai':u'\\uF893',\n'maieklowleftthai':u'\\uF88C',\n'maieklowrightthai':u'\\uF88B',\n'maiekthai':u'\\u0E48',\n'maiekupperleftthai':u'\\uF88A',\n'maihanakatleftthai':u'\\uF884',\n'maihanakatthai':u'\\u0E31',\n'maitaikhuleftthai':u'\\uF889',\n'maitaikhuthai':u'\\u0E47',\n'maitholowleftthai':u'\\uF88F',\n'maitholowrightthai':u'\\uF88E',\n'maithothai':u'\\u0E49',\n'maithoupperleftthai':u'\\uF88D',\n'maitrilowleftthai':u'\\uF892',\n'maitrilowrightthai':u'\\uF891',\n'maitrithai':u'\\u0E4A',\n'maitriupperleftthai':u'\\uF890',\n'maiyamokthai':u'\\u0E46',\n'makatakana':u'\\u30DE',\n'makatakanahalfwidth':u'\\uFF8F',\n'male':u'\\u2642',\n'mansyonsquare':u'\\u3347',\n'maqafhebrew':u'\\u05BE',\n'mars':u'\\u2642',\n'masoracirclehebrew':u'\\u05AF',\n'masquare':u'\\u3383',\n'mbopomofo':u'\\u3107',\n'mbsquare':u'\\u33D4',\n'mcircle':u'\\u24DC',\n'mcubedsquare':u'\\u33A5',\n'mdotaccent':u'\\u1E41',\n'mdotbelow':u'\\u1E43',\n'meemarabic':u'\\u0645',\n'meemfinalarabic':u'\\uFEE2',\n'meeminitialarabic':u'\\uFEE3',\n'meemmedialarabic':u'\\uFEE4',\n'meemmeeminitialarabic':u'\\uFCD1',\n'meemmeemisolatedarabic':u'\\uFC48',\n'meetorusquare':u'\\u334D',\n'mehiragana':u'\\u3081',\n'meizierasquare':u'\\u337E',\n'mekatakana':u'\\u30E1',\n'mekatakanahalfwidth':u'\\uFF92',\n'mem':u'\\u05DE',\n'memdagesh':u'\\uFB3E',\n'memdageshhebrew':u'\\uFB3E',\n'memhebrew':u'\\u05DE',\n'menarmenian':u'\\u0574',\n'merkhahebrew':u'\\u05A5',\n'merkhakefulahebrew':u'\\u05A6',\n'merkhakefulalefthebrew':u'\\u05A6',\n'merkhalefthebrew':u'\\u05A5',\n'mhook':u'\\u0271',\n'mhzsquare':u'\\u3392',\n'middledotkatakanahalfwidth':u'\\uFF65',\n'middot':u'\\u00B7',\n'mieumacirclekorean':u'\\u3272',\n'mieumaparenkorean':u'\\u3212',\n'mieumcirclekorean':u'\\u3264',\n'mieumkorean':u'\\u3141',\n'mieumpansioskorean':u'\\u3170',\n'mieumparenkorean':u'\\u3204',\n'mieumpieupkorean':u'\\u316E',\n'mieumsioskorean':u'\\u316F',\n'mihiragana':u'\\u307F',\n'mikatakana':u'\\u30DF',\n'mikatakanahalfwidth':u'\\uFF90',\n'minus':u'\\u2212',\n'minusbelowcmb':u'\\u0320',\n'minuscircle':u'\\u2296',\n'minusmod':u'\\u02D7',\n'minusplus':u'\\u2213',\n'minute':u'\\u2032',\n'miribaarusquare':u'\\u334A',\n'mirisquare':u'\\u3349',\n'mlonglegturned':u'\\u0270',\n'mlsquare':u'\\u3396',\n'mmcubedsquare':u'\\u33A3',\n'mmonospace':u'\\uFF4D',\n'mmsquaredsquare':u'\\u339F',\n'mohiragana':u'\\u3082',\n'mohmsquare':u'\\u33C1',\n'mokatakana':u'\\u30E2',\n'mokatakanahalfwidth':u'\\uFF93',\n'molsquare':u'\\u33D6',\n'momathai':u'\\u0E21',\n'moverssquare':u'\\u33A7',\n'moverssquaredsquare':u'\\u33A8',\n'mparen':u'\\u24A8',\n'mpasquare':u'\\u33AB',\n'mssquare':u'\\u33B3',\n'msuperior':u'\\uF6EF',\n'mturned':u'\\u026F',\n'mu':u'\\u00B5',\n'mu1':u'\\u00B5',\n'muasquare':u'\\u3382',\n'muchgreater':u'\\u226B',\n'muchless':u'\\u226A',\n'mufsquare':u'\\u338C',\n'mugreek':u'\\u03BC',\n'mugsquare':u'\\u338D',\n'muhiragana':u'\\u3080',\n'mukatakana':u'\\u30E0',\n'mukatakanahalfwidth':u'\\uFF91',\n'mulsquare':u'\\u3395',\n'multiply':u'\\u00D7',\n'mumsquare':u'\\u339B',\n'munahhebrew':u'\\u05A3',\n'munahlefthebrew':u'\\u05A3',\n'musicalnote':u'\\u266A',\n'musicalnotedbl':u'\\u266B',\n'musicflatsign':u'\\u266D',\n'musicsharpsign':u'\\u266F',\n'mussquare':u'\\u33B2',\n'muvsquare':u'\\u33B6',\n'muwsquare':u'\\u33BC',\n'mvmegasquare':u'\\u33B9',\n'mvsquare':u'\\u33B7',\n'mwmegasquare':u'\\u33BF',\n'mwsquare':u'\\u33BD',\n'n':u'\\u006E',\n'nabengali':u'\\u09A8',\n'nabla':u'\\u2207',\n'nacute':u'\\u0144',\n'nadeva':u'\\u0928',\n'nagujarati':u'\\u0AA8',\n'nagurmukhi':u'\\u0A28',\n'nahiragana':u'\\u306A',\n'nakatakana':u'\\u30CA',\n'nakatakanahalfwidth':u'\\uFF85',\n'napostrophe':u'\\u0149',\n'nasquare':u'\\u3381',\n'nbopomofo':u'\\u310B',\n'nbspace':u'\\u00A0',\n'ncaron':u'\\u0148',\n'ncedilla':u'\\u0146',\n'ncircle':u'\\u24DD',\n'ncircumflexbelow':u'\\u1E4B',\n'ncommaaccent':u'\\u0146',\n'ndotaccent':u'\\u1E45',\n'ndotbelow':u'\\u1E47',\n'nehiragana':u'\\u306D',\n'nekatakana':u'\\u30CD',\n'nekatakanahalfwidth':u'\\uFF88',\n'newsheqelsign':u'\\u20AA',\n'nfsquare':u'\\u338B',\n'ngabengali':u'\\u0999',\n'ngadeva':u'\\u0919',\n'ngagujarati':u'\\u0A99',\n'ngagurmukhi':u'\\u0A19',\n'ngonguthai':u'\\u0E07',\n'nhiragana':u'\\u3093',\n'nhookleft':u'\\u0272',\n'nhookretroflex':u'\\u0273',\n'nieunacirclekorean':u'\\u326F',\n'nieunaparenkorean':u'\\u320F',\n'nieuncieuckorean':u'\\u3135',\n'nieuncirclekorean':u'\\u3261',\n'nieunhieuhkorean':u'\\u3136',\n'nieunkorean':u'\\u3134',\n'nieunpansioskorean':u'\\u3168',\n'nieunparenkorean':u'\\u3201',\n'nieunsioskorean':u'\\u3167',\n'nieuntikeutkorean':u'\\u3166',\n'nihiragana':u'\\u306B',\n'nikatakana':u'\\u30CB',\n'nikatakanahalfwidth':u'\\uFF86',\n'nikhahitleftthai':u'\\uF899',\n'nikhahitthai':u'\\u0E4D',\n'nine':u'\\u0039',\n'ninearabic':u'\\u0669',\n'ninebengali':u'\\u09EF',\n'ninecircle':u'\\u2468',\n'ninecircleinversesansserif':u'\\u2792',\n'ninedeva':u'\\u096F',\n'ninegujarati':u'\\u0AEF',\n'ninegurmukhi':u'\\u0A6F',\n'ninehackarabic':u'\\u0669',\n'ninehangzhou':u'\\u3029',\n'nineideographicparen':u'\\u3228',\n'nineinferior':u'\\u2089',\n'ninemonospace':u'\\uFF19',\n'nineoldstyle':u'\\uF739',\n'nineparen':u'\\u247C',\n'nineperiod':u'\\u2490',\n'ninepersian':u'\\u06F9',\n'nineroman':u'\\u2178',\n'ninesuperior':u'\\u2079',\n'nineteencircle':u'\\u2472',\n'nineteenparen':u'\\u2486',\n'nineteenperiod':u'\\u249A',\n'ninethai':u'\\u0E59',\n'nj':u'\\u01CC',\n'njecyrillic':u'\\u045A',\n'nkatakana':u'\\u30F3',\n'nkatakanahalfwidth':u'\\uFF9D',\n'nlegrightlong':u'\\u019E',\n'nlinebelow':u'\\u1E49',\n'nmonospace':u'\\uFF4E',\n'nmsquare':u'\\u339A',\n'nnabengali':u'\\u09A3',\n'nnadeva':u'\\u0923',\n'nnagujarati':u'\\u0AA3',\n'nnagurmukhi':u'\\u0A23',\n'nnnadeva':u'\\u0929',\n'nohiragana':u'\\u306E',\n'nokatakana':u'\\u30CE',\n'nokatakanahalfwidth':u'\\uFF89',\n'nonbreakingspace':u'\\u00A0',\n'nonenthai':u'\\u0E13',\n'nonuthai':u'\\u0E19',\n'noonarabic':u'\\u0646',\n'noonfinalarabic':u'\\uFEE6',\n'noonghunnaarabic':u'\\u06BA',\n'noonghunnafinalarabic':u'\\uFB9F',\n'noonhehinitialarabic':u'\\uFEE7\\uFEEC',\n'nooninitialarabic':u'\\uFEE7',\n'noonjeeminitialarabic':u'\\uFCD2',\n'noonjeemisolatedarabic':u'\\uFC4B',\n'noonmedialarabic':u'\\uFEE8',\n'noonmeeminitialarabic':u'\\uFCD5',\n'noonmeemisolatedarabic':u'\\uFC4E',\n'noonnoonfinalarabic':u'\\uFC8D',\n'notcontains':u'\\u220C',\n'notelement':u'\\u2209',\n'notelementof':u'\\u2209',\n'notequal':u'\\u2260',\n'notgreater':u'\\u226F',\n'notgreaternorequal':u'\\u2271',\n'notgreaternorless':u'\\u2279',\n'notidentical':u'\\u2262',\n'notless':u'\\u226E',\n'notlessnorequal':u'\\u2270',\n'notparallel':u'\\u2226',\n'notprecedes':u'\\u2280',\n'notsubset':u'\\u2284',\n'notsucceeds':u'\\u2281',\n'notsuperset':u'\\u2285',\n'nowarmenian':u'\\u0576',\n'nparen':u'\\u24A9',\n'nssquare':u'\\u33B1',\n'nsuperior':u'\\u207F',\n'ntilde':u'\\u00F1',\n'nu':u'\\u03BD',\n'nuhiragana':u'\\u306C',\n'nukatakana':u'\\u30CC',\n'nukatakanahalfwidth':u'\\uFF87',\n'nuktabengali':u'\\u09BC',\n'nuktadeva':u'\\u093C',\n'nuktagujarati':u'\\u0ABC',\n'nuktagurmukhi':u'\\u0A3C',\n'numbersign':u'\\u0023',\n'numbersignmonospace':u'\\uFF03',\n'numbersignsmall':u'\\uFE5F',\n'numeralsigngreek':u'\\u0374',\n'numeralsignlowergreek':u'\\u0375',\n'numero':u'\\u2116',\n'nun':u'\\u05E0',\n'nundagesh':u'\\uFB40',\n'nundageshhebrew':u'\\uFB40',\n'nunhebrew':u'\\u05E0',\n'nvsquare':u'\\u33B5',\n'nwsquare':u'\\u33BB',\n'nyabengali':u'\\u099E',\n'nyadeva':u'\\u091E',\n'nyagujarati':u'\\u0A9E',\n'nyagurmukhi':u'\\u0A1E',\n'o':u'\\u006F',\n'oacute':u'\\u00F3',\n'oangthai':u'\\u0E2D',\n'obarred':u'\\u0275',\n'obarredcyrillic':u'\\u04E9',\n'obarreddieresiscyrillic':u'\\u04EB',\n'obengali':u'\\u0993',\n'obopomofo':u'\\u311B',\n'obreve':u'\\u014F',\n'ocandradeva':u'\\u0911',\n'ocandragujarati':u'\\u0A91',\n'ocandravowelsigndeva':u'\\u0949',\n'ocandravowelsigngujarati':u'\\u0AC9',\n'ocaron':u'\\u01D2',\n'ocircle':u'\\u24DE',\n'ocircumflex':u'\\u00F4',\n'ocircumflexacute':u'\\u1ED1',\n'ocircumflexdotbelow':u'\\u1ED9',\n'ocircumflexgrave':u'\\u1ED3',\n'ocircumflexhookabove':u'\\u1ED5',\n'ocircumflextilde':u'\\u1ED7',\n'ocyrillic':u'\\u043E',\n'odblacute':u'\\u0151',\n'odblgrave':u'\\u020D',\n'odeva':u'\\u0913',\n'odieresis':u'\\u00F6',\n'odieresiscyrillic':u'\\u04E7',\n'odotbelow':u'\\u1ECD',\n'oe':u'\\u0153',\n'oekorean':u'\\u315A',\n'ogonek':u'\\u02DB',\n'ogonekcmb':u'\\u0328',\n'ograve':u'\\u00F2',\n'ogujarati':u'\\u0A93',\n'oharmenian':u'\\u0585',\n'ohiragana':u'\\u304A',\n'ohookabove':u'\\u1ECF',\n'ohorn':u'\\u01A1',\n'ohornacute':u'\\u1EDB',\n'ohorndotbelow':u'\\u1EE3',\n'ohorngrave':u'\\u1EDD',\n'ohornhookabove':u'\\u1EDF',\n'ohorntilde':u'\\u1EE1',\n'ohungarumlaut':u'\\u0151',\n'oi':u'\\u01A3',\n'oinvertedbreve':u'\\u020F',\n'okatakana':u'\\u30AA',\n'okatakanahalfwidth':u'\\uFF75',\n'okorean':u'\\u3157',\n'olehebrew':u'\\u05AB',\n'omacron':u'\\u014D',\n'omacronacute':u'\\u1E53',\n'omacrongrave':u'\\u1E51',\n'omdeva':u'\\u0950',\n'omega':u'\\u03C9',\n'omega1':u'\\u03D6',\n'omegacyrillic':u'\\u0461',\n'omegalatinclosed':u'\\u0277',\n'omegaroundcyrillic':u'\\u047B',\n'omegatitlocyrillic':u'\\u047D',\n'omegatonos':u'\\u03CE',\n'omgujarati':u'\\u0AD0',\n'omicron':u'\\u03BF',\n'omicrontonos':u'\\u03CC',\n'omonospace':u'\\uFF4F',\n'one':u'\\u0031',\n'onearabic':u'\\u0661',\n'onebengali':u'\\u09E7',\n'onecircle':u'\\u2460',\n'onecircleinversesansserif':u'\\u278A',\n'onedeva':u'\\u0967',\n'onedotenleader':u'\\u2024',\n'oneeighth':u'\\u215B',\n'onefitted':u'\\uF6DC',\n'onegujarati':u'\\u0AE7',\n'onegurmukhi':u'\\u0A67',\n'onehackarabic':u'\\u0661',\n'onehalf':u'\\u00BD',\n'onehangzhou':u'\\u3021',\n'oneideographicparen':u'\\u3220',\n'oneinferior':u'\\u2081',\n'onemonospace':u'\\uFF11',\n'onenumeratorbengali':u'\\u09F4',\n'oneoldstyle':u'\\uF731',\n'oneparen':u'\\u2474',\n'oneperiod':u'\\u2488',\n'onepersian':u'\\u06F1',\n'onequarter':u'\\u00BC',\n'oneroman':u'\\u2170',\n'onesuperior':u'\\u00B9',\n'onethai':u'\\u0E51',\n'onethird':u'\\u2153',\n'oogonek':u'\\u01EB',\n'oogonekmacron':u'\\u01ED',\n'oogurmukhi':u'\\u0A13',\n'oomatragurmukhi':u'\\u0A4B',\n'oopen':u'\\u0254',\n'oparen':u'\\u24AA',\n'openbullet':u'\\u25E6',\n'option':u'\\u2325',\n'ordfeminine':u'\\u00AA',\n'ordmasculine':u'\\u00BA',\n'orthogonal':u'\\u221F',\n'oshortdeva':u'\\u0912',\n'oshortvowelsigndeva':u'\\u094A',\n'oslash':u'\\u00F8',\n'oslashacute':u'\\u01FF',\n'osmallhiragana':u'\\u3049',\n'osmallkatakana':u'\\u30A9',\n'osmallkatakanahalfwidth':u'\\uFF6B',\n'ostrokeacute':u'\\u01FF',\n'osuperior':u'\\uF6F0',\n'otcyrillic':u'\\u047F',\n'otilde':u'\\u00F5',\n'otildeacute':u'\\u1E4D',\n'otildedieresis':u'\\u1E4F',\n'oubopomofo':u'\\u3121',\n'overline':u'\\u203E',\n'overlinecenterline':u'\\uFE4A',\n'overlinecmb':u'\\u0305',\n'overlinedashed':u'\\uFE49',\n'overlinedblwavy':u'\\uFE4C',\n'overlinewavy':u'\\uFE4B',\n'overscore':u'\\u00AF',\n'ovowelsignbengali':u'\\u09CB',\n'ovowelsigndeva':u'\\u094B',\n'ovowelsigngujarati':u'\\u0ACB',\n'p':u'\\u0070',\n'paampssquare':u'\\u3380',\n'paasentosquare':u'\\u332B',\n'pabengali':u'\\u09AA',\n'pacute':u'\\u1E55',\n'padeva':u'\\u092A',\n'pagedown':u'\\u21DF',\n'pageup':u'\\u21DE',\n'pagujarati':u'\\u0AAA',\n'pagurmukhi':u'\\u0A2A',\n'pahiragana':u'\\u3071',\n'paiyannoithai':u'\\u0E2F',\n'pakatakana':u'\\u30D1',\n'palatalizationcyrilliccmb':u'\\u0484',\n'palochkacyrillic':u'\\u04C0',\n'pansioskorean':u'\\u317F',\n'paragraph':u'\\u00B6',\n'parallel':u'\\u2225',\n'parenleft':u'\\u0028',\n'parenleftaltonearabic':u'\\uFD3E',\n'parenleftbt':u'\\uF8ED',\n'parenleftex':u'\\uF8EC',\n'parenleftinferior':u'\\u208D',\n'parenleftmonospace':u'\\uFF08',\n'parenleftsmall':u'\\uFE59',\n'parenleftsuperior':u'\\u207D',\n'parenlefttp':u'\\uF8EB',\n'parenleftvertical':u'\\uFE35',\n'parenright':u'\\u0029',\n'parenrightaltonearabic':u'\\uFD3F',\n'parenrightbt':u'\\uF8F8',\n'parenrightex':u'\\uF8F7',\n'parenrightinferior':u'\\u208E',\n'parenrightmonospace':u'\\uFF09',\n'parenrightsmall':u'\\uFE5A',\n'parenrightsuperior':u'\\u207E',\n'parenrighttp':u'\\uF8F6',\n'parenrightvertical':u'\\uFE36',\n'partialdiff':u'\\u2202',\n'paseqhebrew':u'\\u05C0',\n'pashtahebrew':u'\\u0599',\n'pasquare':u'\\u33A9',\n'patah':u'\\u05B7',\n'patah11':u'\\u05B7',\n'patah1d':u'\\u05B7',\n'patah2a':u'\\u05B7',\n'patahhebrew':u'\\u05B7',\n'patahnarrowhebrew':u'\\u05B7',\n'patahquarterhebrew':u'\\u05B7',\n'patahwidehebrew':u'\\u05B7',\n'pazerhebrew':u'\\u05A1',\n'pbopomofo':u'\\u3106',\n'pcircle':u'\\u24DF',\n'pdotaccent':u'\\u1E57',\n'pe':u'\\u05E4',\n'pecyrillic':u'\\u043F',\n'pedagesh':u'\\uFB44',\n'pedageshhebrew':u'\\uFB44',\n'peezisquare':u'\\u333B',\n'pefinaldageshhebrew':u'\\uFB43',\n'peharabic':u'\\u067E',\n'peharmenian':u'\\u057A',\n'pehebrew':u'\\u05E4',\n'pehfinalarabic':u'\\uFB57',\n'pehinitialarabic':u'\\uFB58',\n'pehiragana':u'\\u307A',\n'pehmedialarabic':u'\\uFB59',\n'pekatakana':u'\\u30DA',\n'pemiddlehookcyrillic':u'\\u04A7',\n'perafehebrew':u'\\uFB4E',\n'percent':u'\\u0025',\n'percentarabic':u'\\u066A',\n'percentmonospace':u'\\uFF05',\n'percentsmall':u'\\uFE6A',\n'period':u'\\u002E',\n'periodarmenian':u'\\u0589',\n'periodcentered':u'\\u00B7',\n'periodhalfwidth':u'\\uFF61',\n'periodinferior':u'\\uF6E7',\n'periodmonospace':u'\\uFF0E',\n'periodsmall':u'\\uFE52',\n'periodsuperior':u'\\uF6E8',\n'perispomenigreekcmb':u'\\u0342',\n'perpendicular':u'\\u22A5',\n'perthousand':u'\\u2030',\n'peseta':u'\\u20A7',\n'pfsquare':u'\\u338A',\n'phabengali':u'\\u09AB',\n'phadeva':u'\\u092B',\n'phagujarati':u'\\u0AAB',\n'phagurmukhi':u'\\u0A2B',\n'phi':u'\\u03C6',\n'phi1':u'\\u03D5',\n'phieuphacirclekorean':u'\\u327A',\n'phieuphaparenkorean':u'\\u321A',\n'phieuphcirclekorean':u'\\u326C',\n'phieuphkorean':u'\\u314D',\n'phieuphparenkorean':u'\\u320C',\n'philatin':u'\\u0278',\n'phinthuthai':u'\\u0E3A',\n'phisymbolgreek':u'\\u03D5',\n'phook':u'\\u01A5',\n'phophanthai':u'\\u0E1E',\n'phophungthai':u'\\u0E1C',\n'phosamphaothai':u'\\u0E20',\n'pi':u'\\u03C0',\n'pieupacirclekorean':u'\\u3273',\n'pieupaparenkorean':u'\\u3213',\n'pieupcieuckorean':u'\\u3176',\n'pieupcirclekorean':u'\\u3265',\n'pieupkiyeokkorean':u'\\u3172',\n'pieupkorean':u'\\u3142',\n'pieupparenkorean':u'\\u3205',\n'pieupsioskiyeokkorean':u'\\u3174',\n'pieupsioskorean':u'\\u3144',\n'pieupsiostikeutkorean':u'\\u3175',\n'pieupthieuthkorean':u'\\u3177',\n'pieuptikeutkorean':u'\\u3173',\n'pihiragana':u'\\u3074',\n'pikatakana':u'\\u30D4',\n'pisymbolgreek':u'\\u03D6',\n'piwrarmenian':u'\\u0583',\n'plus':u'\\u002B',\n'plusbelowcmb':u'\\u031F',\n'pluscircle':u'\\u2295',\n'plusminus':u'\\u00B1',\n'plusmod':u'\\u02D6',\n'plusmonospace':u'\\uFF0B',\n'plussmall':u'\\uFE62',\n'plussuperior':u'\\u207A',\n'pmonospace':u'\\uFF50',\n'pmsquare':u'\\u33D8',\n'pohiragana':u'\\u307D',\n'pointingindexdownwhite':u'\\u261F',\n'pointingindexleftwhite':u'\\u261C',\n'pointingindexrightwhite':u'\\u261E',\n'pointingindexupwhite':u'\\u261D',\n'pokatakana':u'\\u30DD',\n'poplathai':u'\\u0E1B',\n'postalmark':u'\\u3012',\n'postalmarkface':u'\\u3020',\n'pparen':u'\\u24AB',\n'precedes':u'\\u227A',\n'prescription':u'\\u211E',\n'primemod':u'\\u02B9',\n'primereversed':u'\\u2035',\n'product':u'\\u220F',\n'projective':u'\\u2305',\n'prolongedkana':u'\\u30FC',\n'propellor':u'\\u2318',\n'propersubset':u'\\u2282',\n'propersuperset':u'\\u2283',\n'proportion':u'\\u2237',\n'proportional':u'\\u221D',\n'psi':u'\\u03C8',\n'psicyrillic':u'\\u0471',\n'psilipneumatacyrilliccmb':u'\\u0486',\n'pssquare':u'\\u33B0',\n'puhiragana':u'\\u3077',\n'pukatakana':u'\\u30D7',\n'pvsquare':u'\\u33B4',\n'pwsquare':u'\\u33BA',\n'q':u'\\u0071',\n'qadeva':u'\\u0958',\n'qadmahebrew':u'\\u05A8',\n'qafarabic':u'\\u0642',\n'qaffinalarabic':u'\\uFED6',\n'qafinitialarabic':u'\\uFED7',\n'qafmedialarabic':u'\\uFED8',\n'qamats':u'\\u05B8',\n'qamats10':u'\\u05B8',\n'qamats1a':u'\\u05B8',\n'qamats1c':u'\\u05B8',\n'qamats27':u'\\u05B8',\n'qamats29':u'\\u05B8',\n'qamats33':u'\\u05B8',\n'qamatsde':u'\\u05B8',\n'qamatshebrew':u'\\u05B8',\n'qamatsnarrowhebrew':u'\\u05B8',\n'qamatsqatanhebrew':u'\\u05B8',\n'qamatsqatannarrowhebrew':u'\\u05B8',\n'qamatsqatanquarterhebrew':u'\\u05B8',\n'qamatsqatanwidehebrew':u'\\u05B8',\n'qamatsquarterhebrew':u'\\u05B8',\n'qamatswidehebrew':u'\\u05B8',\n'qarneyparahebrew':u'\\u059F',\n'qbopomofo':u'\\u3111',\n'qcircle':u'\\u24E0',\n'qhook':u'\\u02A0',\n'qmonospace':u'\\uFF51',\n'qof':u'\\u05E7',\n'qofdagesh':u'\\uFB47',\n'qofdageshhebrew':u'\\uFB47',\n'qofhatafpatah':u'\\u05E7\\u05B2',\n'qofhatafpatahhebrew':u'\\u05E7\\u05B2',\n'qofhatafsegol':u'\\u05E7\\u05B1',\n'qofhatafsegolhebrew':u'\\u05E7\\u05B1',\n'qofhebrew':u'\\u05E7',\n'qofhiriq':u'\\u05E7\\u05B4',\n'qofhiriqhebrew':u'\\u05E7\\u05B4',\n'qofholam':u'\\u05E7\\u05B9',\n'qofholamhebrew':u'\\u05E7\\u05B9',\n'qofpatah':u'\\u05E7\\u05B7',\n'qofpatahhebrew':u'\\u05E7\\u05B7',\n'qofqamats':u'\\u05E7\\u05B8',\n'qofqamatshebrew':u'\\u05E7\\u05B8',\n'qofqubuts':u'\\u05E7\\u05BB',\n'qofqubutshebrew':u'\\u05E7\\u05BB',\n'qofsegol':u'\\u05E7\\u05B6',\n'qofsegolhebrew':u'\\u05E7\\u05B6',\n'qofsheva':u'\\u05E7\\u05B0',\n'qofshevahebrew':u'\\u05E7\\u05B0',\n'qoftsere':u'\\u05E7\\u05B5',\n'qoftserehebrew':u'\\u05E7\\u05B5',\n'qparen':u'\\u24AC',\n'quarternote':u'\\u2669',\n'qubuts':u'\\u05BB',\n'qubuts18':u'\\u05BB',\n'qubuts25':u'\\u05BB',\n'qubuts31':u'\\u05BB',\n'qubutshebrew':u'\\u05BB',\n'qubutsnarrowhebrew':u'\\u05BB',\n'qubutsquarterhebrew':u'\\u05BB',\n'qubutswidehebrew':u'\\u05BB',\n'question':u'\\u003F',\n'questionarabic':u'\\u061F',\n'questionarmenian':u'\\u055E',\n'questiondown':u'\\u00BF',\n'questiondownsmall':u'\\uF7BF',\n'questiongreek':u'\\u037E',\n'questionmonospace':u'\\uFF1F',\n'questionsmall':u'\\uF73F',\n'quotedbl':u'\\u0022',\n'quotedblbase':u'\\u201E',\n'quotedblleft':u'\\u201C',\n'quotedblmonospace':u'\\uFF02',\n'quotedblprime':u'\\u301E',\n'quotedblprimereversed':u'\\u301D',\n'quotedblright':u'\\u201D',\n'quoteleft':u'\\u2018',\n'quoteleftreversed':u'\\u201B',\n'quotereversed':u'\\u201B',\n'quoteright':u'\\u2019',\n'quoterightn':u'\\u0149',\n'quotesinglbase':u'\\u201A',\n'quotesingle':u'\\u0027',\n'quotesinglemonospace':u'\\uFF07',\n'r':u'\\u0072',\n'raarmenian':u'\\u057C',\n'rabengali':u'\\u09B0',\n'racute':u'\\u0155',\n'radeva':u'\\u0930',\n'radical':u'\\u221A',\n'radicalex':u'\\uF8E5',\n'radoverssquare':u'\\u33AE',\n'radoverssquaredsquare':u'\\u33AF',\n'radsquare':u'\\u33AD',\n'rafe':u'\\u05BF',\n'rafehebrew':u'\\u05BF',\n'ragujarati':u'\\u0AB0',\n'ragurmukhi':u'\\u0A30',\n'rahiragana':u'\\u3089',\n'rakatakana':u'\\u30E9',\n'rakatakanahalfwidth':u'\\uFF97',\n'ralowerdiagonalbengali':u'\\u09F1',\n'ramiddlediagonalbengali':u'\\u09F0',\n'ramshorn':u'\\u0264',\n'ratio':u'\\u2236',\n'rbopomofo':u'\\u3116',\n'rcaron':u'\\u0159',\n'rcedilla':u'\\u0157',\n'rcircle':u'\\u24E1',\n'rcommaaccent':u'\\u0157',\n'rdblgrave':u'\\u0211',\n'rdotaccent':u'\\u1E59',\n'rdotbelow':u'\\u1E5B',\n'rdotbelowmacron':u'\\u1E5D',\n'referencemark':u'\\u203B',\n'reflexsubset':u'\\u2286',\n'reflexsuperset':u'\\u2287',\n'registered':u'\\u00AE',\n'registersans':u'\\uF8E8',\n'registerserif':u'\\uF6DA',\n'reharabic':u'\\u0631',\n'reharmenian':u'\\u0580',\n'rehfinalarabic':u'\\uFEAE',\n'rehiragana':u'\\u308C',\n'rehyehaleflamarabic':u'\\u0631\\uFEF3\\uFE8E\\u0644',\n'rekatakana':u'\\u30EC',\n'rekatakanahalfwidth':u'\\uFF9A',\n'resh':u'\\u05E8',\n'reshdageshhebrew':u'\\uFB48',\n'reshhatafpatah':u'\\u05E8\\u05B2',\n'reshhatafpatahhebrew':u'\\u05E8\\u05B2',\n'reshhatafsegol':u'\\u05E8\\u05B1',\n'reshhatafsegolhebrew':u'\\u05E8\\u05B1',\n'reshhebrew':u'\\u05E8',\n'reshhiriq':u'\\u05E8\\u05B4',\n'reshhiriqhebrew':u'\\u05E8\\u05B4',\n'reshholam':u'\\u05E8\\u05B9',\n'reshholamhebrew':u'\\u05E8\\u05B9',\n'reshpatah':u'\\u05E8\\u05B7',\n'reshpatahhebrew':u'\\u05E8\\u05B7',\n'reshqamats':u'\\u05E8\\u05B8',\n'reshqamatshebrew':u'\\u05E8\\u05B8',\n'reshqubuts':u'\\u05E8\\u05BB',\n'reshqubutshebrew':u'\\u05E8\\u05BB',\n'reshsegol':u'\\u05E8\\u05B6',\n'reshsegolhebrew':u'\\u05E8\\u05B6',\n'reshsheva':u'\\u05E8\\u05B0',\n'reshshevahebrew':u'\\u05E8\\u05B0',\n'reshtsere':u'\\u05E8\\u05B5',\n'reshtserehebrew':u'\\u05E8\\u05B5',\n'reversedtilde':u'\\u223D',\n'reviahebrew':u'\\u0597',\n'reviamugrashhebrew':u'\\u0597',\n'revlogicalnot':u'\\u2310',\n'rfishhook':u'\\u027E',\n'rfishhookreversed':u'\\u027F',\n'rhabengali':u'\\u09DD',\n'rhadeva':u'\\u095D',\n'rho':u'\\u03C1',\n'rhook':u'\\u027D',\n'rhookturned':u'\\u027B',\n'rhookturnedsuperior':u'\\u02B5',\n'rhosymbolgreek':u'\\u03F1',\n'rhotichookmod':u'\\u02DE',\n'rieulacirclekorean':u'\\u3271',\n'rieulaparenkorean':u'\\u3211',\n'rieulcirclekorean':u'\\u3263',\n'rieulhieuhkorean':u'\\u3140',\n'rieulkiyeokkorean':u'\\u313A',\n'rieulkiyeoksioskorean':u'\\u3169',\n'rieulkorean':u'\\u3139',\n'rieulmieumkorean':u'\\u313B',\n'rieulpansioskorean':u'\\u316C',\n'rieulparenkorean':u'\\u3203',\n'rieulphieuphkorean':u'\\u313F',\n'rieulpieupkorean':u'\\u313C',\n'rieulpieupsioskorean':u'\\u316B',\n'rieulsioskorean':u'\\u313D',\n'rieulthieuthkorean':u'\\u313E',\n'rieultikeutkorean':u'\\u316A',\n'rieulyeorinhieuhkorean':u'\\u316D',\n'rightangle':u'\\u221F',\n'righttackbelowcmb':u'\\u0319',\n'righttriangle':u'\\u22BF',\n'rihiragana':u'\\u308A',\n'rikatakana':u'\\u30EA',\n'rikatakanahalfwidth':u'\\uFF98',\n'ring':u'\\u02DA',\n'ringbelowcmb':u'\\u0325',\n'ringcmb':u'\\u030A',\n'ringhalfleft':u'\\u02BF',\n'ringhalfleftarmenian':u'\\u0559',\n'ringhalfleftbelowcmb':u'\\u031C',\n'ringhalfleftcentered':u'\\u02D3',\n'ringhalfright':u'\\u02BE',\n'ringhalfrightbelowcmb':u'\\u0339',\n'ringhalfrightcentered':u'\\u02D2',\n'rinvertedbreve':u'\\u0213',\n'rittorusquare':u'\\u3351',\n'rlinebelow':u'\\u1E5F',\n'rlongleg':u'\\u027C',\n'rlonglegturned':u'\\u027A',\n'rmonospace':u'\\uFF52',\n'rohiragana':u'\\u308D',\n'rokatakana':u'\\u30ED',\n'rokatakanahalfwidth':u'\\uFF9B',\n'roruathai':u'\\u0E23',\n'rparen':u'\\u24AD',\n'rrabengali':u'\\u09DC',\n'rradeva':u'\\u0931',\n'rragurmukhi':u'\\u0A5C',\n'rreharabic':u'\\u0691',\n'rrehfinalarabic':u'\\uFB8D',\n'rrvocalicbengali':u'\\u09E0',\n'rrvocalicdeva':u'\\u0960',\n'rrvocalicgujarati':u'\\u0AE0',\n'rrvocalicvowelsignbengali':u'\\u09C4',\n'rrvocalicvowelsigndeva':u'\\u0944',\n'rrvocalicvowelsigngujarati':u'\\u0AC4',\n'rsuperior':u'\\uF6F1',\n'rtblock':u'\\u2590',\n'rturned':u'\\u0279',\n'rturnedsuperior':u'\\u02B4',\n'ruhiragana':u'\\u308B',\n'rukatakana':u'\\u30EB',\n'rukatakanahalfwidth':u'\\uFF99',\n'rupeemarkbengali':u'\\u09F2',\n'rupeesignbengali':u'\\u09F3',\n'rupiah':u'\\uF6DD',\n'ruthai':u'\\u0E24',\n'rvocalicbengali':u'\\u098B',\n'rvocalicdeva':u'\\u090B',\n'rvocalicgujarati':u'\\u0A8B',\n'rvocalicvowelsignbengali':u'\\u09C3',\n'rvocalicvowelsigndeva':u'\\u0943',\n'rvocalicvowelsigngujarati':u'\\u0AC3',\n's':u'\\u0073',\n'sabengali':u'\\u09B8',\n'sacute':u'\\u015B',\n'sacutedotaccent':u'\\u1E65',\n'sadarabic':u'\\u0635',\n'sadeva':u'\\u0938',\n'sadfinalarabic':u'\\uFEBA',\n'sadinitialarabic':u'\\uFEBB',\n'sadmedialarabic':u'\\uFEBC',\n'sagujarati':u'\\u0AB8',\n'sagurmukhi':u'\\u0A38',\n'sahiragana':u'\\u3055',\n'sakatakana':u'\\u30B5',\n'sakatakanahalfwidth':u'\\uFF7B',\n'sallallahoualayhewasallamarabic':u'\\uFDFA',\n'samekh':u'\\u05E1',\n'samekhdagesh':u'\\uFB41',\n'samekhdageshhebrew':u'\\uFB41',\n'samekhhebrew':u'\\u05E1',\n'saraaathai':u'\\u0E32',\n'saraaethai':u'\\u0E41',\n'saraaimaimalaithai':u'\\u0E44',\n'saraaimaimuanthai':u'\\u0E43',\n'saraamthai':u'\\u0E33',\n'saraathai':u'\\u0E30',\n'saraethai':u'\\u0E40',\n'saraiileftthai':u'\\uF886',\n'saraiithai':u'\\u0E35',\n'saraileftthai':u'\\uF885',\n'saraithai':u'\\u0E34',\n'saraothai':u'\\u0E42',\n'saraueeleftthai':u'\\uF888',\n'saraueethai':u'\\u0E37',\n'saraueleftthai':u'\\uF887',\n'sarauethai':u'\\u0E36',\n'sarauthai':u'\\u0E38',\n'sarauuthai':u'\\u0E39',\n'sbopomofo':u'\\u3119',\n'scaron':u'\\u0161',\n'scarondotaccent':u'\\u1E67',\n'scedilla':u'\\u015F',\n'schwa':u'\\u0259',\n'schwacyrillic':u'\\u04D9',\n'schwadieresiscyrillic':u'\\u04DB',\n'schwahook':u'\\u025A',\n'scircle':u'\\u24E2',\n'scircumflex':u'\\u015D',\n'scommaaccent':u'\\u0219',\n'sdotaccent':u'\\u1E61',\n'sdotbelow':u'\\u1E63',\n'sdotbelowdotaccent':u'\\u1E69',\n'seagullbelowcmb':u'\\u033C',\n'second':u'\\u2033',\n'secondtonechinese':u'\\u02CA',\n'section':u'\\u00A7',\n'seenarabic':u'\\u0633',\n'seenfinalarabic':u'\\uFEB2',\n'seeninitialarabic':u'\\uFEB3',\n'seenmedialarabic':u'\\uFEB4',\n'segol':u'\\u05B6',\n'segol13':u'\\u05B6',\n'segol1f':u'\\u05B6',\n'segol2c':u'\\u05B6',\n'segolhebrew':u'\\u05B6',\n'segolnarrowhebrew':u'\\u05B6',\n'segolquarterhebrew':u'\\u05B6',\n'segoltahebrew':u'\\u0592',\n'segolwidehebrew':u'\\u05B6',\n'seharmenian':u'\\u057D',\n'sehiragana':u'\\u305B',\n'sekatakana':u'\\u30BB',\n'sekatakanahalfwidth':u'\\uFF7E',\n'semicolon':u'\\u003B',\n'semicolonarabic':u'\\u061B',\n'semicolonmonospace':u'\\uFF1B',\n'semicolonsmall':u'\\uFE54',\n'semivoicedmarkkana':u'\\u309C',\n'semivoicedmarkkanahalfwidth':u'\\uFF9F',\n'sentisquare':u'\\u3322',\n'sentosquare':u'\\u3323',\n'seven':u'\\u0037',\n'sevenarabic':u'\\u0667',\n'sevenbengali':u'\\u09ED',\n'sevencircle':u'\\u2466',\n'sevencircleinversesansserif':u'\\u2790',\n'sevendeva':u'\\u096D',\n'seveneighths':u'\\u215E',\n'sevengujarati':u'\\u0AED',\n'sevengurmukhi':u'\\u0A6D',\n'sevenhackarabic':u'\\u0667',\n'sevenhangzhou':u'\\u3027',\n'sevenideographicparen':u'\\u3226',\n'seveninferior':u'\\u2087',\n'sevenmonospace':u'\\uFF17',\n'sevenoldstyle':u'\\uF737',\n'sevenparen':u'\\u247A',\n'sevenperiod':u'\\u248E',\n'sevenpersian':u'\\u06F7',\n'sevenroman':u'\\u2176',\n'sevensuperior':u'\\u2077',\n'seventeencircle':u'\\u2470',\n'seventeenparen':u'\\u2484',\n'seventeenperiod':u'\\u2498',\n'seventhai':u'\\u0E57',\n'sfthyphen':u'\\u00AD',\n'shaarmenian':u'\\u0577',\n'shabengali':u'\\u09B6',\n'shacyrillic':u'\\u0448',\n'shaddaarabic':u'\\u0651',\n'shaddadammaarabic':u'\\uFC61',\n'shaddadammatanarabic':u'\\uFC5E',\n'shaddafathaarabic':u'\\uFC60',\n'shaddafathatanarabic':u'\\u0651\\u064B',\n'shaddakasraarabic':u'\\uFC62',\n'shaddakasratanarabic':u'\\uFC5F',\n'shade':u'\\u2592',\n'shadedark':u'\\u2593',\n'shadelight':u'\\u2591',\n'shademedium':u'\\u2592',\n'shadeva':u'\\u0936',\n'shagujarati':u'\\u0AB6',\n'shagurmukhi':u'\\u0A36',\n'shalshelethebrew':u'\\u0593',\n'shbopomofo':u'\\u3115',\n'shchacyrillic':u'\\u0449',\n'sheenarabic':u'\\u0634',\n'sheenfinalarabic':u'\\uFEB6',\n'sheeninitialarabic':u'\\uFEB7',\n'sheenmedialarabic':u'\\uFEB8',\n'sheicoptic':u'\\u03E3',\n'sheqel':u'\\u20AA',\n'sheqelhebrew':u'\\u20AA',\n'sheva':u'\\u05B0',\n'sheva115':u'\\u05B0',\n'sheva15':u'\\u05B0',\n'sheva22':u'\\u05B0',\n'sheva2e':u'\\u05B0',\n'shevahebrew':u'\\u05B0',\n'shevanarrowhebrew':u'\\u05B0',\n'shevaquarterhebrew':u'\\u05B0',\n'shevawidehebrew':u'\\u05B0',\n'shhacyrillic':u'\\u04BB',\n'shimacoptic':u'\\u03ED',\n'shin':u'\\u05E9',\n'shindagesh':u'\\uFB49',\n'shindageshhebrew':u'\\uFB49',\n'shindageshshindot':u'\\uFB2C',\n'shindageshshindothebrew':u'\\uFB2C',\n'shindageshsindot':u'\\uFB2D',\n'shindageshsindothebrew':u'\\uFB2D',\n'shindothebrew':u'\\u05C1',\n'shinhebrew':u'\\u05E9',\n'shinshindot':u'\\uFB2A',\n'shinshindothebrew':u'\\uFB2A',\n'shinsindot':u'\\uFB2B',\n'shinsindothebrew':u'\\uFB2B',\n'shook':u'\\u0282',\n'sigma':u'\\u03C3',\n'sigma1':u'\\u03C2',\n'sigmafinal':u'\\u03C2',\n'sigmalunatesymbolgreek':u'\\u03F2',\n'sihiragana':u'\\u3057',\n'sikatakana':u'\\u30B7',\n'sikatakanahalfwidth':u'\\uFF7C',\n'siluqhebrew':u'\\u05BD',\n'siluqlefthebrew':u'\\u05BD',\n'similar':u'\\u223C',\n'sindothebrew':u'\\u05C2',\n'siosacirclekorean':u'\\u3274',\n'siosaparenkorean':u'\\u3214',\n'sioscieuckorean':u'\\u317E',\n'sioscirclekorean':u'\\u3266',\n'sioskiyeokkorean':u'\\u317A',\n'sioskorean':u'\\u3145',\n'siosnieunkorean':u'\\u317B',\n'siosparenkorean':u'\\u3206',\n'siospieupkorean':u'\\u317D',\n'siostikeutkorean':u'\\u317C',\n'six':u'\\u0036',\n'sixarabic':u'\\u0666',\n'sixbengali':u'\\u09EC',\n'sixcircle':u'\\u2465',\n'sixcircleinversesansserif':u'\\u278F',\n'sixdeva':u'\\u096C',\n'sixgujarati':u'\\u0AEC',\n'sixgurmukhi':u'\\u0A6C',\n'sixhackarabic':u'\\u0666',\n'sixhangzhou':u'\\u3026',\n'sixideographicparen':u'\\u3225',\n'sixinferior':u'\\u2086',\n'sixmonospace':u'\\uFF16',\n'sixoldstyle':u'\\uF736',\n'sixparen':u'\\u2479',\n'sixperiod':u'\\u248D',\n'sixpersian':u'\\u06F6',\n'sixroman':u'\\u2175',\n'sixsuperior':u'\\u2076',\n'sixteencircle':u'\\u246F',\n'sixteencurrencydenominatorbengali':u'\\u09F9',\n'sixteenparen':u'\\u2483',\n'sixteenperiod':u'\\u2497',\n'sixthai':u'\\u0E56',\n'slash':u'\\u002F',\n'slashmonospace':u'\\uFF0F',\n'slong':u'\\u017F',\n'slongdotaccent':u'\\u1E9B',\n'smileface':u'\\u263A',\n'smonospace':u'\\uFF53',\n'sofpasuqhebrew':u'\\u05C3',\n'softhyphen':u'\\u00AD',\n'softsigncyrillic':u'\\u044C',\n'sohiragana':u'\\u305D',\n'sokatakana':u'\\u30BD',\n'sokatakanahalfwidth':u'\\uFF7F',\n'soliduslongoverlaycmb':u'\\u0338',\n'solidusshortoverlaycmb':u'\\u0337',\n'sorusithai':u'\\u0E29',\n'sosalathai':u'\\u0E28',\n'sosothai':u'\\u0E0B',\n'sosuathai':u'\\u0E2A',\n'space':u'\\u0020',\n'spacehackarabic':u'\\u0020',\n'spade':u'\\u2660',\n'spadesuitblack':u'\\u2660',\n'spadesuitwhite':u'\\u2664',\n'sparen':u'\\u24AE',\n'squarebelowcmb':u'\\u033B',\n'squarecc':u'\\u33C4',\n'squarecm':u'\\u339D',\n'squarediagonalcrosshatchfill':u'\\u25A9',\n'squarehorizontalfill':u'\\u25A4',\n'squarekg':u'\\u338F',\n'squarekm':u'\\u339E',\n'squarekmcapital':u'\\u33CE',\n'squareln':u'\\u33D1',\n'squarelog':u'\\u33D2',\n'squaremg':u'\\u338E',\n'squaremil':u'\\u33D5',\n'squaremm':u'\\u339C',\n'squaremsquared':u'\\u33A1',\n'squareorthogonalcrosshatchfill':u'\\u25A6',\n'squareupperlefttolowerrightfill':u'\\u25A7',\n'squareupperrighttolowerleftfill':u'\\u25A8',\n'squareverticalfill':u'\\u25A5',\n'squarewhitewithsmallblack':u'\\u25A3',\n'srsquare':u'\\u33DB',\n'ssabengali':u'\\u09B7',\n'ssadeva':u'\\u0937',\n'ssagujarati':u'\\u0AB7',\n'ssangcieuckorean':u'\\u3149',\n'ssanghieuhkorean':u'\\u3185',\n'ssangieungkorean':u'\\u3180',\n'ssangkiyeokkorean':u'\\u3132',\n'ssangnieunkorean':u'\\u3165',\n'ssangpieupkorean':u'\\u3143',\n'ssangsioskorean':u'\\u3146',\n'ssangtikeutkorean':u'\\u3138',\n'ssuperior':u'\\uF6F2',\n'sterling':u'\\u00A3',\n'sterlingmonospace':u'\\uFFE1',\n'strokelongoverlaycmb':u'\\u0336',\n'strokeshortoverlaycmb':u'\\u0335',\n'subset':u'\\u2282',\n'subsetnotequal':u'\\u228A',\n'subsetorequal':u'\\u2286',\n'succeeds':u'\\u227B',\n'suchthat':u'\\u220B',\n'suhiragana':u'\\u3059',\n'sukatakana':u'\\u30B9',\n'sukatakanahalfwidth':u'\\uFF7D',\n'sukunarabic':u'\\u0652',\n'summation':u'\\u2211',\n'sun':u'\\u263C',\n'superset':u'\\u2283',\n'supersetnotequal':u'\\u228B',\n'supersetorequal':u'\\u2287',\n'svsquare':u'\\u33DC',\n'syouwaerasquare':u'\\u337C',\n't':u'\\u0074',\n'tabengali':u'\\u09A4',\n'tackdown':u'\\u22A4',\n'tackleft':u'\\u22A3',\n'tadeva':u'\\u0924',\n'tagujarati':u'\\u0AA4',\n'tagurmukhi':u'\\u0A24',\n'taharabic':u'\\u0637',\n'tahfinalarabic':u'\\uFEC2',\n'tahinitialarabic':u'\\uFEC3',\n'tahiragana':u'\\u305F',\n'tahmedialarabic':u'\\uFEC4',\n'taisyouerasquare':u'\\u337D',\n'takatakana':u'\\u30BF',\n'takatakanahalfwidth':u'\\uFF80',\n'tatweelarabic':u'\\u0640',\n'tau':u'\\u03C4',\n'tav':u'\\u05EA',\n'tavdages':u'\\uFB4A',\n'tavdagesh':u'\\uFB4A',\n'tavdageshhebrew':u'\\uFB4A',\n'tavhebrew':u'\\u05EA',\n'tbar':u'\\u0167',\n'tbopomofo':u'\\u310A',\n'tcaron':u'\\u0165',\n'tccurl':u'\\u02A8',\n'tcedilla':u'\\u0163',\n'tcheharabic':u'\\u0686',\n'tchehfinalarabic':u'\\uFB7B',\n'tchehinitialarabic':u'\\uFB7C',\n'tchehmedialarabic':u'\\uFB7D',\n'tchehmeeminitialarabic':u'\\uFB7C\\uFEE4',\n'tcircle':u'\\u24E3',\n'tcircumflexbelow':u'\\u1E71',\n'tcommaaccent':u'\\u0163',\n'tdieresis':u'\\u1E97',\n'tdotaccent':u'\\u1E6B',\n'tdotbelow':u'\\u1E6D',\n'tecyrillic':u'\\u0442',\n'tedescendercyrillic':u'\\u04AD',\n'teharabic':u'\\u062A',\n'tehfinalarabic':u'\\uFE96',\n'tehhahinitialarabic':u'\\uFCA2',\n'tehhahisolatedarabic':u'\\uFC0C',\n'tehinitialarabic':u'\\uFE97',\n'tehiragana':u'\\u3066',\n'tehjeeminitialarabic':u'\\uFCA1',\n'tehjeemisolatedarabic':u'\\uFC0B',\n'tehmarbutaarabic':u'\\u0629',\n'tehmarbutafinalarabic':u'\\uFE94',\n'tehmedialarabic':u'\\uFE98',\n'tehmeeminitialarabic':u'\\uFCA4',\n'tehmeemisolatedarabic':u'\\uFC0E',\n'tehnoonfinalarabic':u'\\uFC73',\n'tekatakana':u'\\u30C6',\n'tekatakanahalfwidth':u'\\uFF83',\n'telephone':u'\\u2121',\n'telephoneblack':u'\\u260E',\n'telishagedolahebrew':u'\\u05A0',\n'telishaqetanahebrew':u'\\u05A9',\n'tencircle':u'\\u2469',\n'tenideographicparen':u'\\u3229',\n'tenparen':u'\\u247D',\n'tenperiod':u'\\u2491',\n'tenroman':u'\\u2179',\n'tesh':u'\\u02A7',\n'tet':u'\\u05D8',\n'tetdagesh':u'\\uFB38',\n'tetdageshhebrew':u'\\uFB38',\n'tethebrew':u'\\u05D8',\n'tetsecyrillic':u'\\u04B5',\n'tevirhebrew':u'\\u059B',\n'tevirlefthebrew':u'\\u059B',\n'thabengali':u'\\u09A5',\n'thadeva':u'\\u0925',\n'thagujarati':u'\\u0AA5',\n'thagurmukhi':u'\\u0A25',\n'thalarabic':u'\\u0630',\n'thalfinalarabic':u'\\uFEAC',\n'thanthakhatlowleftthai':u'\\uF898',\n'thanthakhatlowrightthai':u'\\uF897',\n'thanthakhatthai':u'\\u0E4C',\n'thanthakhatupperleftthai':u'\\uF896',\n'theharabic':u'\\u062B',\n'thehfinalarabic':u'\\uFE9A',\n'thehinitialarabic':u'\\uFE9B',\n'thehmedialarabic':u'\\uFE9C',\n'thereexists':u'\\u2203',\n'therefore':u'\\u2234',\n'theta':u'\\u03B8',\n'theta1':u'\\u03D1',\n'thetasymbolgreek':u'\\u03D1',\n'thieuthacirclekorean':u'\\u3279',\n'thieuthaparenkorean':u'\\u3219',\n'thieuthcirclekorean':u'\\u326B',\n'thieuthkorean':u'\\u314C',\n'thieuthparenkorean':u'\\u320B',\n'thirteencircle':u'\\u246C',\n'thirteenparen':u'\\u2480',\n'thirteenperiod':u'\\u2494',\n'thonangmonthothai':u'\\u0E11',\n'thook':u'\\u01AD',\n'thophuthaothai':u'\\u0E12',\n'thorn':u'\\u00FE',\n'thothahanthai':u'\\u0E17',\n'thothanthai':u'\\u0E10',\n'thothongthai':u'\\u0E18',\n'thothungthai':u'\\u0E16',\n'thousandcyrillic':u'\\u0482',\n'thousandsseparatorarabic':u'\\u066C',\n'thousandsseparatorpersian':u'\\u066C',\n'three':u'\\u0033',\n'threearabic':u'\\u0663',\n'threebengali':u'\\u09E9',\n'threecircle':u'\\u2462',\n'threecircleinversesansserif':u'\\u278C',\n'threedeva':u'\\u0969',\n'threeeighths':u'\\u215C',\n'threegujarati':u'\\u0AE9',\n'threegurmukhi':u'\\u0A69',\n'threehackarabic':u'\\u0663',\n'threehangzhou':u'\\u3023',\n'threeideographicparen':u'\\u3222',\n'threeinferior':u'\\u2083',\n'threemonospace':u'\\uFF13',\n'threenumeratorbengali':u'\\u09F6',\n'threeoldstyle':u'\\uF733',\n'threeparen':u'\\u2476',\n'threeperiod':u'\\u248A',\n'threepersian':u'\\u06F3',\n'threequarters':u'\\u00BE',\n'threequartersemdash':u'\\uF6DE',\n'threeroman':u'\\u2172',\n'threesuperior':u'\\u00B3',\n'threethai':u'\\u0E53',\n'thzsquare':u'\\u3394',\n'tihiragana':u'\\u3061',\n'tikatakana':u'\\u30C1',\n'tikatakanahalfwidth':u'\\uFF81',\n'tikeutacirclekorean':u'\\u3270',\n'tikeutaparenkorean':u'\\u3210',\n'tikeutcirclekorean':u'\\u3262',\n'tikeutkorean':u'\\u3137',\n'tikeutparenkorean':u'\\u3202',\n'tilde':u'\\u02DC',\n'tildebelowcmb':u'\\u0330',\n'tildecmb':u'\\u0303',\n'tildecomb':u'\\u0303',\n'tildedoublecmb':u'\\u0360',\n'tildeoperator':u'\\u223C',\n'tildeoverlaycmb':u'\\u0334',\n'tildeverticalcmb':u'\\u033E',\n'timescircle':u'\\u2297',\n'tipehahebrew':u'\\u0596',\n'tipehalefthebrew':u'\\u0596',\n'tippigurmukhi':u'\\u0A70',\n'titlocyrilliccmb':u'\\u0483',\n'tiwnarmenian':u'\\u057F',\n'tlinebelow':u'\\u1E6F',\n'tmonospace':u'\\uFF54',\n'toarmenian':u'\\u0569',\n'tohiragana':u'\\u3068',\n'tokatakana':u'\\u30C8',\n'tokatakanahalfwidth':u'\\uFF84',\n'tonebarextrahighmod':u'\\u02E5',\n'tonebarextralowmod':u'\\u02E9',\n'tonebarhighmod':u'\\u02E6',\n'tonebarlowmod':u'\\u02E8',\n'tonebarmidmod':u'\\u02E7',\n'tonefive':u'\\u01BD',\n'tonesix':u'\\u0185',\n'tonetwo':u'\\u01A8',\n'tonos':u'\\u0384',\n'tonsquare':u'\\u3327',\n'topatakthai':u'\\u0E0F',\n'tortoiseshellbracketleft':u'\\u3014',\n'tortoiseshellbracketleftsmall':u'\\uFE5D',\n'tortoiseshellbracketleftvertical':u'\\uFE39',\n'tortoiseshellbracketright':u'\\u3015',\n'tortoiseshellbracketrightsmall':u'\\uFE5E',\n'tortoiseshellbracketrightvertical':u'\\uFE3A',\n'totaothai':u'\\u0E15',\n'tpalatalhook':u'\\u01AB',\n'tparen':u'\\u24AF',\n'trademark':u'\\u2122',\n'trademarksans':u'\\uF8EA',\n'trademarkserif':u'\\uF6DB',\n'tretroflexhook':u'\\u0288',\n'triagdn':u'\\u25BC',\n'triaglf':u'\\u25C4',\n'triagrt':u'\\u25BA',\n'triagup':u'\\u25B2',\n'ts':u'\\u02A6',\n'tsadi':u'\\u05E6',\n'tsadidagesh':u'\\uFB46',\n'tsadidageshhebrew':u'\\uFB46',\n'tsadihebrew':u'\\u05E6',\n'tsecyrillic':u'\\u0446',\n'tsere':u'\\u05B5',\n'tsere12':u'\\u05B5',\n'tsere1e':u'\\u05B5',\n'tsere2b':u'\\u05B5',\n'tserehebrew':u'\\u05B5',\n'tserenarrowhebrew':u'\\u05B5',\n'tserequarterhebrew':u'\\u05B5',\n'tserewidehebrew':u'\\u05B5',\n'tshecyrillic':u'\\u045B',\n'tsuperior':u'\\uF6F3',\n'ttabengali':u'\\u099F',\n'ttadeva':u'\\u091F',\n'ttagujarati':u'\\u0A9F',\n'ttagurmukhi':u'\\u0A1F',\n'tteharabic':u'\\u0679',\n'ttehfinalarabic':u'\\uFB67',\n'ttehinitialarabic':u'\\uFB68',\n'ttehmedialarabic':u'\\uFB69',\n'tthabengali':u'\\u09A0',\n'tthadeva':u'\\u0920',\n'tthagujarati':u'\\u0AA0',\n'tthagurmukhi':u'\\u0A20',\n'tturned':u'\\u0287',\n'tuhiragana':u'\\u3064',\n'tukatakana':u'\\u30C4',\n'tukatakanahalfwidth':u'\\uFF82',\n'tusmallhiragana':u'\\u3063',\n'tusmallkatakana':u'\\u30C3',\n'tusmallkatakanahalfwidth':u'\\uFF6F',\n'twelvecircle':u'\\u246B',\n'twelveparen':u'\\u247F',\n'twelveperiod':u'\\u2493',\n'twelveroman':u'\\u217B',\n'twentycircle':u'\\u2473',\n'twentyhangzhou':u'\\u5344',\n'twentyparen':u'\\u2487',\n'twentyperiod':u'\\u249B',\n'two':u'\\u0032',\n'twoarabic':u'\\u0662',\n'twobengali':u'\\u09E8',\n'twocircle':u'\\u2461',\n'twocircleinversesansserif':u'\\u278B',\n'twodeva':u'\\u0968',\n'twodotenleader':u'\\u2025',\n'twodotleader':u'\\u2025',\n'twodotleadervertical':u'\\uFE30',\n'twogujarati':u'\\u0AE8',\n'twogurmukhi':u'\\u0A68',\n'twohackarabic':u'\\u0662',\n'twohangzhou':u'\\u3022',\n'twoideographicparen':u'\\u3221',\n'twoinferior':u'\\u2082',\n'twomonospace':u'\\uFF12',\n'twonumeratorbengali':u'\\u09F5',\n'twooldstyle':u'\\uF732',\n'twoparen':u'\\u2475',\n'twoperiod':u'\\u2489',\n'twopersian':u'\\u06F2',\n'tworoman':u'\\u2171',\n'twostroke':u'\\u01BB',\n'twosuperior':u'\\u00B2',\n'twothai':u'\\u0E52',\n'twothirds':u'\\u2154',\n'u':u'\\u0075',\n'uacute':u'\\u00FA',\n'ubar':u'\\u0289',\n'ubengali':u'\\u0989',\n'ubopomofo':u'\\u3128',\n'ubreve':u'\\u016D',\n'ucaron':u'\\u01D4',\n'ucircle':u'\\u24E4',\n'ucircumflex':u'\\u00FB',\n'ucircumflexbelow':u'\\u1E77',\n'ucyrillic':u'\\u0443',\n'udattadeva':u'\\u0951',\n'udblacute':u'\\u0171',\n'udblgrave':u'\\u0215',\n'udeva':u'\\u0909',\n'udieresis':u'\\u00FC',\n'udieresisacute':u'\\u01D8',\n'udieresisbelow':u'\\u1E73',\n'udieresiscaron':u'\\u01DA',\n'udieresiscyrillic':u'\\u04F1',\n'udieresisgrave':u'\\u01DC',\n'udieresismacron':u'\\u01D6',\n'udotbelow':u'\\u1EE5',\n'ugrave':u'\\u00F9',\n'ugujarati':u'\\u0A89',\n'ugurmukhi':u'\\u0A09',\n'uhiragana':u'\\u3046',\n'uhookabove':u'\\u1EE7',\n'uhorn':u'\\u01B0',\n'uhornacute':u'\\u1EE9',\n'uhorndotbelow':u'\\u1EF1',\n'uhorngrave':u'\\u1EEB',\n'uhornhookabove':u'\\u1EED',\n'uhorntilde':u'\\u1EEF',\n'uhungarumlaut':u'\\u0171',\n'uhungarumlautcyrillic':u'\\u04F3',\n'uinvertedbreve':u'\\u0217',\n'ukatakana':u'\\u30A6',\n'ukatakanahalfwidth':u'\\uFF73',\n'ukcyrillic':u'\\u0479',\n'ukorean':u'\\u315C',\n'umacron':u'\\u016B',\n'umacroncyrillic':u'\\u04EF',\n'umacrondieresis':u'\\u1E7B',\n'umatragurmukhi':u'\\u0A41',\n'umonospace':u'\\uFF55',\n'underscore':u'\\u005F',\n'underscoredbl':u'\\u2017',\n'underscoremonospace':u'\\uFF3F',\n'underscorevertical':u'\\uFE33',\n'underscorewavy':u'\\uFE4F',\n'union':u'\\u222A',\n'universal':u'\\u2200',\n'uogonek':u'\\u0173',\n'uparen':u'\\u24B0',\n'upblock':u'\\u2580',\n'upperdothebrew':u'\\u05C4',\n'upsilon':u'\\u03C5',\n'upsilondieresis':u'\\u03CB',\n'upsilondieresistonos':u'\\u03B0',\n'upsilonlatin':u'\\u028A',\n'upsilontonos':u'\\u03CD',\n'uptackbelowcmb':u'\\u031D',\n'uptackmod':u'\\u02D4',\n'uragurmukhi':u'\\u0A73',\n'uring':u'\\u016F',\n'ushortcyrillic':u'\\u045E',\n'usmallhiragana':u'\\u3045',\n'usmallkatakana':u'\\u30A5',\n'usmallkatakanahalfwidth':u'\\uFF69',\n'ustraightcyrillic':u'\\u04AF',\n'ustraightstrokecyrillic':u'\\u04B1',\n'utilde':u'\\u0169',\n'utildeacute':u'\\u1E79',\n'utildebelow':u'\\u1E75',\n'uubengali':u'\\u098A',\n'uudeva':u'\\u090A',\n'uugujarati':u'\\u0A8A',\n'uugurmukhi':u'\\u0A0A',\n'uumatragurmukhi':u'\\u0A42',\n'uuvowelsignbengali':u'\\u09C2',\n'uuvowelsigndeva':u'\\u0942',\n'uuvowelsigngujarati':u'\\u0AC2',\n'uvowelsignbengali':u'\\u09C1',\n'uvowelsigndeva':u'\\u0941',\n'uvowelsigngujarati':u'\\u0AC1',\n'v':u'\\u0076',\n'vadeva':u'\\u0935',\n'vagujarati':u'\\u0AB5',\n'vagurmukhi':u'\\u0A35',\n'vakatakana':u'\\u30F7',\n'vav':u'\\u05D5',\n'vavdagesh':u'\\uFB35',\n'vavdagesh65':u'\\uFB35',\n'vavdageshhebrew':u'\\uFB35',\n'vavhebrew':u'\\u05D5',\n'vavholam':u'\\uFB4B',\n'vavholamhebrew':u'\\uFB4B',\n'vavvavhebrew':u'\\u05F0',\n'vavyodhebrew':u'\\u05F1',\n'vcircle':u'\\u24E5',\n'vdotbelow':u'\\u1E7F',\n'vecyrillic':u'\\u0432',\n'veharabic':u'\\u06A4',\n'vehfinalarabic':u'\\uFB6B',\n'vehinitialarabic':u'\\uFB6C',\n'vehmedialarabic':u'\\uFB6D',\n'vekatakana':u'\\u30F9',\n'venus':u'\\u2640',\n'verticalbar':u'\\u007C',\n'verticallineabovecmb':u'\\u030D',\n'verticallinebelowcmb':u'\\u0329',\n'verticallinelowmod':u'\\u02CC',\n'verticallinemod':u'\\u02C8',\n'vewarmenian':u'\\u057E',\n'vhook':u'\\u028B',\n'vikatakana':u'\\u30F8',\n'viramabengali':u'\\u09CD',\n'viramadeva':u'\\u094D',\n'viramagujarati':u'\\u0ACD',\n'visargabengali':u'\\u0983',\n'visargadeva':u'\\u0903',\n'visargagujarati':u'\\u0A83',\n'vmonospace':u'\\uFF56',\n'voarmenian':u'\\u0578',\n'voicediterationhiragana':u'\\u309E',\n'voicediterationkatakana':u'\\u30FE',\n'voicedmarkkana':u'\\u309B',\n'voicedmarkkanahalfwidth':u'\\uFF9E',\n'vokatakana':u'\\u30FA',\n'vparen':u'\\u24B1',\n'vtilde':u'\\u1E7D',\n'vturned':u'\\u028C',\n'vuhiragana':u'\\u3094',\n'vukatakana':u'\\u30F4',\n'w':u'\\u0077',\n'wacute':u'\\u1E83',\n'waekorean':u'\\u3159',\n'wahiragana':u'\\u308F',\n'wakatakana':u'\\u30EF',\n'wakatakanahalfwidth':u'\\uFF9C',\n'wakorean':u'\\u3158',\n'wasmallhiragana':u'\\u308E',\n'wasmallkatakana':u'\\u30EE',\n'wattosquare':u'\\u3357',\n'wavedash':u'\\u301C',\n'wavyunderscorevertical':u'\\uFE34',\n'wawarabic':u'\\u0648',\n'wawfinalarabic':u'\\uFEEE',\n'wawhamzaabovearabic':u'\\u0624',\n'wawhamzaabovefinalarabic':u'\\uFE86',\n'wbsquare':u'\\u33DD',\n'wcircle':u'\\u24E6',\n'wcircumflex':u'\\u0175',\n'wdieresis':u'\\u1E85',\n'wdotaccent':u'\\u1E87',\n'wdotbelow':u'\\u1E89',\n'wehiragana':u'\\u3091',\n'weierstrass':u'\\u2118',\n'wekatakana':u'\\u30F1',\n'wekorean':u'\\u315E',\n'weokorean':u'\\u315D',\n'wgrave':u'\\u1E81',\n'whitebullet':u'\\u25E6',\n'whitecircle':u'\\u25CB',\n'whitecircleinverse':u'\\u25D9',\n'whitecornerbracketleft':u'\\u300E',\n'whitecornerbracketleftvertical':u'\\uFE43',\n'whitecornerbracketright':u'\\u300F',\n'whitecornerbracketrightvertical':u'\\uFE44',\n'whitediamond':u'\\u25C7',\n'whitediamondcontainingblacksmalldiamond':u'\\u25C8',\n'whitedownpointingsmalltriangle':u'\\u25BF',\n'whitedownpointingtriangle':u'\\u25BD',\n'whiteleftpointingsmalltriangle':u'\\u25C3',\n'whiteleftpointingtriangle':u'\\u25C1',\n'whitelenticularbracketleft':u'\\u3016',\n'whitelenticularbracketright':u'\\u3017',\n'whiterightpointingsmalltriangle':u'\\u25B9',\n'whiterightpointingtriangle':u'\\u25B7',\n'whitesmallsquare':u'\\u25AB',\n'whitesmilingface':u'\\u263A',\n'whitesquare':u'\\u25A1',\n'whitestar':u'\\u2606',\n'whitetelephone':u'\\u260F',\n'whitetortoiseshellbracketleft':u'\\u3018',\n'whitetortoiseshellbracketright':u'\\u3019',\n'whiteuppointingsmalltriangle':u'\\u25B5',\n'whiteuppointingtriangle':u'\\u25B3',\n'wihiragana':u'\\u3090',\n'wikatakana':u'\\u30F0',\n'wikorean':u'\\u315F',\n'wmonospace':u'\\uFF57',\n'wohiragana':u'\\u3092',\n'wokatakana':u'\\u30F2',\n'wokatakanahalfwidth':u'\\uFF66',\n'won':u'\\u20A9',\n'wonmonospace':u'\\uFFE6',\n'wowaenthai':u'\\u0E27',\n'wparen':u'\\u24B2',\n'wring':u'\\u1E98',\n'wsuperior':u'\\u02B7',\n'wturned':u'\\u028D',\n'wynn':u'\\u01BF',\n'x':u'\\u0078',\n'xabovecmb':u'\\u033D',\n'xbopomofo':u'\\u3112',\n'xcircle':u'\\u24E7',\n'xdieresis':u'\\u1E8D',\n'xdotaccent':u'\\u1E8B',\n'xeharmenian':u'\\u056D',\n'xi':u'\\u03BE',\n'xmonospace':u'\\uFF58',\n'xparen':u'\\u24B3',\n'xsuperior':u'\\u02E3',\n'y':u'\\u0079',\n'yaadosquare':u'\\u334E',\n'yabengali':u'\\u09AF',\n'yacute':u'\\u00FD',\n'yadeva':u'\\u092F',\n'yaekorean':u'\\u3152',\n'yagujarati':u'\\u0AAF',\n'yagurmukhi':u'\\u0A2F',\n'yahiragana':u'\\u3084',\n'yakatakana':u'\\u30E4',\n'yakatakanahalfwidth':u'\\uFF94',\n'yakorean':u'\\u3151',\n'yamakkanthai':u'\\u0E4E',\n'yasmallhiragana':u'\\u3083',\n'yasmallkatakana':u'\\u30E3',\n'yasmallkatakanahalfwidth':u'\\uFF6C',\n'yatcyrillic':u'\\u0463',\n'ycircle':u'\\u24E8',\n'ycircumflex':u'\\u0177',\n'ydieresis':u'\\u00FF',\n'ydotaccent':u'\\u1E8F',\n'ydotbelow':u'\\u1EF5',\n'yeharabic':u'\\u064A',\n'yehbarreearabic':u'\\u06D2',\n'yehbarreefinalarabic':u'\\uFBAF',\n'yehfinalarabic':u'\\uFEF2',\n'yehhamzaabovearabic':u'\\u0626',\n'yehhamzaabovefinalarabic':u'\\uFE8A',\n'yehhamzaaboveinitialarabic':u'\\uFE8B',\n'yehhamzaabovemedialarabic':u'\\uFE8C',\n'yehinitialarabic':u'\\uFEF3',\n'yehmedialarabic':u'\\uFEF4',\n'yehmeeminitialarabic':u'\\uFCDD',\n'yehmeemisolatedarabic':u'\\uFC58',\n'yehnoonfinalarabic':u'\\uFC94',\n'yehthreedotsbelowarabic':u'\\u06D1',\n'yekorean':u'\\u3156',\n'yen':u'\\u00A5',\n'yenmonospace':u'\\uFFE5',\n'yeokorean':u'\\u3155',\n'yeorinhieuhkorean':u'\\u3186',\n'yerahbenyomohebrew':u'\\u05AA',\n'yerahbenyomolefthebrew':u'\\u05AA',\n'yericyrillic':u'\\u044B',\n'yerudieresiscyrillic':u'\\u04F9',\n'yesieungkorean':u'\\u3181',\n'yesieungpansioskorean':u'\\u3183',\n'yesieungsioskorean':u'\\u3182',\n'yetivhebrew':u'\\u059A',\n'ygrave':u'\\u1EF3',\n'yhook':u'\\u01B4',\n'yhookabove':u'\\u1EF7',\n'yiarmenian':u'\\u0575',\n'yicyrillic':u'\\u0457',\n'yikorean':u'\\u3162',\n'yinyang':u'\\u262F',\n'yiwnarmenian':u'\\u0582',\n'ymonospace':u'\\uFF59',\n'yod':u'\\u05D9',\n'yoddagesh':u'\\uFB39',\n'yoddageshhebrew':u'\\uFB39',\n'yodhebrew':u'\\u05D9',\n'yodyodhebrew':u'\\u05F2',\n'yodyodpatahhebrew':u'\\uFB1F',\n'yohiragana':u'\\u3088',\n'yoikorean':u'\\u3189',\n'yokatakana':u'\\u30E8',\n'yokatakanahalfwidth':u'\\uFF96',\n'yokorean':u'\\u315B',\n'yosmallhiragana':u'\\u3087',\n'yosmallkatakana':u'\\u30E7',\n'yosmallkatakanahalfwidth':u'\\uFF6E',\n'yotgreek':u'\\u03F3',\n'yoyaekorean':u'\\u3188',\n'yoyakorean':u'\\u3187',\n'yoyakthai':u'\\u0E22',\n'yoyingthai':u'\\u0E0D',\n'yparen':u'\\u24B4',\n'ypogegrammeni':u'\\u037A',\n'ypogegrammenigreekcmb':u'\\u0345',\n'yr':u'\\u01A6',\n'yring':u'\\u1E99',\n'ysuperior':u'\\u02B8',\n'ytilde':u'\\u1EF9',\n'yturned':u'\\u028E',\n'yuhiragana':u'\\u3086',\n'yuikorean':u'\\u318C',\n'yukatakana':u'\\u30E6',\n'yukatakanahalfwidth':u'\\uFF95',\n'yukorean':u'\\u3160',\n'yusbigcyrillic':u'\\u046B',\n'yusbigiotifiedcyrillic':u'\\u046D',\n'yuslittlecyrillic':u'\\u0467',\n'yuslittleiotifiedcyrillic':u'\\u0469',\n'yusmallhiragana':u'\\u3085',\n'yusmallkatakana':u'\\u30E5',\n'yusmallkatakanahalfwidth':u'\\uFF6D',\n'yuyekorean':u'\\u318B',\n'yuyeokorean':u'\\u318A',\n'yyabengali':u'\\u09DF',\n'yyadeva':u'\\u095F',\n'z':u'\\u007A',\n'zaarmenian':u'\\u0566',\n'zacute':u'\\u017A',\n'zadeva':u'\\u095B',\n'zagurmukhi':u'\\u0A5B',\n'zaharabic':u'\\u0638',\n'zahfinalarabic':u'\\uFEC6',\n'zahinitialarabic':u'\\uFEC7',\n'zahiragana':u'\\u3056',\n'zahmedialarabic':u'\\uFEC8',\n'zainarabic':u'\\u0632',\n'zainfinalarabic':u'\\uFEB0',\n'zakatakana':u'\\u30B6',\n'zaqefgadolhebrew':u'\\u0595',\n'zaqefqatanhebrew':u'\\u0594',\n'zarqahebrew':u'\\u0598',\n'zayin':u'\\u05D6',\n'zayindagesh':u'\\uFB36',\n'zayindageshhebrew':u'\\uFB36',\n'zayinhebrew':u'\\u05D6',\n'zbopomofo':u'\\u3117',\n'zcaron':u'\\u017E',\n'zcircle':u'\\u24E9',\n'zcircumflex':u'\\u1E91',\n'zcurl':u'\\u0291',\n'zdot':u'\\u017C',\n'zdotaccent':u'\\u017C',\n'zdotbelow':u'\\u1E93',\n'zecyrillic':u'\\u0437',\n'zedescendercyrillic':u'\\u0499',\n'zedieresiscyrillic':u'\\u04DF',\n'zehiragana':u'\\u305C',\n'zekatakana':u'\\u30BC',\n'zero':u'\\u0030',\n'zeroarabic':u'\\u0660',\n'zerobengali':u'\\u09E6',\n'zerodeva':u'\\u0966',\n'zerogujarati':u'\\u0AE6',\n'zerogurmukhi':u'\\u0A66',\n'zerohackarabic':u'\\u0660',\n'zeroinferior':u'\\u2080',\n'zeromonospace':u'\\uFF10',\n'zerooldstyle':u'\\uF730',\n'zeropersian':u'\\u06F0',\n'zerosuperior':u'\\u2070',\n'zerothai':u'\\u0E50',\n'zerowidthjoiner':u'\\uFEFF',\n'zerowidthnonjoiner':u'\\u200C',\n'zerowidthspace':u'\\u200B',\n'zeta':u'\\u03B6',\n'zhbopomofo':u'\\u3113',\n'zhearmenian':u'\\u056A',\n'zhebrevecyrillic':u'\\u04C2',\n'zhecyrillic':u'\\u0436',\n'zhedescendercyrillic':u'\\u0497',\n'zhedieresiscyrillic':u'\\u04DD',\n'zihiragana':u'\\u3058',\n'zikatakana':u'\\u30B8',\n'zinorhebrew':u'\\u05AE',\n'zlinebelow':u'\\u1E95',\n'zmonospace':u'\\uFF5A',\n'zohiragana':u'\\u305E',\n'zokatakana':u'\\u30BE',\n'zparen':u'\\u24B5',\n'zretroflexhook':u'\\u0290',\n'zstroke':u'\\u01B6',\n'zuhiragana':u'\\u305A',\n'zukatakana':u'\\u30BA',\n}\n\n", []], "Lib.site-packages.pdfminer.lzw": [".py", "#!/usr/bin/env python\nfrom io import BytesIO\n\n\nclass CorruptDataError(Exception):\n pass\n \n \n \n \nclass LZWDecoder:\n\n def __init__(self,fp):\n  self.fp=fp\n  self.buff=0\n  self.bpos=8\n  self.nbits=9\n  self.table=None\n  self.prevbuf=None\n  return\n  \n def readbits(self,bits):\n  v=0\n  while 1:\n  \n   r=8 -self.bpos\n   if bits <=r:\n   \n   \n   \n    v=(v <<bits)|((self.buff >>(r -bits))&((1 <<bits)-1))\n    self.bpos +=bits\n    break\n   else :\n   \n   \n   \n    v=(v <<r)|(self.buff&((1 <<r)-1))\n    bits -=r\n    x=self.fp.read(1)\n    if not x:\n     raise EOFError\n    self.buff=x[0]\n    self.bpos=0\n  return v\n  \n def feed(self,code):\n  x=b''\n  if code ==256:\n   self.table=[bytes([c])for c in range(256)]\n   self.table.append(None )\n   self.table.append(None )\n   self.prevbuf=b''\n   self.nbits=9\n  elif code ==257:\n   pass\n  elif not self.prevbuf:\n   x=self.prevbuf=self.table[code]\n  else :\n   if code <len(self.table):\n    x=self.table[code]\n    self.table.append(self.prevbuf+x[:1])\n   elif code ==len(self.table):\n    self.table.append(self.prevbuf+self.prevbuf[:1])\n    x=self.table[code]\n   else :\n    raise CorruptDataError\n   l=len(self.table)\n   if l ==511:\n    self.nbits=10\n   elif l ==1023:\n    self.nbits=11\n   elif l ==2047:\n    self.nbits=12\n   self.prevbuf=x\n  return x\n  \n def run(self):\n  while 1:\n   try :\n    code=self.readbits(self.nbits)\n   except EOFError:\n    break\n   try :\n    x=self.feed(code)\n   except CorruptDataError:\n   \n    break\n   yield x\n   \n   \n  return\n  \n  \n  \ndef lzwdecode(data):\n ''\n\n\n \n fp=BytesIO(data)\n return b''.join(LZWDecoder(fp).run())\n \nif __name__ =='__main__':\n import doctest\n print('pdfminer.lzw',doctest.testmod())\n", ["doctest", "io"]], "Lib.site-packages.pdfminer.runlength": [".py", "#!/usr/bin/env python\n\n\n\n\n\n\n\ndef rldecode(data):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n decoded=b''\n i=0\n while i <len(data):\n \n  length=data[i]\n  if length ==128:\n   break\n  if length >=0 and length <128:\n   run=data[i+1:(i+1)+(length+1)]\n   \n   decoded +=run\n   i=(i+1)+(length+1)\n  if length >128:\n   run=data[i+1:i+2]*(257 -length)\n   \n   decoded +=run\n   i=(i+1)+1\n return decoded\n \n \nif __name__ =='__main__':\n import doctest\n print('pdfminer.runlength',doctest.testmod())\n", ["doctest"]], "Lib.site-packages.pdfminer.ascii85": [".py", "#!/usr/bin/env python\n\n\"\"\" Python implementation of ASCII85/ASCIIHex decoder (Adobe version).\n\nThis code is in the public domain.\n\n\"\"\"\n\nimport re\nimport struct\n\n\n\ndef ascii85decode(data):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n n=b=0\n out=b''\n for c in data:\n  if 33 <=c and c <=117:\n   n +=1\n   b=b *85+(c -33)\n   if n ==5:\n    out +=struct.pack('>L',b)\n    n=b=0\n  elif c ==122:\n   assert n ==0\n   out +=b'\\0\\0\\0\\0'\n  elif c ==126:\n   if n:\n    for _ in range(5 -n):\n     b=b *85+84\n    out +=struct.pack('>L',b)[:n -1]\n   break\n return out\n \n \nhex_re=re.compile(r'([a-f\\d]{2})',re.IGNORECASE)\ntrail_re=re.compile(r'^(?:[a-f\\d]{2}|\\s)*([a-f\\d])[\\s>]*$',re.IGNORECASE)\n\n\ndef asciihexdecode(data):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n data=data.decode('latin1')\n out=[int(hx,16)for hx in hex_re.findall(data)]\n m=trail_re.search(data)\n if m:\n  out.append(int(m.group(1),16)<<4)\n return bytes(out)\n \n \nif __name__ =='__main__':\n import doctest\n print('pdfminer.ascii85',doctest.testmod())\n", ["doctest", "re", "struct"]], "Lib.site-packages.pdfminer.encodingdb": [".py", "#!/usr/bin/env python\nimport re\nfrom .psparser import PSLiteral\nfrom .glyphlist import glyphname2unicode\nfrom .latin_enc import ENCODING\n\n\nSTRIP_NAME=re.compile(r'[0-9]+')\n\n\n\n\ndef name2unicode(name):\n ''\n if name in glyphname2unicode:\n  return glyphname2unicode[name]\n m=STRIP_NAME.search(name)\n if not m:\n  raise KeyError(name)\n return chr(int(m.group(0)))\n \n \n \n \nclass EncodingDB:\n\n std2unicode={}\n mac2unicode={}\n win2unicode={}\n pdf2unicode={}\n for (name,std,mac,win,pdf)in ENCODING:\n  c=name2unicode(name)\n  if std:\n   std2unicode[std]=c\n  if mac:\n   mac2unicode[mac]=c\n  if win:\n   win2unicode[win]=c\n  if pdf:\n   pdf2unicode[pdf]=c\n   \n encodings={\n 'StandardEncoding':std2unicode,\n 'MacRomanEncoding':mac2unicode,\n 'WinAnsiEncoding':win2unicode,\n 'PDFDocEncoding':pdf2unicode,\n }\n \n @classmethod\n def get_encoding(klass,name,diff=None ):\n  cid2unicode=klass.encodings.get(name,klass.std2unicode)\n  if diff:\n   cid2unicode=cid2unicode.copy()\n   cid=0\n   for x in diff:\n    if isinstance(x,int):\n     cid=x\n    elif isinstance(x,PSLiteral):\n     try :\n      cid2unicode[cid]=name2unicode(x.name)\n     except KeyError:\n      pass\n     cid +=1\n  return cid2unicode\n", ["Lib.site-packages.pdfminer.glyphlist", "Lib.site-packages.pdfminer.latin_enc", "Lib.site-packages.pdfminer.psparser", "re"]], "Lib.site-packages.pdfminer.latin_enc": [".py", "#!/usr/bin/env python\n\n\"\"\" Standard encoding tables used in PDF.\n\nThis table is extracted from PDF Reference Manual 1.6, pp.925\n  \"D.1 Latin Character Set and Encodings\"\n\n\"\"\"\n\nENCODING=[\n\n('A',65,65,65,65),\n('AE',225,174,198,198),\n('Aacute',None ,231,193,193),\n('Acircumflex',None ,229,194,194),\n('Adieresis',None ,128,196,196),\n('Agrave',None ,203,192,192),\n('Aring',None ,129,197,197),\n('Atilde',None ,204,195,195),\n('B',66,66,66,66),\n('C',67,67,67,67),\n('Ccedilla',None ,130,199,199),\n('D',68,68,68,68),\n('E',69,69,69,69),\n('Eacute',None ,131,201,201),\n('Ecircumflex',None ,230,202,202),\n('Edieresis',None ,232,203,203),\n('Egrave',None ,233,200,200),\n('Eth',None ,None ,208,208),\n('Euro',None ,None ,128,160),\n('F',70,70,70,70),\n('G',71,71,71,71),\n('H',72,72,72,72),\n('I',73,73,73,73),\n('Iacute',None ,234,205,205),\n('Icircumflex',None ,235,206,206),\n('Idieresis',None ,236,207,207),\n('Igrave',None ,237,204,204),\n('J',74,74,74,74),\n('K',75,75,75,75),\n('L',76,76,76,76),\n('Lslash',232,None ,None ,149),\n('M',77,77,77,77),\n('N',78,78,78,78),\n('Ntilde',None ,132,209,209),\n('O',79,79,79,79),\n('OE',234,206,140,150),\n('Oacute',None ,238,211,211),\n('Ocircumflex',None ,239,212,212),\n('Odieresis',None ,133,214,214),\n('Ograve',None ,241,210,210),\n('Oslash',233,175,216,216),\n('Otilde',None ,205,213,213),\n('P',80,80,80,80),\n('Q',81,81,81,81),\n('R',82,82,82,82),\n('S',83,83,83,83),\n('Scaron',None ,None ,138,151),\n('T',84,84,84,84),\n('Thorn',None ,None ,222,222),\n('U',85,85,85,85),\n('Uacute',None ,242,218,218),\n('Ucircumflex',None ,243,219,219),\n('Udieresis',None ,134,220,220),\n('Ugrave',None ,244,217,217),\n('V',86,86,86,86),\n('W',87,87,87,87),\n('X',88,88,88,88),\n('Y',89,89,89,89),\n('Yacute',None ,None ,221,221),\n('Ydieresis',None ,217,159,152),\n('Z',90,90,90,90),\n('Zcaron',None ,None ,142,153),\n('a',97,97,97,97),\n('aacute',None ,135,225,225),\n('acircumflex',None ,137,226,226),\n('acute',194,171,180,180),\n('adieresis',None ,138,228,228),\n('ae',241,190,230,230),\n('agrave',None ,136,224,224),\n('ampersand',38,38,38,38),\n('aring',None ,140,229,229),\n('asciicircum',94,94,94,94),\n('asciitilde',126,126,126,126),\n('asterisk',42,42,42,42),\n('at',64,64,64,64),\n('atilde',None ,139,227,227),\n('b',98,98,98,98),\n('backslash',92,92,92,92),\n('bar',124,124,124,124),\n('braceleft',123,123,123,123),\n('braceright',125,125,125,125),\n('bracketleft',91,91,91,91),\n('bracketright',93,93,93,93),\n('breve',198,249,None ,24),\n('brokenbar',None ,None ,166,166),\n('bullet',183,165,149,128),\n('c',99,99,99,99),\n('caron',207,255,None ,25),\n('ccedilla',None ,141,231,231),\n('cedilla',203,252,184,184),\n('cent',162,162,162,162),\n('circumflex',195,246,136,26),\n('colon',58,58,58,58),\n('comma',44,44,44,44),\n('copyright',None ,169,169,169),\n('currency',168,219,164,164),\n('d',100,100,100,100),\n('dagger',178,160,134,129),\n('daggerdbl',179,224,135,130),\n('degree',None ,161,176,176),\n('dieresis',200,172,168,168),\n('divide',None ,214,247,247),\n('dollar',36,36,36,36),\n('dotaccent',199,250,None ,27),\n('dotlessi',245,245,None ,154),\n('e',101,101,101,101),\n('eacute',None ,142,233,233),\n('ecircumflex',None ,144,234,234),\n('edieresis',None ,145,235,235),\n('egrave',None ,143,232,232),\n('eight',56,56,56,56),\n('ellipsis',188,201,133,131),\n('emdash',208,209,151,132),\n('endash',177,208,150,133),\n('equal',61,61,61,61),\n('eth',None ,None ,240,240),\n('exclam',33,33,33,33),\n('exclamdown',161,193,161,161),\n('f',102,102,102,102),\n('fi',174,222,None ,147),\n('five',53,53,53,53),\n('fl',175,223,None ,148),\n('florin',166,196,131,134),\n('four',52,52,52,52),\n('fraction',164,218,None ,135),\n('g',103,103,103,103),\n('germandbls',251,167,223,223),\n('grave',193,96,96,96),\n('greater',62,62,62,62),\n('guillemotleft',171,199,171,171),\n('guillemotright',187,200,187,187),\n('guilsinglleft',172,220,139,136),\n('guilsinglright',173,221,155,137),\n('h',104,104,104,104),\n('hungarumlaut',205,253,None ,28),\n('hyphen',45,45,45,45),\n('i',105,105,105,105),\n('iacute',None ,146,237,237),\n('icircumflex',None ,148,238,238),\n('idieresis',None ,149,239,239),\n('igrave',None ,147,236,236),\n('j',106,106,106,106),\n('k',107,107,107,107),\n('l',108,108,108,108),\n('less',60,60,60,60),\n('logicalnot',None ,194,172,172),\n('lslash',248,None ,None ,155),\n('m',109,109,109,109),\n('macron',197,248,175,175),\n('minus',None ,None ,None ,138),\n('mu',None ,181,181,181),\n('multiply',None ,None ,215,215),\n('n',110,110,110,110),\n('nbspace',None ,202,160,None ),\n('nine',57,57,57,57),\n('ntilde',None ,150,241,241),\n('numbersign',35,35,35,35),\n('o',111,111,111,111),\n('oacute',None ,151,243,243),\n('ocircumflex',None ,153,244,244),\n('odieresis',None ,154,246,246),\n('oe',250,207,156,156),\n('ogonek',206,254,None ,29),\n('ograve',None ,152,242,242),\n('one',49,49,49,49),\n('onehalf',None ,None ,189,189),\n('onequarter',None ,None ,188,188),\n('onesuperior',None ,None ,185,185),\n('ordfeminine',227,187,170,170),\n('ordmasculine',235,188,186,186),\n('oslash',249,191,248,248),\n('otilde',None ,155,245,245),\n('p',112,112,112,112),\n('paragraph',182,166,182,182),\n('parenleft',40,40,40,40),\n('parenright',41,41,41,41),\n('percent',37,37,37,37),\n('period',46,46,46,46),\n('periodcentered',180,225,183,183),\n('perthousand',189,228,137,139),\n('plus',43,43,43,43),\n('plusminus',None ,177,177,177),\n('q',113,113,113,113),\n('question',63,63,63,63),\n('questiondown',191,192,191,191),\n('quotedbl',34,34,34,34),\n('quotedblbase',185,227,132,140),\n('quotedblleft',170,210,147,141),\n('quotedblright',186,211,148,142),\n('quoteleft',96,212,145,143),\n('quoteright',39,213,146,144),\n('quotesinglbase',184,226,130,145),\n('quotesingle',169,39,39,39),\n('r',114,114,114,114),\n('registered',None ,168,174,174),\n('ring',202,251,None ,30),\n('s',115,115,115,115),\n('scaron',None ,None ,154,157),\n('section',167,164,167,167),\n('semicolon',59,59,59,59),\n('seven',55,55,55,55),\n('six',54,54,54,54),\n('slash',47,47,47,47),\n('space',32,32,32,32),\n('sterling',163,163,163,163),\n('t',116,116,116,116),\n('thorn',None ,None ,254,254),\n('three',51,51,51,51),\n('threequarters',None ,None ,190,190),\n('threesuperior',None ,None ,179,179),\n('tilde',196,247,152,31),\n('trademark',None ,170,153,146),\n('two',50,50,50,50),\n('twosuperior',None ,None ,178,178),\n('u',117,117,117,117),\n('uacute',None ,156,250,250),\n('ucircumflex',None ,158,251,251),\n('udieresis',None ,159,252,252),\n('ugrave',None ,157,249,249),\n('underscore',95,95,95,95),\n('v',118,118,118,118),\n('w',119,119,119,119),\n('x',120,120,120,120),\n('y',121,121,121,121),\n('yacute',None ,None ,253,253),\n('ydieresis',None ,216,255,255),\n('yen',165,180,165,165),\n('z',122,122,122,122),\n('zcaron',None ,None ,158,158),\n('zero',48,48,48,48),\n]\n", []], "Lib.site-packages.pdfminer.image": [".py", "#!/usr/bin/env python\nimport struct\nimport os\nimport os.path\nfrom io import BytesIO\nfrom .pdftypes import LITERALS_DCT_DECODE\nfrom .pdfcolor import LITERAL_DEVICE_GRAY\nfrom .pdfcolor import LITERAL_DEVICE_RGB\nfrom .pdfcolor import LITERAL_DEVICE_CMYK\n\n\ndef align32(x):\n return ((x+3)//4)*4\n \n \n \n \nclass BMPWriter:\n\n def __init__(self,fp,bits,width,height):\n  self.fp=fp\n  self.bits=bits\n  self.width=width\n  self.height=height\n  if bits ==1:\n   ncols=2\n  elif bits ==8:\n   ncols=256\n  elif bits ==24:\n   ncols=0\n  else :\n   raise ValueError(bits)\n  self.linesize=align32((self.width *self.bits+7)//8)\n  self.datasize=self.linesize *self.height\n  headersize=14+40+ncols *4\n  info=struct.pack('<IiiHHIIIIII',40,self.width,self.height,1,self.bits,0,self.datasize,0,0,ncols,0)\n  assert len(info)==40,len(info)\n  header=struct.pack('<ccIHHI',b'B',b'M',headersize+self.datasize,0,0,headersize)\n  assert len(header)==14,len(header)\n  self.fp.write(header)\n  self.fp.write(info)\n  if ncols ==2:\n  \n   for i in (0,255):\n    self.fp.write(struct.pack('BBBx',i,i,i))\n  elif ncols ==256:\n  \n   for i in range(256):\n    self.fp.write(struct.pack('BBBx',i,i,i))\n  self.pos0=self.fp.tell()\n  self.pos1=self.pos0+self.datasize\n  return\n  \n def write_line(self,y,data):\n  self.fp.seek(self.pos1 -(y+1)*self.linesize)\n  self.fp.write(data)\n  return\n  \n  \n  \n  \nclass ImageWriter:\n\n def __init__(self,outdir):\n  self.outdir=outdir\n  if not os.path.exists(self.outdir):\n   os.makedirs(self.outdir)\n  return\n  \n def export_image(self,image):\n  stream=image.stream\n  filters=stream.get_filters()\n  (width,height)=image.srcsize\n  if len(filters)==1 and filters[0][0]in LITERALS_DCT_DECODE:\n   ext='.jpg'\n  elif (image.bits ==1 or\n  image.bits ==8 and image.colorspace in (LITERAL_DEVICE_RGB,LITERAL_DEVICE_GRAY)):\n   ext='.%dx%d.bmp'%(width,height)\n  else :\n   ext='.%d.%dx%d.img'%(image.bits,width,height)\n  name=image.name+ext\n  path=os.path.join(self.outdir,name)\n  with open(path,'wb')as fp:\n   if ext =='.jpg':\n    raw_data=stream.get_rawdata()\n    if LITERAL_DEVICE_CMYK in image.colorspace:\n     from PIL import Image\n     from PIL import ImageChops\n     ifp=BytesIO(raw_data)\n     i=Image.open(ifp)\n     i=ImageChops.invert(i)\n     i=i.convert('RGB')\n     i.save(fp,'JPEG')\n    else :\n     fp.write(raw_data)\n   elif image.bits ==1:\n    bmp=BMPWriter(fp,1,width,height)\n    data=stream.get_data()\n    i=0\n    width=(width+7)//8\n    for y in range(height):\n     bmp.write_line(y,data[i:i+width])\n     i +=width\n   elif image.bits ==8 and image.colorspace is LITERAL_DEVICE_RGB:\n    bmp=BMPWriter(fp,24,width,height)\n    data=stream.get_data()\n    i=0\n    width=width *3\n    for y in range(height):\n     bmp.write_line(y,data[i:i+width])\n     i +=width\n   elif image.bits ==8 and image.colorspace is LITERAL_DEVICE_GRAY:\n    bmp=BMPWriter(fp,8,width,height)\n    data=stream.get_data()\n    i=0\n    for y in range(height):\n     bmp.write_line(y,data[i:i+width])\n     i +=width\n   else :\n    fp.write(stream.get_data())\n  return name\n", ["Lib.site-packages.pdfminer.pdfcolor", "Lib.site-packages.pdfminer.pdftypes", "PIL", "io", "os", "os.path", "struct"]]}
__BRYTHON__.update_VFS(scripts)
